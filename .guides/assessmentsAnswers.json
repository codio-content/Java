[
 {
  "taskId": "fill-in-the-blanks-3212025220",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-2976548927",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-4285137417",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "test-3275115534",
  "points": 1,
  "results": [
   {
    "guidance": null,
    "format": null,
    "output": "<h3>Your code is error-free and works as expected!</h3>\nNice work",
    "timestamp": 1594738869836,
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "output": "Incorporate at least one greater than operator\n</br><hr/><h3>Something is not quite right...</h3>\nYour output is correct but see the comments above to ensure you are following the assignment",
    "timestamp": 1594738853245,
    "state": "fail"
   },
   {
    "guidance": null,
    "format": null,
    "output": "Incorporate at least one greater than operator\n</br><hr/><h3>Something is not quite right...</h3>\nYour output is correct but see the comments above to ensure you are following the assignment",
    "timestamp": 1594736303162,
    "state": "fail"
   },
   {
    "guidance": null,
    "format": null,
    "output": "<h3>Your code is error-free and works as expected!</h3>\nNice work",
    "timestamp": 1594736215716,
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "output": "<h3>Your code is error-free and works as expected!</h3>\nNice work",
    "timestamp": 1594732224921,
    "state": "pass"
   },
   {
    "code": 0,
    "output": "<h3>Your code is error-free and works as expected!</h3>\nNice work",
    "timestamp": 1578947560050,
    "state": "pass"
   },
   {
    "code": 1,
    "output": "python3: can't open file '.guides/secure/operators/labchallenge.py': [Errno 2] No such file or directory\n</br><hr/><h3>Something is not quite right...</h3>\nYour output is correct but see the comments above to ensure you are following the assignment",
    "timestamp": 1578947554776,
    "state": "fail"
   },
   {
    "code": 1,
    "output": "python3: can't open file '.guides/secure/operators/labchallenge.py': [Errno 2] No such file or directory\n</br><hr/><h3>Something is not quite right...</h3>\nYour output is correct but see the comments above to ensure you are following the assignment",
    "timestamp": 1578947485376,
    "state": "fail"
   },
   {
    "code": 1,
    "output": "<br/><hr/><h3>Challenge Feedback</h3>\nYour code is not outputing the correct value. Instead of <code>false</code> it is outputting:\ntrue",
    "timestamp": 1578947440626,
    "state": "fail"
   },
   {
    "code": 1,
    "output": "<br/><hr/><h3>Challenge Feedback</h3>\nYour code does not seem to be outputting anything. Make sure you are using <code>System.out.println();</code>",
    "timestamp": 1578947407654,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "fill-in-the-blanks-3628618227",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-1191669709",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-2355446782",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-328592840",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-3784696113",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-2935644769",
  "points": 0,
  "state": {
   "trashHash": "3_0-6_0-0_0-2_0-5_0-7_0",
   "solutionHash": "4_0-1_0",
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-2166592224",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-1224395313",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "code-output-compare-2085987884",
  "points": 1,
  "results": [
   {
    "guidance": "If you used the hint, you could have done this lab in 2 lines:\n```\n   System.out.println(greeting + \" Today is \" + dayOfWeek + \", \" + month + \" \" + day + \".\");\n   System.out.println(\"The current wait time is \" + currentWaitMinutes + \" minutes.\");\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"Hello! Today is Monday, July 4.\\nThe current wait time is 9 minutes.\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"Howdy! Today is Monday, May 5.\\nThe current wait time is 19 minutes.\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"Greetings! Today is Wednesday, May 18.\\nThe current wait time is 1 minutes.\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"Hi, Today is banana, pear 52.\\nThe current wait time is -4 minutes.\\n\"}]}",
    "timestamp": 1589300882140,
    "state": "pass"
   },
   {
    "guidance": "If you used the hint, you could have done this lab in 2 lines:\n```\n   System.out.println(greeting + \" Today is \" + dayOfWeek + \", \" + month + \" \" + day + \".\");\n   System.out.println(\"The current wait time is \" + currentWaitMinutes + \" minutes.\");\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1589300777767,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-330789572",
  "points": 0,
  "results": [
   {
    "guidance": "```\nboolean my_boolean = true;\nSystem.out.println(my_boolean);\nmy_boolean = test;\nSystem.out.println(my_boolean);\n```\nYou can initialize `my_boolean` on a separate line and use `print` instead of `println`.\n```\nboolean my_boolean;\nmy_boolean = true;\nSystem.out.print(my_boolean);\nmy_boolean = test;\nSystem.out.print(my_boolean);\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1589393018233,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-903040154",
  "points": 0,
  "results": [
   {
    "guidance": "You can do the declaration and initialization on the same line:\n```\n    int my_int = first_num;\n    System.out.println(my_int);\n    my_int = second_num;\n    System.out.println(my_int);\n    my_int = third_num;\n    System.out.println(my_int);\n```\nYou can also use `print` instead of `println`",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1589394425188,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-1000393404",
  "points": 0,
  "results": [
   {
    "guidance": "You can separate your decleration and initialization onto two lines. Also, you can initialize to either `0` or `0.0` or `0.00` etc\n\n```\ndouble my_double = 0;\nSystem.out.println(my_double);\nmy_double = one;\nSystem.out.println(my_double);\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1589485961919,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "multiple-choice-4056916696",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-4124457133",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "test-13854979",
  "points": 0,
  "results": [
   {
    "guidance": "It does not matter where you split up the string...but the first line needs to use `print` instead of `println`. You can also use `print` for both.\n\n```\nSystem.out.print(\"Okay, it is time to \");\nSystem.out.print(\"learn about operators.\");\n```",
    "format": null,
    "output": "<br/><hr/><h3>Challenge Feedback</h3>\nYour code is not outputing the correct value",
    "timestamp": 1593117223760,
    "state": "fail"
   },
   {
    "guidance": "It does not matter where you split up the string...but the first line needs to use `print` instead of `println`. You can also use `print` for both.\n\n```\nSystem.out.print(\"Okay, it is time to \");\nSystem.out.print(\"learn about operators.\");\n```",
    "output": "<br/><hr/><h3>Challenge Feedback</h3>\nYour code is not outputing the correct value",
    "timestamp": 1591889432750,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "fill-in-the-blanks-436876892",
  "points": 0,
  "state": {
   "active": [
    "--",
    "-=b"
   ]
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-3182685241",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-2865610959",
  "points": 0,
  "state": {
   "active": "1683c18e-8028-78e4-ed08-400978af773a"
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-3051591814",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-3851320160",
  "points": 0,
  "results": [],
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  }
 },
 {
  "taskId": "multiple-choice-3653165015",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-1997792767",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-2590570867",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-2191103233",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-3532271981",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-1476766980",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-1182062674",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-3834665657",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "test-3510090921",
  "points": 0,
  "results": [
   {
    "guidance": "The compilation bug is located on the following line:\n```\nboolean b = 9;\n```\n\nThe bug is that `b` is declared as a `boolean` but is being assigned `9` which is an `int`. To correct this, you would replace `boolean` with `int` which results in:\n```\nint b = 9;\n```\n",
    "format": null,
    "output": "code/operators/Exercise1.java:7: error: incompatible types: int cannot be converted to String\n    String b = 9;\n               ^\ncode/operators/Exercise1.java:11: error: bad operand types for binary operator '-'\n    System.out.println(a * 3 + b - 8 / 2);\n                                 ^\n  first type:  String\n  second type: int\n2 errors\n</br><hr/><h3>Your code has compilation errors!</h3>\nTry correcting the errors listed above",
    "timestamp": 1594742637126,
    "state": "fail"
   },
   {
    "guidance": "The compilation bug is located on the following line:\n```\nboolean b = 9;\n```\n\nThe bug is that `b` is declared as a `boolean` but is being assigned `9` which is an `int`. To correct this, you would replace `boolean` with `int` which results in:\n```\nint b = 9;\n```\n",
    "format": null,
    "output": "code/operators/Exercise1.java:7: error: incompatible types: int cannot be converted to String\n    String b = 9;\n               ^\ncode/operators/Exercise1.java:11: error: bad operand types for binary operator '-'\n    System.out.println(a * 3 + b - 8 / 2);\n                                 ^\n  first type:  String\n  second type: int\n2 errors\n</br><hr/><h3>Your code has compilation errors!</h3>\nTry correcting the errors listed above",
    "timestamp": 1594740602444,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "test-3481226015",
  "points": 0,
  "results": [
   {
    "guidance": "The following will solve the code:\n```\nint a = 4;\nint b = 9;\n```\n\nBut there are other valid solutions! Can you find another one?",
    "format": null,
    "output": "code/operators/Exercise1.java:7: error: incompatible types: int cannot be converted to String\n    String b = 9;\n               ^\ncode/operators/Exercise1.java:11: error: bad operand types for binary operator '-'\n    System.out.println(a * 3 + b - 8 / 2);\n                                 ^\n  first type:  String\n  second type: int\n2 errors\n</br><hr/><h3>Your code has compilation errors!</h3>\nTry correcting the errors listed above",
    "timestamp": 1594742642799,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-3620880377",
  "points": 0,
  "results": [
   {
    "guidance": "Your friend is attempting to add Strings - but the `+` operate concatenates them! To solve this, you need to use `Integer.parseInt()` to transform the user input to `int`s. One example of a solution is:\n```\nint sum = Integer.parseInt(firstNum) + Integer.parseInt(secondNum);\nSystem.out.println(firstNum + \" + \" + secondNum + \" = \" + String.valueOf(sum));\n```\nYou might have noticed you do not need the `String.valueOf` since Java auto-converts some types - but being explicit is helpful to the readers of your code!",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"Type the first whole number and press Enter:Type the second whole number and press Enter:5 + 4 = 54\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"Type the first whole number and press Enter:Type the second whole number and press Enter:1 + 7 = 17\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"Type the first whole number and press Enter:Type the second whole number and press Enter:3 + 4 = 34\\n\"}]}",
    "timestamp": 1594760305076,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "multiple-choice-952800372",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-1569129353",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-2128281602",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-2774974450",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-3392232950",
  "points": 0,
  "results": [],
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  }
 },
 {
  "taskId": "multiple-choice-3356521837",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-2751211238",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-1569349997",
  "points": 0,
  "state": {
   "active": "559ca87f-9d7f-7354-fc1f-e25bfa0e5194"
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-330785356",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "code-output-compare-1176951521",
  "points": 1,
  "results": [
   {
    "guidance": "One way to complete this challenge is a switch statement:\n```\nString monthString;\n        switch (month) {\n            case 1:  monthString = \"January\"; break;\n            case 2:  monthString = \"February\"; break;\n            case 3:  monthString = \"March\"; break;\n            case 4:  monthString = \"April\"; break;\n            case 5:  monthString = \"May\"; break;\n            case 6:  monthString = \"June\"; break;\n            case 7:  monthString = \"July\"; break;\n            case 8:  monthString = \"August\"; break;\n            case 9:  monthString = \"September\"; break;\n            case 10: monthString = \"October\"; break;\n            case 11: monthString = \"November\"; break;\n            case 12: monthString = \"December\"; break;\n            default: monthString = \"Invalid month\"; break;\n        }\n        System.out.println(monthString);\n```\n\nYou could have also used either if or if-else statements too!",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"January\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"February\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"March\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"April\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"May\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"June\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"July\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"August\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"September\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"October\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"November\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"December\\n\"}]}",
    "timestamp": 1595603331130,
    "state": "pass"
   },
   {
    "guidance": "One way to complete this challenge is a switch statement:\n```\nString monthString;\n        switch (month) {\n            case 1:  monthString = \"January\"; break;\n            case 2:  monthString = \"February\"; break;\n            case 3:  monthString = \"March\"; break;\n            case 4:  monthString = \"April\"; break;\n            case 5:  monthString = \"May\"; break;\n            case 6:  monthString = \"June\"; break;\n            case 7:  monthString = \"July\"; break;\n            case 8:  monthString = \"August\"; break;\n            case 9:  monthString = \"September\"; break;\n            case 10: monthString = \"October\"; break;\n            case 11: monthString = \"November\"; break;\n            case 12: monthString = \"December\"; break;\n            default: monthString = \"Invalid month\"; break;\n        }\n        System.out.println(monthString);\n```\n\nYou could have also used either if or if-else statements too!",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1595603303730,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-80440528",
  "points": 0,
  "results": [
   {
    "guidance": "You can do this with a single if statement using a compound conditional.\n```\nif( (x >= 0 && x <=25) || (x >= 75 && x <=100) )\n    { System.out.println(String.valueOf(x) + \" is between 0 and 25 or 75 and 100\"); }\n```\nAlternatively, you could use other combinations such as two separate if statements.",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"\"}]}",
    "timestamp": 1595608548969,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-596935369",
  "points": 0,
  "results": [
   {
    "guidance": "A single if else can be used to solve this exercise. The real trick is remembering that modulo `%` is the correct operator to check for \"is divisible by\".\n\n```\nif ( x % 5 == 0 )\n    { System.out.println(String.valueOf(x) + \" is divisible by 5\"); }\nelse\n    { System.out.println(String.valueOf(x) + \" is not divisible by 5\"); }\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1595611072193,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-2452434922",
  "points": 0,
  "results": [
   {
    "guidance": "You can use a single `if else` with compound conditionals to complete this challenge:\n```\nif ( x % 5 == 0 && x % 2 == 0)\n    { System.out.println(String.valueOf(x) + \" is divisible by 5 and even\"); }\nelse\n    { System.out.println(String.valueOf(x) + \" is not divisible by 5 or it is odd\"); }\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1595612577692,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "code-output-compare-1582349154",
  "points": 1,
  "results": [
   {
    "guidance": "There are a few ways to do this. One way is to use a `switch case`:\n```\nswitch (x) {\n    case \"yellow\": case \"red\": case \"blue\": System.out.println(x + \" is a primary color\"); break;\n    default: System.out.println(x + \" is not a primary color\"); break;\n}\n```\n\nOr you could use a compound conditional in an `if else`:\n```\nif( x.equals(\"yellow\") || x.equals(\"red\") || x.equals(\"blue\") )\n    {System.out.println(x + \" is a primary color\");}\nelse\n    {System.out.println(x + \" is not a primary color\");}\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"red is a primary color\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"yellow is a primary color\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"blue is a primary color\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"purple is not a primary color\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"orange is not a primary color\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"teal is not a primary color\\n\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"brown is not a primary color\\n\"}]}",
    "timestamp": 1595623306757,
    "state": "pass"
   },
   {
    "guidance": "There are a few ways to do this. One way is to use a `switch case`:\n```\nswitch (x) {\n    case \"yellow\": case \"red\": case \"blue\": System.out.println(x + \" is a primary color\"); break;\n    default: System.out.println(x + \" is not a primary color\"); break;\n}\n```\n\nOr you could use a compound conditional in an `if else`:\n```\nif( x.equals(\"yellow\") || x.equals(\"red\") || x.equals(\"blue\") )\n    {System.out.println(x + \" is a primary color\");}\nelse\n    {System.out.println(x + \" is not a primary color\");}\n```",
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1595613808560,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "parsons-puzzle-3742835214",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-3472530842",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-90216139",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-700172618",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-4115991507",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-3084493133",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-554878332",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-3684672137",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-1942677726",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "test-2973701964",
  "points": 0,
  "results": []
 },
 {
  "taskId": "test-2204813483",
  "points": 0,
  "results": []
 },
 {
  "taskId": "code-output-compare-124790676",
  "points": 0,
  "results": []
 },
 {
  "taskId": "test-230614594",
  "points": 0,
  "results": []
 },
 {
  "taskId": "test-2160672239",
  "points": 0,
  "results": []
 },
 {
  "taskId": "multiple-choice-3787725782",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-1183891837",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-966946164",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-6741937",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-247291117",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-2362887149",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-945377963",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "test-4111672069",
  "points": 0,
  "results": []
 },
 {
  "taskId": "multiple-choice-1357018041",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-568009750",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-3807028898",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-2251455786",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-2702771590",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-3987656755",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-1047073280",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-594360288",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-225623719",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-1250261069",
  "points": 0,
  "state": {
   "trashHash": null,
   "solutionHash": null,
   "toggleStates": "{}"
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-1411510745",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-298729376",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-3501560183",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 }
]