[
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2074845473",
  "source": {
   "name": "If Else",
   "showName": true,
   "instructions": "Drag the appropriate code blocks into the box below. Your program should check to see if a number is even and print \"Even\". If the number is odd, then print \"Odd\". Assume the variable `x` represents the number to be tested.\n\nRemember to indent your code!",
   "initial": "if(x % 2 == 0)\n    {System.out.print(\"Even\");}\nelse\n    {System.out.print(\"Odd\");}\nif(x % 2 = 0) #distractor\nif(x / 2 == 0) #distractor\nSystem.out.print(Even); #distractor\nSystem.out.print(Odd); #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "Here is the correct answer:\n\n```java\nif(x % 2 == 0)\n    {System.out.print(\"Even\");}\nelse\n    {System.out.print(\"Odd\");}\n```\n\nHere is why the other options are incorrect:\n\n* `if x % 2 = 0` - The equality operator (`==`) is not used.\n* `if x / 2 == 0` - The `/` operator is division. To be even, there can be no remainder. The modulo operator (`%`) must be used instead.\n* `System.out.print(Even);` - The quotation marks are missing. Without them, Java will try to print the variable `Even`, which has not been declared. \n* `System.out.print(Odd);` - The quotation marks are missing. Without them, Java will try to print the variable `Odd`, which has not been declared. ",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/conditionals/Lab_IfElse.java",
     "code/selection/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_IfElse.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT construct an if else statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3649559415",
  "source": {
   "name": "If Statements",
   "showName": false,
   "instructions": "Select all of the statements below that are true with regards to if statements. \n\n**Hint:** There is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ae9339af-fb42-8d8e-417c-fb46b58232bf",
     "correct": true,
     "answer": "If statements only ask if a boolean expression is true."
    },
    {
     "_id": "3acea470-c092-f47c-fa6f-d2e9cda607a7",
     "correct": false,
     "answer": "If statements will perform a set of actions if the boolean expression is false."
    },
    {
     "_id": "2aefb536-6703-74bd-6e97-314c0d90dd7b",
     "correct": false,
     "answer": "If statements provide the most precision of all the conditional statements."
    },
    {
     "_id": "279c31cc-b47f-1756-d5ef-c97da61a6514",
     "correct": true,
     "answer": "If statements are the simplest of all the conditionals."
    }
   ],
   "guidance": "The correct answers are:\n\n```\nIf statements only ask if a boolean expression is true.\n\nIf statements are the simplest of all the conditionals.\n```\n\nIf statements can only ask if a boolean expression is true. An else statement takes into account a false boolean expression.\n\nIf statements are the simplest because they ignore when a boolean expression is false, and they do not ask subsequent boolean expressions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Pyh"
     },
     {
      "name": "Category",
      "value": "If statement"
     }
    ],
    "files": [
     "code/conditionals/Lab_IfStatement.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_IfStatement.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the characteristics of an if statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2919609863",
  "source": {
   "name": "Make a Triangle",
   "showName": true,
   "instructions": "Construct a program by drag&amp;dropping and reordering lines from the left to the right. You can change the loop header (<span class=\"jsparson-toggle\"></span>) by clicking them. The constructed program should draw a triangle like shown below.\n\nHint: You need to indent the lines of code within the loop by dragging the blocks slightly to the right. We'll talk about this next.",
   "initial": "REPEAT $$toggle::2::3::4$$ TIMES\nforward(100)\nleft(120)\nENDREPEAT\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"turtleModelCode\": \"modelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\",\n  \"executable_code\": \"for i in range(0,3):\\nmyTurtle.forward(100)\\nmyTurtle.left(120)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5",
   "guidance": "The loop header is setting up how many times code is repeated. In the case of a triangle, it makes sense to repeat 3 times - one for each side.\n\n```\nREPEAT 3 TIMES\n  forward(100)\n  left(120)\nENDREPEAT\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Loop Headers"
     },
     {
      "name": "Programming Language",
      "value": "Psuedo"
     },
     {
      "name": "Category",
      "value": "Loops"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT... define a loop header"
  },
  "linkedId": "5038b41f-51e1-4de2-bba9-0435fc132d47",
  "libraryId": "a6135984-c66a-483f-9eb2-48cdba182812",
  "version": 0
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1264740481",
  "source": {
   "name": "Make a Square",
   "showName": true,
   "instructions": "Construct a program by drag&amp;dropping and reordering lines from the left to the right. You can change the loop header (<span class=\"jsparson-toggle\"></span>) by clicking them. The constructed program should draw a square like shown below. Be sure to indent the loop body by dragging repeated blocks slightly to the right.",
   "initial": "REPEAT $$toggle::2::3::4$$ TIMES\nforward(100)\nleft(90)\nENDREPEAT\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"modelTurtle.forward(100)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(90)\",\n  \"executable_code\": \"for i in range(0,4):\\nmyTurtle.forward(100)\\nmyTurtle.left(90)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5",
   "guidance": "The loop header is setting up how many times code is repeated. In the case of a square, it makes sense to repeat 4 times - one for each side.\n\nThe loop body are the lines to be repeated, in this case the blocks instructing the turtle to turn and step forward.\n\n```\nREPEAT 4 TIMES\n  forward(100)\n  left(90)\nENDREPEAT\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Category",
      "value": "Loops"
     },
     {
      "name": "Content",
      "value": "Loop Body"
     },
     {
      "name": "Programming Language",
      "value": "Psuedo"
     }
    ],
    "files": [
     "loop.flode"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT... define a loop body"
  },
  "libraryId": "a6135984-c66a-483f-9eb2-48cdba182812",
  "version": 0,
  "linkedId": "5f45c731-8ac5-40c6-bc8a-39bdd9fb9098"
 },
 {
  "type": "test",
  "taskId": "test-2965980592",
  "source": {
   "name": "Fence-Posting Answer",
   "showName": true,
   "instructions": "Click here to see the bug-free flow chart",
   "command": "/bin/true",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "![](.guides/img/fenceSoln.png)",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "fence.flode"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "fence.flode"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2167968400",
  "source": {
   "name": "Loop Vocabulary",
   "showName": true,
   "instructions": "Select the appropriate vocabulary words in the paragraph below.",
   "text": "In code, we use loops to repeat or <<<iterate>>> over sections of code. The <<<loop header>>> indicates how many times the loop will repeat the code. The code section that is repeated is called the <<<loop body>>>.",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "iterate",
     "loop header",
     "loop body"
    ],
    "text": [
     "In code, we use loops to repeat or ",
     0,
     " over sections of code. The ",
     0,
     " indicates how many times the loop will repeat the code. The code section that is repeated is called the ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1835017652",
  "source": {
   "name": "How many repetitions?",
   "showName": true,
   "instructions": "Looking at the psuedo-code below, how many times will the loop repeat?\n\n```\ni = 0;\nloop while i <= 5\n    print(i);\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a808549d-ff49-8b80-25f6-82e574dbb137",
     "correct": false,
     "answer": "4"
    },
    {
     "_id": "e0673c9d-66a3-ac21-5859-66d305a1c788",
     "correct": false,
     "answer": "5"
    },
    {
     "_id": "cd425d6d-bb39-2944-a89b-e2718ae7df0b",
     "correct": false,
     "answer": "6"
    },
    {
     "_id": "dc97bc08-3ee0-5559-e9f0-8015a7ee8826",
     "correct": true,
     "answer": "infinite"
    }
   ],
   "guidance": "`i` is never incremented, so `i` remains `0` forever. Because `i=0` forever, `i<=5` will ALWAYS be true.\n\nWithout the incriminator, we get an infinite loop!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3591130309",
  "source": {
   "name": "What is the output?",
   "showName": true,
   "instructions": "What is the output of the following psuedo-code?\n\n```\ni = 0;\nloop while i < 10\n    i = i + 2;\n    print(i + \",\");\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f52be2d7-c7cf-c811-84e4-78bb3063bf56",
     "correct": false,
     "answer": "0,2,4,6,8"
    },
    {
     "_id": "ee4b10b2-8a26-9023-5442-12fff710589e",
     "correct": false,
     "answer": "0,2,4,6,8,"
    },
    {
     "_id": "18bdba2f-5a19-7cff-849d-73140f3b2bc9",
     "correct": false,
     "answer": "2,4,6,8,10"
    },
    {
     "_id": "ef6389af-113a-b054-fdde-ccf361074cd4",
     "correct": true,
     "answer": "2,4,6,8,10,"
    }
   ],
   "guidance": "Because the print statement is *after* the increment of i, we see values 2-10. Flipping the two lines within the loop body would change the values to 0-8.\n\nBecause we do not use fence-posting, we have an extraneous `,` in our output.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3185531965",
  "source": {
   "name": "For Loop flow",
   "showName": true,
   "instructions": "After completing the loop body, what part of the for loop header is run?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "02056a52-0228-34db-d77e-2a6f318f6148",
     "correct": false,
     "answer": "int i = 10"
    },
    {
     "_id": "85e8fcaa-693d-2843-0ce4-12c0bb9d400d",
     "correct": false,
     "answer": "i >= 0"
    },
    {
     "_id": "37555a97-5218-c552-09f5-bc2a668f6156",
     "correct": true,
     "answer": "i--"
    }
   ],
   "guidance": "Even though it is the last part of the for loop header, the incrementing is the first piece of the header run after an iteration.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/ForLoop.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/ForLoop.java"
     },
     {
      "type": "tutor",
      "panelNumber": 1,
      "content": "code/ForLoop.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-336859680",
  "source": {
   "name": "For Loop Flow",
   "showName": true,
   "instructions": "Re-arrange the blocks below so that is shows the flow of execution for the code:\n```java\nfor(int i = 0; i < 2; i++) {\n    System.out.println(i);\n}\n```\n",
   "initial": "for(int i = 0;\ni < 2;\nSystem.out.println(i);\ni++\ni < 2;\nSystem.out.println(i);\ni++\ni < 2;\nfor(int i = 0; #distractor\ni < 2; #distractor\nSystem.out.println(i); #distractor\ni++ #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"can_indent\": false,\n  \"max_wrong_lines\": 2\n}",
   "grader": "1",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/ForLoop.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/ForLoop.java"
     },
     {
      "type": "tutor",
      "panelNumber": 1,
      "content": "code/ForLoop.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2547412741",
  "source": {
   "name": "Printing - Reading Question 1",
   "showName": true,
   "instructions": "What is wrong with the code snippet below?\n```\nSystem.out.println(Hello world);\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "98269ac4-221e-99c2-a370-5bb9a7a1e43f",
     "correct": false,
     "answer": "Capitalize `print`"
    },
    {
     "_id": "24ba2369-1319-d169-5724-ae922d7b9a84",
     "correct": false,
     "answer": "Use `{}` instead of `()`"
    },
    {
     "_id": "d9d0f578-f0b5-9920-478b-5dedad2afc65",
     "correct": true,
     "answer": "Missing `\"` around `Hello world`"
    },
    {
     "_id": "5b259746-35ab-8daf-e7f7-e85013da0125",
     "correct": false,
     "answer": "Add a `;` at the end of the line of code"
    }
   ],
   "guidance": "After the print command use parentheses and quotation marks around the words to be printed.\n```\nSystem.out.print(\"Hello world\");\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundPrinting1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundPrinting1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2710921318",
  "source": {
   "name": "Printing - Reading Question 2",
   "showName": true,
   "instructions": "Which of the following commands adds a newline character?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0f4cd3f1-1bc1-7bca-c5b7-b3ed441ad84a",
     "correct": false,
     "answer": "`System.out.print(\"Hello\");`"
    },
    {
     "_id": "06080af5-6086-6f81-d3ba-ecc73cc8b1f6",
     "correct": true,
     "answer": "`System.out.println(\"Hello\");`"
    }
   ],
   "guidance": "`System.out.println(\"Hello\");` inserts a new line character after `Hello` which is hard to see when you only print one line of text. However, if you print two lines like:\n```\nSystem.out.println(\"Hello\");\nSystem.out.println(\"World!\");\n```\nIt outputs:\n```\nHello\nWorld!\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundPrinting2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundPrinting2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1191669709",
  "source": {
   "name": "Print Statement",
   "showName": true,
   "instructions": "What does the `System.out.print();` or `print` statement do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d7d80be3-ec5a-1dd2-3dec-7f197270a0a2",
     "correct": false,
     "answer": "Sends your output to the printer"
    },
    {
     "_id": "8c3f2936-de60-039c-ab3b-923944853e61",
     "correct": false,
     "answer": "Sends your output to a file"
    },
    {
     "_id": "47224aaf-0efb-46b5-471b-eb90cec3cd6e",
     "correct": true,
     "answer": "Sends your output to the screen"
    },
    {
     "_id": "9311dd34-afec-1afa-4a22-40bd88277de9",
     "correct": false,
     "answer": "Sends your output to the compiler"
    }
   ],
   "guidance": "The `print` command sends your output to your computer's default output which is the computer console or terminal.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2355446782",
  "source": {
   "name": "Printing with the Newline Character",
   "showName": true,
   "instructions": "Fill in the blank with the missing text that will print the text `Hi!` **with** a newline character?",
   "text": "`System.out.<<<println>>>(\"Hi!\");`",
   "guidance": "To add the newline character, you use the `println` command instead of the `print` command. The code should look like: `System.out.println(\"Hi!\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "println"
    ],
    "text": [
     "`System.out.",
     0,
     "(\"Hi!\");`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-328592840",
  "source": {
   "name": "Variables - Reading Question 1",
   "showName": true,
   "instructions": "Which parts of a variable do *not* change in Java?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "b1beff98-719d-cc43-3796-8bd3cac2bc03",
     "correct": true,
     "answer": "data type"
    },
    {
     "_id": "b1f8b186-381e-4a69-4bc5-859981f8f85f",
     "correct": true,
     "answer": "name"
    },
    {
     "_id": "1a9e1dc1-1581-42e8-ad92-79d34f0e0bfe",
     "correct": false,
     "answer": "value"
    }
   ],
   "guidance": "For each variable, the data type and name of the variable *never* change. The value can be re-assigned as many times as you want!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables1.java"
     },
     {
      "type": "tutor",
      "panelNumber": 1,
      "content": "code/fundamentals/PlaygroundVariables1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3784696113",
  "source": {
   "name": "Variables - int vs double",
   "showName": true,
   "instructions": "Fill in the following with the appropriate vocabulary to explain the difference between a double and an int.",
   "text": "A <<<double>>> is a <<<floating point number>>> meaning it has a <<<decimal>>>, where an <<<int>>> is a <<<whole number>>> meaning it does not have a decimal.",
   "guidance": "A `double` is a floating point number or a rational number meaning it has a decimal or represents a fraction, where an `int` (short for integer) is a whole number meaning it does not have a decimal.\n\nBoth can be positive or negative!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "double",
     "floating point number",
     "decimal",
     "int",
     "whole number"
    ],
    "text": [
     "A ",
     0,
     " is a ",
     0,
     " meaning it has a ",
     0,
     ", where an ",
     0,
     " is a ",
     0,
     " meaning it does not have a decimal."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3562273974",
  "source": {
   "name": "Variables - Booleans RQ",
   "showName": true,
   "instructions": "What is the general rule for boolean values in Java?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "fffe32a5-3fb4-d6e3-24f9-830f2795f75f",
     "correct": true,
     "answer": "Boolean values are case sensitive and must be lowercase."
    },
    {
     "_id": "af3927d1-6442-b597-3ae1-33a7d5018b99",
     "correct": false,
     "answer": "Boolean values are not case sensitive and can be either uppercase or lowercase."
    },
    {
     "_id": "950da155-8c2e-44d8-f8f0-6e775bf686e4",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be uppercase."
    },
    {
     "_id": "7c3ce400-ac2d-3bed-fbfe-57a0811ef3a1",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be all caps."
    }
   ],
   "guidance": "Boolean values in Java are case sensitive and must start with a lowercase letter: `true` or `false`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-78767737",
  "source": {
   "name": "Variables - Strings",
   "showName": true,
   "instructions": "Complete the line of code below so that variable declaration and assignment is correct.",
   "text": "`<<<String>>> var;`\n`var = \"a <<<string>>> is made up of words and num63rs<<<\">>>;`",
   "guidance": "Unlike the previous data types, `String` is capitalized and the value of a String is surrounded by double quotation marks.\n\n```\nString var;\nvar = \"a string is made up of words and num63rs\";\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "String",
     "string",
     "\""
    ],
    "text": [
     "`",
     0,
     " var;`\n`var = \"a ",
     0,
     " is made up of words and num63rs",
     0,
     ";`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1839186458",
  "source": {
   "name": "Declaring Variables",
   "showName": true,
   "instructions": "Which of the following code snippets contain correct variable declerations?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "34add045-19a1-30fe-1590-a921287d1899",
     "correct": false,
     "answer": "```\nint var;\nString var;\n```"
    },
    {
     "_id": "d70b48eb-03de-f36b-0701-7b972ce58971",
     "correct": false,
     "answer": "```\nString var;\nString var;\n```"
    },
    {
     "_id": "a2f56772-5cf8-0a1c-596a-251d9a37d745",
     "correct": false,
     "answer": "```\nString var;\nint var 2;\n```"
    },
    {
     "_id": "9998090e-4e0f-efc2-8edb-4060ae5d6d8b",
     "correct": true,
     "answer": "```\nString var;\nint Var;\n```"
    }
   ],
   "guidance": "Java does not allow different variables to have the same name - regardless of data type.\n\nAdditionally, Java does not allow spaces in variable names - either user `camelCase` or `snake_case` to separate words.\n\nSince Java variables are case sensitive, `var` and `Var` are different variables.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2935644769",
  "source": {
   "name": "Declaring, Initializing, and Assigning Variables",
   "showName": true,
   "instructions": "Construct a program that initializes variable <code>my_variable</code> to 5 and prints it out. \n\nThen, re-assign <code>my_variable</code> to 10 and print it out.\n\nThe output of the code you are constructing looks like:\n```\n5\n10\n```\n\nYou will not need to use all of the blocks.",
   "initial": "int my_variable = 5;\nSystem.out.println(my_variable);\nmy_variable = 10;\nSystem.out.println(my_variable);\nint my_variable = 10; #distractor\ndouble my_variable = 5; #distractor\nmy_variable = 5; #distractor\nmy_variable = \"10\"; #distractor",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"trashId\": \"sortableTrash\",\n                \"vartests\": [{\"initcode\": \"output = ''\", \"code\": \"\", \"message\": \"Testing...\", \"variables\": {\"output\": \"510\"}}\n                    ],\n                \"executable_code\": \"my_variable = 5\\noutput += str(my_variable)\\nmy_variable = 10\\noutput += str(my_variable)\",\n                \"programmingLang\": \"java\"\n            }",
   "grader": "4",
   "guidance": "You will use an `int` instead of a double since 5 and 10 are whole numbers. Additionally, if you use `double` it would print out `5.0` and `10.0` by default.\n\nYou cannot assign a String (`\"10\"`) to an `int`.\n\nYou do not need to re-declare when you reassign (`int my_variable = 10`).\n\n```\nint my_variable = 5;\nSystem.out.println(my_variable);\nmy_variable = 10;\nSystem.out.println(my_variable);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1224395313",
  "source": {
   "name": "Variable names",
   "showName": true,
   "instructions": "Which of the following is a correct variable name?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "19d4bcaf-a480-896d-176c-e1a268e515ca",
     "correct": false,
     "answer": "1st_variable"
    },
    {
     "_id": "a2520066-4178-e626-c39c-c76f0cf2fdfa",
     "correct": true,
     "answer": "variable_1"
    },
    {
     "_id": "5def279b-4c97-971e-2d01-dc8db8299403",
     "correct": false,
     "answer": "variable_1!"
    },
    {
     "_id": "d1ce0668-9733-2afd-fbf3-90d9e13a79bb",
     "correct": false,
     "answer": "-1-variable-"
    }
   ],
   "guidance": "Here are the basic rules for variable names: \n1. Start with a letter, dollar sign or underscore\n2. Remainder of variable name is letters, numbers, or underscores\n3. Cannot use a Java keyword\n4. Variables are case sensitive",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2166592224",
  "source": {
   "name": "Data Types",
   "showName": true,
   "instructions": "What are the four basic data types used in Java?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "2248a790-0e3c-9a40-9927-a703a227627d",
     "correct": false,
     "answer": "short"
    },
    {
     "_id": "852b4c55-184a-ae33-e327-6d7077949001",
     "correct": true,
     "answer": "int"
    },
    {
     "_id": "bfae0f9f-bbe9-ebde-66a5-f97b0eadae4d",
     "correct": false,
     "answer": "long"
    },
    {
     "_id": "f2876720-d2e2-8833-3a7c-971e1b0d1bda",
     "correct": true,
     "answer": "double"
    },
    {
     "_id": "d200699b-8abc-1e1d-b7d2-4f36694f921a",
     "correct": false,
     "answer": "char"
    },
    {
     "_id": "fb5473ff-c05c-4276-5e3f-9b121323fb3d",
     "correct": false,
     "answer": "number"
    },
    {
     "_id": "f20011ad-f2f6-4b10-8d0f-8ee4a94e8da8",
     "correct": true,
     "answer": "String"
    },
    {
     "_id": "548f680a-74e6-658e-a0b9-19dc17463c1e",
     "correct": true,
     "answer": "boolean"
    },
    {
     "_id": "1ed50fdf-3e31-1d3a-e1d4-f00fc934069f",
     "correct": false,
     "answer": "bits"
    }
   ],
   "guidance": "The four basic data types that you have learned so far are:\n\nString - collections of letters, numbers, and symbols\nboolean - true or false\nint - integers (no decimal)\ndouble - numbers with a decimal",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2085987884",
  "source": {
   "name": "Chat greeting",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Lab_Challenge",
   "preExecuteCommand": "javac code/fundamentals/Lab_Challenge.java",
   "guidance": "If you used the hint, you could have done this lab in 2 lines:\n```\n   System.out.println(greeting + \" Today is \" + dayOfWeek + \", \" + month + \" \" + day + \".\");\n   System.out.println(\"The current wait time is \" + currentWaitMinutes + \" minutes.\");\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": false,
   "sequence": [
    {
     "arguments": "Hello! Monday July 4 9",
     "input": "",
     "output": "Hello! Today is Monday, July 4.\nThe current wait time is 9 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Howdy! Monday May 5 19",
     "input": "",
     "output": "Howdy! Today is Monday, May 5.\nThe current wait time is 19 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Greetings! Wednesday May 18 1",
     "input": "",
     "output": "Greetings! Today is Wednesday, May 18.\nThe current wait time is 1 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Hi, banana pear 52 -4",
     "input": "",
     "output": "Hi, Today is banana, pear 52.\nThe current wait time is -4 minutes.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Lab_Challenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Lab_Challenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-330789572",
  "source": {
   "name": "Exercise 1",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise1",
   "preExecuteCommand": "javac code/fundamentals/Exercise1.java",
   "guidance": "```\nboolean my_boolean = true;\nSystem.out.println(my_boolean);\nmy_boolean = test;\nSystem.out.println(my_boolean);\n```\nYou can initialize `my_boolean` on a separate line and use `print` instead of `println`.\n```\nboolean my_boolean;\nmy_boolean = true;\nSystem.out.print(my_boolean);\nmy_boolean = test;\nSystem.out.print(my_boolean);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "true",
     "input": "",
     "output": "true\ntrue",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "false",
     "input": "",
     "output": "true\nfalse",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise1.java",
     "code/fundamentals/Lab_Challenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-903040154",
  "source": {
   "name": "Exercise 2",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise2",
   "preExecuteCommand": "javac code/fundamentals/Exercise2.java",
   "guidance": "You can do the declaration and initialization on the same line:\n```\n    int my_int = first_num;\n    System.out.println(my_int);\n    my_int = second_num;\n    System.out.println(my_int);\n    my_int = third_num;\n    System.out.println(my_int);\n```\nYou can also use `print` instead of `println`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1 2 3",
     "input": "",
     "output": "1\n2\n3",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "-3 -2 -1",
     "input": "",
     "output": "-3\n-2\n-1",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5 99 -2",
     "input": "",
     "output": "5\n99\n-2",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2269653152",
  "source": {
   "name": "Exercise 3",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise3",
   "preExecuteCommand": "javac code/fundamentals/Exercise3.java",
   "guidance": "Because the string variables are already declared and initialized, you simply need to access them. You need to use `println` to ensure the newlines after each line is printed.\n```\n    System.out.println(line1);\n    System.out.println(line2);\n```\n\nYou could use empty `println` commands if you wanted:\n```\n    System.out.print(line1);\n    System.out.println();\n    System.out.print(line2);\n    System.out.println();\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": false,
    "ignoreWhitespaces": false,
    "ignoreNewline": false,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "Hi Bye",
     "input": "",
     "output": "Hi\nBye\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1 2",
     "input": "",
     "output": "1\n2\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "true false",
     "input": "",
     "output": "true\nfalse\n",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1000393404",
  "source": {
   "name": "Exercise 4",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise4",
   "preExecuteCommand": "javac code/fundamentals/Exercise4.java",
   "guidance": "You can separate your decleration and initialization onto two lines. Also, you can initialize to either `0` or `0.0` or `0.00` etc\n\n```\ndouble my_double = 0;\nSystem.out.println(my_double);\nmy_double = one;\nSystem.out.println(my_double);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "-9",
     "input": "",
     "output": "0.0\n-9.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "33.22",
     "input": "",
     "output": "0.0\n33.22",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2105043593",
  "source": {
   "name": "Exercise 5",
   "showName": true,
   "instructions": "Use **two** print statements to write the following String:\n`Okay, it is time to learn about operators.`\n\nMake sure there are **no** new lines.",
   "command": "java -cp code/fundamentals/ Exercise5",
   "preExecuteCommand": "javac code/fundamentals/Exercise5.java",
   "guidance": "You should not use **any** `println` statements - instead, only use `print`. It does not matter where you split up the string...\n\n```\nSystem.out.print(\"Okay, it is time to \");\nSystem.out.print(\"learn about operators.\");\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": false,
    "ignoreWhitespaces": false,
    "ignoreNewline": false,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Okay, it is time to learn about operators.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-225606126",
  "source": {
   "name": "Adding ints and doubles",
   "showName": true,
   "instructions": "What happens when you add an int and a double together?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "bc8dbe64-eda2-60df-5c38-cc446b03866b",
     "correct": false,
     "answer": "You get an error"
    },
    {
     "_id": "f4263f0e-d245-4f11-2073-a517e90270b0",
     "correct": false,
     "answer": "You get an int"
    },
    {
     "_id": "01063c21-7332-6c64-65d6-cd9f918314cd",
     "correct": true,
     "answer": "You get a double"
    }
   ],
   "guidance": "Since a double can represent the same value as an integer (`2.0` is the same value as `2`), but not necessarily the other way around (`2.4` cannot be an int) the result will be a double. For example:\n\n`7.0 + 3 = 10.0`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundAddition.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundAddition.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3212025220",
  "source": {
   "name": "Incrementing",
   "showName": true,
   "instructions": "Use the fewest characters possible to complete the code as described.",
   "text": "`int evens = 0;`\n`//add 2`\n`evens <<<+=2>>>;`\n`int all = 0;`\n`//add 1`\n`all<<<++>>>;`",
   "guidance": "```\nint evens = 0;\n//add 2\nevens+=2;\nint all = 0;\n//add 1\nall++;\n```\nIf you are incrementing by 1, the shortest way is the `++` operator, if you are incrementing by any other number (like 2) the shortest way is the `+=` operator.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundIncrement.java",
     "code/operators/PlaygroundAddition.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundIncrement.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "+=2",
     "++"
    ],
    "text": [
     "`int evens = 0;`\n`//add 2`\n`evens ",
     0,
     ";`\n`int all = 0;`\n`//add 1`\n`all",
     0,
     ";`"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1012342029",
  "source": {
   "name": "Concatenation",
   "showName": true,
   "instructions": "Construct a program that will print:\n`I understand String concatenation!`\n",
   "initial": "String a = \"I understand\";\nString b = a + \" String concatenation!\";\nSystem.out.println(b);\nString b = a + \"String concatenation!\"; #distractor\nString a = 'I understand '; #distractor\nSystem.out.println(a+b); #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "```\nString a = \"I understand\";\nString b = a + \" String concatenation!\";\nSystem.out.println(b);\n```\nIn Java, Strings must use double quotes (\") - not single quotes ('). \n\nAdditionally, you need to either end or start with a space when concatenating two Strings to get normal spacing in your resulting String. \n\nString a needs to be declared and instantiated *before* you use it in the instantiation of String b.\n\nSince you are concatenating String a in the initialization of String b, you do not need to concatenate it *again* in the print statement.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/operators/PlaygroundConcatenation.java",
     "code/operators/PlaygroundIncrement.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundConcatenation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-436876892",
  "source": {
   "name": "Decrementing",
   "showName": true,
   "instructions": "Use the fewest characters possible to complete the code as described.",
   "text": "`int a = 42;`\n`int b = 2;`\n`//decrement a by 1`\n`a<<<-->>>;`\n`//decrement a by b`\n`a<<<-=b>>>;`",
   "guidance": "```\nint a = 42;\nint b = 2;\n//decrement a by 1\na--;\n//decrement a by b\na-=b;\n```\n\nTo decrement by 1, you use the `--` operator. To decrement or subtract by any other number, you use `-=`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundSubtraction.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundSubtraction.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "--",
     "-=b"
    ],
    "text": [
     "`int a = 42;`\n`int b = 2;`\n`//decrement a by 1`\n`a",
     0,
     ";`\n`//decrement a by b`\n`a",
     0,
     ";`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3182685241",
  "source": {
   "name": "Division",
   "showName": true,
   "instructions": "Which of the following statements about division in Java is **FALSE**?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "20cbdcb8-5d89-be8b-0e2a-ce06b400dc63",
     "correct": false,
     "answer": "You can use the division operator with `int`s"
    },
    {
     "_id": "a18c3f44-9a7a-d473-3e9a-1db4bfe10522",
     "correct": true,
     "answer": "You will get the same result from the division operator using `int`s and `double`s"
    },
    {
     "_id": "8709f43c-8f4f-bf49-e28e-da9defcd5268",
     "correct": false,
     "answer": "You can use the division operator with `double`s"
    },
    {
     "_id": "1204353c-1b27-9b96-1cbb-3587ca3cdf73",
     "correct": false,
     "answer": "You are not allowed to divide by 0"
    }
   ],
   "guidance": "`int`s and `double`s behave differently with the division operator. Using `double` will result in a decimal where `int` will result in a whole number with the decimal removed. This means that `10/3` is either `3.3333...` or `3` based on data types.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundDivision.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundDivision.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2865610959",
  "source": {
   "name": "Modulo",
   "showName": true,
   "instructions": "What does modulo (`%`) do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "caa5ead1-0e21-0ee9-07b9-4294ae467633",
     "correct": false,
     "answer": "Determines if a number is even or odd"
    },
    {
     "_id": "1683c18e-8028-78e4-ed08-400978af773a",
     "correct": false,
     "answer": "Is another name for division"
    },
    {
     "_id": "23427095-50b5-eede-b414-bb5eb204d056",
     "correct": false,
     "answer": "Determines the percentage of two numbers"
    },
    {
     "_id": "582039a5-37e3-9388-8c53-a0973032e295",
     "correct": true,
     "answer": "Returns the remainder after division is performed"
    }
   ],
   "guidance": "Modulo is the remainder after division is performed. So division is a part of modulo, but modulo is not division. Modulo can be used to determine if a number is even or odd, but modulo can do more than that. Finally, the `%` is used with modulo, but modulo does not deal with percentages.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundModulo.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundModulo.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3051591814",
  "source": {
   "name": "Multiplication",
   "showName": true,
   "instructions": "Complete the code below so that the program prints the product of `a` and `b`.",
   "text": "```\nint a = 5;\nint b = 9;\nSystem.out.println( a <<<*>>> b);\n```",
   "guidance": "Use `*` for multiplication. You also need to add the variable b, multiplication requires two numbers.\n\n`System.out.println(a * b);`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundMultiply.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundMultiply.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "*"
    ],
    "text": [
     "```\nint a = 5;\nint b = 9;\nSystem.out.println( a ",
     0,
     " b);\n```"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2569485715",
  "source": {
   "name": "Order of Operations",
   "showName": true,
   "instructions": "At what point does Java calculate modulo?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "bae16272-bd40-019b-1894-2535626dd0df",
     "correct": false,
     "answer": "Parentheses"
    },
    {
     "_id": "6d3054a3-b8b7-0bfd-3598-4f5e8bbaa08b",
     "correct": false,
     "answer": "Exponent"
    },
    {
     "_id": "a58d58e9-c3c7-39f7-0fa8-efb0f23fa031",
     "correct": true,
     "answer": "Multiplication and Division"
    },
    {
     "_id": "5d14a9b2-2ada-924d-22d1-07a5582ec20e",
     "correct": false,
     "answer": "Addition and Subtraction"
    }
   ],
   "guidance": "Modulo is a type of division, so it is done in order from left to right with the `/` and `*` operators.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundOrder.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundOrder.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3851320160",
  "source": {
   "name": "Programming Math",
   "showName": true,
   "instructions": "Construct a program below such that Java reaches the same answer a normal calculator would. You will **not** use all the blocks.",
   "initial": "double a = 2;\nSystem.out.println(5/a);\nint a = 2; #distractor\nSystem.out.println( (double) (5/a) ); #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "```\ndouble a = 2;\nSystem.out.println(5/a);\n```\n\nFor \"normal\" division to take place, a needs to be a `double` because `5` is not. If it was `5.0` then `int` vs `double` would not matter.\n\nCasting the result as `double` is not necessary since the result of division including a double is always going to be a double.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/operators/PlaygroundModulo.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundModulo.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3653165015",
  "source": {
   "name": "Modulo",
   "showName": true,
   "instructions": "Which of the following is **not** correct?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b40c3d4f-3efe-8f7e-df26-10fade52fe33",
     "correct": false,
     "answer": "6 % 4 = 2"
    },
    {
     "_id": "7f92f93a-0d40-5a7b-ca48-463ac360621b",
     "correct": true,
     "answer": "1 % 0 = 1"
    },
    {
     "_id": "142ba911-4fa7-ce20-2eab-1e4ceb7fc4ad",
     "correct": false,
     "answer": "0 % 2 = 0"
    },
    {
     "_id": "df6cfe79-ab30-6760-2322-8f75241f738e",
     "correct": false,
     "answer": "15 % 4 = 3"
    }
   ],
   "guidance": "Because modulo is a type of division, you cannot modulo divide by 0. Similar to `/0`, `%0` produces an error.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundModulo.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundModulo.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1997792767",
  "source": {
   "name": "Equality",
   "showName": true,
   "instructions": "Enter the appropriate operator for each definition.",
   "text": "This operator checks if two values are equal - <<<==>>>\nThis operator assigns a value to a variable - <<<=>>>\nThis operator checks if two values are not equal - <<<!=>>>",
   "guidance": "* The `=` operator assigns a value to a variable\n* The `==` operator checks equality between two values\n* The `!=` operator checks inequality between two values",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundEquality.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundEquality.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "==",
     "=",
     "!="
    ],
    "text": [
     "This operator checks if two values are equal - ",
     0,
     "\nThis operator assigns a value to a variable - ",
     0,
     "\nThis operator checks if two values are not equal - ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3157845998",
  "source": {
   "name": "Equating to True",
   "showName": true,
   "instructions": "Which of the following conditions would cause the expression `a <= b` to equate to true? \n\n**Hint:** there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "a9b98a69-e35a-df53-1cf9-525ae460df2f",
     "correct": true,
     "answer": "If `a` is less than `b`"
    },
    {
     "_id": "f8444326-0244-3aa6-fb25-f2a1075ed55e",
     "correct": false,
     "answer": "If `a` is less than and equal to `b`"
    },
    {
     "_id": "d1a1e3b0-d207-d0ce-193b-5fb5a0e876ec",
     "correct": true,
     "answer": "If `a` is equal to `b`"
    },
    {
     "_id": "52f37bf4-a901-5735-0cc0-76c78c8bda54",
     "correct": false,
     "answer": "If `a` is greater than `b`"
    }
   ],
   "guidance": "There are two conditions that would cause `a <= b` to be true. One is if `a` is less than `b` and the other is `a` is equal to `b`. \n\nAs long as one of those conditions is true, then `a <= b` will be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundLessThan.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundLessThan.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2590570867",
  "source": {
   "name": "Evaluating to True",
   "showName": true,
   "instructions": "Select all of the statements below that are true.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "2bb86746-f9a5-13b4-478f-c4691e628d11",
     "correct": true,
     "answer": "19 >= 19"
    },
    {
     "_id": "71f1966f-0b30-4d20-0160-78689bdb06c4",
     "correct": false,
     "answer": "18.9 >= 19"
    },
    {
     "_id": "7b067fe8-177f-487f-c1a7-8fec20f51528",
     "correct": false,
     "answer": "-19 >= 19"
    },
    {
     "_id": "d851e12a-2a2f-dffa-2c6a-8054c374d40c",
     "correct": true,
     "answer": "19 >= 9"
    }
   ],
   "guidance": "The `>=` operator only returns `true` if the first number is greater than or equal to the second number. So the follow statements would evaluate to true:\n`19 >= 19` and `19 >= 9`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundLessThan.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundLessThan.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2191103233",
  "source": {
   "name": "Evaluating &&",
   "showName": true,
   "instructions": "Fill in the blanks for the following two statements.",
   "text": "For an `&&` statement to be true, all of the boolean expressions must be <<<true>>>.\n\nFor an `&&` statement to be false, only one of the boolean expressions needs to be <<<false>>>.",
   "guidance": "All of the boolean expressions must be true if an and statement is true.\n\nOnly one boolean expression needs to be false for an and statement to be false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundAnd.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundAnd.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "true",
     "false"
    ],
    "text": [
     "For an `&&` statement to be true, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `&&` statement to be false, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3858330751",
  "source": {
   "name": "Evaluating ||",
   "showName": true,
   "instructions": "Fill in the blanks for the following two statements.",
   "text": "For an `||` statement to be false, all of the boolean expressions must be <<<false>>>.\n\nFor an `||` statement to be true, only one of the boolean expressions needs to be <<<true>>>.",
   "guidance": "The `or` operator requires that all boolean expressions be false for the whole thing to be false.\n\nHowever, only one boolean expressions needs to be true for an `or` operator to be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundOr.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundOr.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "false",
     "true"
    ],
    "text": [
     "For an `||` statement to be false, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `||` statement to be true, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3532271981",
  "source": {
   "name": "Many ways to tie a not",
   "showName": true,
   "instructions": "Evaluate the two expressions below.\n\n",
   "text": "`5 != 4` returns <<<true>>>\n`! 5 == 4` returns <<<true>>>",
   "guidance": "Both values evaluate to `true`. In the second case, 5==4 first evaluates to `false` and then `! false` evaluates to `true`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "true",
     "true"
    ],
    "text": [
     "`5 != 4` returns ",
     0,
     "\n`! 5 == 4` returns ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1476766980",
  "source": {
   "name": "Short Circuiting",
   "showName": true,
   "instructions": "Use the dropdown menus to complete the text below.",
   "text": "## Or Operator\nWhen using the `||` operator, Java checks to see if the first boolean expression is <<<true>>>. If it is <<<true>>>, Java returns <<<true>>> and ignores the second boolean expression.\n\n## And Operator\nWhen using the `&&` operator, Java checks to see if the first boolean expression is <<<false>>>. If it is <<<false>>>, Java returns <<<false>>> and ignores the second boolean expression.",
   "guidance": "If the first boolean expression for the `||` operator is true, then the entire thing is true. The second boolean expression is ignored.\n\nIf the first boolean expression for the `&&` operator is false, then the entire thing is false. The second boolean expression is ignored.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundShortCircuiting.java",
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundShortCircuiting.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "true",
     "true",
     "true",
     "false",
     "false",
     "false"
    ],
    "text": [
     "## Or Operator\nWhen using the `||` operator, Java checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Java returns ",
     0,
     " and ignores the second boolean expression.\n\n## And Operator\nWhen using the `&&` operator, Java checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Java returns ",
     0,
     " and ignores the second boolean expression."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4056916696",
  "source": {
   "name": "Evaluating Expressions",
   "showName": true,
   "instructions": "Using your knowledge of boolean operators, choose the best answer about evaluating the below:\n\n`( 5 != 4 ) && ( 3 > 0 ) && ( ! 2 == 3 ) || #unknown condition#`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a8e887c3-38a8-8ba3-d3ee-3a9fd77ab135",
     "correct": false,
     "answer": "The answer if `false` - Java short circuits because you have a `false` condition with an `&&` operator"
    },
    {
     "_id": "079b5b97-52d0-deb8-74a9-445f0a776a03",
     "correct": true,
     "answer": "The answer if `true` - Java short circuits because you have a `true` condition with an `||` operator"
    },
    {
     "_id": "90c1995a-3fa5-654c-2a47-88fa9f8958bf",
     "correct": false,
     "answer": "There is not enough information - we would need to know the \"unknown condition\""
    }
   ],
   "guidance": "Because the first three conditions evaluate as true, when combined with `&&` evaluates as true. When you reach the `||` operator you then have `true || #unknown condition#`. Java short circuits and evaluates the entire line as `true` without ever evaluating the #unknown condition#.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4124457133",
  "source": {
   "name": "Boolean Operators",
   "showName": true,
   "instructions": "Determine if the code below returns true or false.\n\n`(7 >= 7) && (true || 99 < 1) || ! (3 > 5 && 7 < 10) && 2 != 4`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "03e1b0ec-1cd4-5c0e-53e1-789ae07832a6",
     "correct": true,
     "answer": "true"
    },
    {
     "_id": "be9205d9-0f7f-d5c5-6ea9-1a4ade3a4d99",
     "correct": false,
     "answer": "false"
    }
   ],
   "guidance": "First, start by evaluating the expressions in the parentheses.\n\n`( 7 >= 7)` returns true.\n`(true || 99 < 1)` returns true\n`! (3 > 5 && 7 < 10)` returns true\n`2 != 4` returns true\nSo the boolean expression is now `true && true || true && true`, which returns true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4285137417",
  "source": {
   "name": "Identify the arithmetic operators",
   "showName": true,
   "instructions": "",
   "text": "<<<*>>> is the operator for multiplication\n<<<%>>> is the operator for modulo\n<<</>>> is the operator for division\nThe <<</>>> operator might return a result different from a calculator if both numbers are `int`s",
   "guidance": "\\* is the operator for multiplication\n% is the operator for modulo\n/ is the operator for division\nThe / operator might return a result different from a calculator if both numbers are `int`s",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/LabArithmetic.java",
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabArithmetic.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "*",
     "%",
     "/",
     "/"
    ],
    "text": [
     0,
     " is the operator for multiplication\n",
     0,
     " is the operator for modulo\n",
     0,
     " is the operator for division\nThe ",
     0,
     " operator might return a result different from a calculator if both numbers are `int`s"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1823701392",
  "source": {
   "name": "String operators",
   "showName": true,
   "instructions": "Which of the following operators *can* be used with strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "ebe1275b-9c27-0629-379a-3a195038672e",
     "correct": false,
     "answer": "`/`"
    },
    {
     "_id": "571f7ac6-9f11-492f-6988-fd2f4d585b90",
     "correct": false,
     "answer": "`*`"
    },
    {
     "_id": "ecf1554a-0dd1-a4ba-12ff-243e013bb21e",
     "correct": false,
     "answer": "`-`"
    },
    {
     "_id": "daa326f6-a645-58b8-dc55-202b6775ec0f",
     "correct": true,
     "answer": "`+`"
    }
   ],
   "guidance": "Only the `+` operator can be used with Strings. It serves as the concatenation operator - merging two strings together.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1182062674",
  "source": {
   "name": "Order of Operations",
   "showName": true,
   "instructions": "Drag the blocks into the correct order of operations.\n\n**Hint:** You will not need all the blocks - and make sure to explicitly list when modulo is done!",
   "initial": "Parentheses\nExponents\nMultiplication and Division and Modulo\nAddition and Subtraction\nParentheses and Exponents #distractor\nMultiplication and Division #distractor\nModulo #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "Order of operations starts with any expression in parentheses. Next, any exponents are calculated. Then multiplication and division (including modulo) are done moving from left to right. Finally, addition and subtraction are done moving from left to right.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3834665657",
  "source": {
   "name": "Evaluating Mixed Operator Expressions",
   "showName": true,
   "instructions": "What is the results of the following expression?\n\n```\n! (5 != 3) && (5 % 3 >= 2)\n```\n\n",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "885eb97e-a6b7-bca5-9703-58253153d292",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "f85db587-ae19-8e0f-4e9d-7ac458c88ea0",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "Starting with parentheses, `5 != 3` is `true`. So `! true` would be `false`. \n\nUsing the short circuit principal, we can stop evaluating the problem because when we use the `&&` operator, both boolean expressions must be `true` for it to return `true`. Since we have `false` for the first expression, it cannot be `true`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3510090921",
  "source": {
   "name": "Compilation Error",
   "showName": true,
   "instructions": "When you have the compilation error fixed, submit by clicking the button below.",
   "command": "bash .guides/secure/compiles.sh code/operators/Exercise1.java",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The compilation bug is located on the following line:\n```\nboolean b = 9;\n```\n\nThe bug is that `b` is declared as a `boolean` but is being assigned `9` which is an `int`. To correct this, you would replace `boolean` with `int` which results in:\n```\nint b = 9;\n```\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3481226015",
  "source": {
   "name": "Run-time Error",
   "showName": true,
   "instructions": "Once you have fixed the run-time error, submit your code using the button below.",
   "command": "bash .guides/secure/operators/exercise1.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The following will solve the code:\n```\nint a = 4;\nint b = 9;\n```\n\nBut there are other valid solutions! Can you find another one?",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4227872246",
  "source": {
   "name": "Exercise 2",
   "showName": true,
   "instructions": "Use the button below to submit your code.",
   "command": "bash .guides/secure/operators/exercise2.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Here are a few ways to accomplish this task:\n\n```\nSystem.out.println( 5 == 4 );\nSystem.out.println( ! 5 < 8 && 6 >= 2 );\nSystem.out.println( 5 > 8 || 6 < 2 );\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise2.java",
     "code/operators/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4024654471",
  "source": {
   "name": "String concatenation",
   "showName": true,
   "instructions": "When your code is ready, submit it using the button below.",
   "command": "bash .guides/secure/operators/exercise3.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The variables names can be anything you want. One needs to contain the string `Hello` and the other `world`. Don’t forget that there needs to be a space separating the two words. To print both variables at once, use the `+` operator to concatenate the strings.\n```\nString var_1 = \"Hello \";\nString var_2 = \"world\";\nSystem.out.println(var_1 + var_2);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4157427635",
  "source": {
   "name": "Division",
   "showName": true,
   "instructions": "When you are ready to submit your code, press the button below.",
   "command": "bash .guides/secure/operators/exercise4.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You can either declare one or both of the variables as double:\n\n```\ndouble seven = 7.0;\ndouble two = 2.0;\nSystem.out.println(seven/two);\n```\n\nOr you can type cast one or both of the variables:\n```\nint seven = 7;\nint two = 2;\nSystem.out.println( (double) seven / (double) two);\n```\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2976548927",
  "source": {
   "name": "Casting and Parsing",
   "showName": true,
   "instructions": "Which of the following throws an error?\n\nAssume the following:\n```java\nint number = 5;\ndouble decimal = 6.2;\nboolean TF = true;\nString words = \"text\";\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "3475e980-f49b-2cb6-50a4-0674ef31a148",
     "correct": false,
     "answer": "```java\nSystem.out.println(words + String.valueOf(number+decimal));\n```"
    },
    {
     "_id": "21d677b3-0059-a906-2b72-f86955febd94",
     "correct": false,
     "answer": "```java\nSystem.out.println(String.valueOf(TF) + words);\n```"
    },
    {
     "_id": "f105b229-9ea1-8aca-d6f0-94c2750fb7e1",
     "correct": true,
     "answer": "```java\nwords = \"3.7\";\nSystem.out.println(Integer.parseInt(words) + number);\n```"
    },
    {
     "_id": "670739aa-775e-2d81-c9bb-8b7e1044d967",
     "correct": false,
     "answer": "```java\nwords = \"3.7\";\nSystem.out.println(Double.parseDouble(words) + decimal);\n```"
    },
    {
     "_id": "bf8b9c32-b228-62a3-bcca-7af5f8f255c0",
     "correct": false,
     "answer": "```java\nSystem.out.println(Boolean.parseBoolean(words));\n```"
    }
   ],
   "guidance": "```java\nwords = \"3.7\";\nSystem.out.println(Integer.parseInt(words) + number);\n```\nis invalid because `3.7` cannot be parsed into an int. The string must have an integer value. You can see in the other parse examples (`parseBoolean` and `parseDouble`) that words has to be re-assigned to a compatible String.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundCasting.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundCasting.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3275115534",
  "source": {
   "name": "Operators",
   "showName": true,
   "instructions": "When your code is ready, press the submit button below.",
   "command": "bash .guides/secure/operators/labChallenge.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3620880377",
  "source": {
   "name": "Concatenating Calculations",
   "showName": true,
   "instructions": "Once you have fixed the code, submit by pressing the button below.",
   "command": "java -cp code/operators/ Exercise5",
   "preExecuteCommand": "javac code/operators/Exercise5.java",
   "guidance": "Your friend is attempting to add Strings - but the `+` operate concatenates them! To solve this, you need to use `Integer.parseInt()` to transform the user input to `int`s. One example of a solution is:\n```\nint sum = Integer.parseInt(firstNum) + Integer.parseInt(secondNum);\nSystem.out.println(firstNum + \" + \" + secondNum + \" = \" + String.valueOf(sum));\n```\nYou might have noticed you do not need the `String.valueOf` since Java auto-converts some types - but being explicit is helpful to the readers of your code!",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "5\n4\n",
     "output": "9\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "1\n7\n",
     "output": "8\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "3\n4\n",
     "output": "7\n",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise5.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4036047307",
  "source": {
   "name": "If Statement Syntax",
   "showName": true,
   "instructions": "Rearrange the code blocks below to create an if statement. The resulting code should *always* print something. \n\nNot all of the code blocks will be used. Hint: do not forget about indenting.",
   "initial": "if( 7 != 4 ) {\n    System.out.println(\"Only print this if true\");\n}\nSystem.out.println(\"Always print me!\");\nif 7 != 4 { #distractor\nif( 7 != 4 ) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "```\nif( 7 != 4 ) {\n    System.out.println(\"Only print this if true\");\n}\nSystem.out.println(\"Always print me!\");\n```\nThe three main pieces of an if statement are:\n1) The keyword `if`\n2) A boolean expression in `()`\n3) Statements in `{}` the run only if `true`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundIfSyntax.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundIfSyntax.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-952800372",
  "source": {
   "name": "Test Coverage",
   "showName": true,
   "instructions": "Which of the following code segments does *not* account for all possible values?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "87da37bf-08f2-42a5-55ea-ed97ffe29212",
     "correct": false,
     "answer": "```\nif( probability < .01 ) {\nSystem.out.println(\"That's improbable!\"); }\nif( probability < .05 && probability >= .01) {\nSystem.out.println(\"That's unlikely!\"); }\nif( probability >= .05 ) {\nSystem.out.println(\"I am not confident it wasn't chance.\"); }\n```"
    },
    {
     "_id": "ac9dd922-efd9-b640-2772-c51062233082",
     "correct": true,
     "answer": "```\nif( age < 18 ) {\nSystem.out.println(\"No voting, try again next year.\"); }\nif( age > 18 ) {\nSystem.out.println(\"You can vote!\"); }\n```"
    },
    {
     "_id": "d407bb93-9486-fc6b-af2a-f52e80348e27",
     "correct": false,
     "answer": "```\nif( chartPosition <=10 ) {\nSystem.out.println(\"You made it into the top 10 songs!\"); }\nif( chartPosition > 10 ) {\nSystem.out.println(\"Better luck next week.\"); }\n```"
    }
   ],
   "guidance": "The case where age is 18 is not covered by this set of if statements.\n```\nif( age < 18 ) {\nSystem.out.println(\"No voting, try again next year.\"); }\nif( age > 18 ) {\nSystem.out.println(\"You can vote!\"); }\n```\nTo correct it, you would need to change the third line of code to:\n```\nif( age >= 18 ) {\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundIf.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundIf.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2128281602",
  "source": {
   "name": "If Statement",
   "showName": true,
   "instructions": "What does an if statement *not* do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "82f3ef50-cd00-df93-f733-a39c92698ea0",
     "correct": false,
     "answer": "Allows specific code to run only when the boolean expression is true."
    },
    {
     "_id": "59c6cf83-b039-7035-288d-6d4cff82bb34",
     "correct": true,
     "answer": "If the boolean expression is false, the program never reaches the if statement."
    },
    {
     "_id": "e2a9a46d-7ca7-685f-62ce-05ad5845edae",
     "correct": false,
     "answer": "Allows your program to make decisions about what to do."
    },
    {
     "_id": "e5a437cc-4726-0765-861b-3cc7805e849e",
     "correct": false,
     "answer": "Checks to see if a certain condition is true."
    }
   ],
   "guidance": "The program will only know the boolean expression is false after reaching the if statement. The first line with the `if` keyword is always checked, it is the code in the `{}` which will not be run if the boolean expression is false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2774974450",
  "source": {
   "name": "Even numbers",
   "showName": true,
   "instructions": "Complete the if statements below so that it will determine if the variable `num` is even or odd.",
   "text": "`if<<<(>>>num%2==0<<<)>>> <<<{>>>`\n`    System.out.println(\"Even\");`\n`<<<}>>>`\n`if<<<(>>>num%2==1<<<)>>> <<<{>>>`\n`    System.out.println(\"Odd\");`\n`<<<}>>>`",
   "guidance": "```\nif(num%2==0) {\n    System.out.println(\"Even\");\n}\nif(num%2==1) {\n    System.out.println(\"Odd\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "(",
     ")",
     "{",
     "}",
     "(",
     ")",
     "{",
     "}"
    ],
    "text": [
     "`if",
     0,
     "num%2==0",
     0,
     " ",
     0,
     "`\n`    System.out.println(\"Even\");`\n`",
     0,
     "`\n`if",
     0,
     "num%2==1",
     0,
     " ",
     0,
     "`\n`    System.out.println(\"Odd\");`\n`",
     0,
     "`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-88978139",
  "source": {
   "name": "If Else Syntax",
   "showName": true,
   "instructions": "Which of the following are true about using an if-else? \n\n*Hint:* There is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "cd52c537-1fcf-1212-7a1a-7986c3965d9f",
     "correct": false,
     "answer": "Indentation effects how the code runs"
    },
    {
     "_id": "973c96f5-bcd6-cb79-fe3b-bd84b945b50d",
     "correct": true,
     "answer": "You should use curly braces `{}` after both the `if` condition and the `else` keyword to group code that is conditionally executed"
    },
    {
     "_id": "dac65968-086b-e561-367d-a13da0472f27",
     "correct": true,
     "answer": "The `else` condition does not have another boolean expression"
    },
    {
     "_id": "d3c023ca-81b6-f26d-391a-107d268a91b7",
     "correct": false,
     "answer": "There should be empty parentheses `()` after the `else` keyword"
    }
   ],
   "guidance": "Java uses curly braces to group code commands. While indention is helpful, it does not effect how the program runs. Instead, you need to use curly braces to tell Java what code runs in both the true condition (after the `if`) and the false condition (after the `else`).\n\nAdditionally, because `else` refers to the `if`, it does not need its own boolean expression. Nor does it need parentheses.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundIfElseSyntax.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundIfElseSyntax.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3652686275",
  "source": {
   "name": "Evens and Odd with If Else",
   "showName": true,
   "instructions": "Construct code that determines whether `num` is even or odd.",
   "initial": "if ( num % 2 == 0 ) {\n    System.out.println(\"Even\");\n} else {\n    System.out.println(\"Odd\");\n}",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "```\nif ( num % 2 == 0 ) {\n    System.out.println(\"Even\");\n} else {\n    System.out.println(\"Odd\");\n}\n```\nIf the remainder of `num`/2 is `0` then it is even. We can find the remainder using `%` the modulo operator.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundIf.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundIf.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-34021480",
  "source": {
   "name": "Debugging If Else",
   "showName": true,
   "instructions": "What is wrong with the code below? \n\n**Hint:** There is more than one right answer.\n\n```\nif 3 > 4 {\n   System.out.println(\"true\");\nelse\n   System.out.println(\"false\");\n}\n```",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "d92ac4eb-b394-4441-353c-8b18abfcf326",
     "correct": true,
     "answer": "A closing curly brace is missing before the `else` keyword"
    },
    {
     "_id": "308a0669-c6a0-f2d1-6696-a850ade75d05",
     "correct": false,
     "answer": "Parentheses are missing after the `else` keyword"
    },
    {
     "_id": "23f4bb9c-338f-1c08-a688-d310ece95e1e",
     "correct": true,
     "answer": "An open curly brace is missing after the `else` keyword "
    },
    {
     "_id": "8c22423b-7d44-47f8-51dd-18db8a5023cd",
     "correct": true,
     "answer": "Parentheses are missing around the boolean expression after the `if` keyword"
    }
   ],
   "guidance": "The corrected code looks like:\n```\nif (3 > 4) {\n   System.out.println(\"true\");\n}\nelse {\n   System.out.println(\"false\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1569129353",
  "source": {
   "name": "Compound Conditionals",
   "showName": true,
   "instructions": "Why would you want to use a compound conditional? \n\n**Hint:** There is more than one right answer",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "f059fcbf-03a8-521a-8772-1af7cca8e8f5",
     "correct": true,
     "answer": "If two or more thing have to be true."
    },
    {
     "_id": "bc74126b-ccbc-5abb-76f6-b88041e4f65c",
     "correct": false,
     "answer": "When you want your code to be faster."
    },
    {
     "_id": "248f40fc-a57c-59ad-9096-936275f40aac",
     "correct": false,
     "answer": "You will get an error message if you don't use a compound conditional."
    },
    {
     "_id": "b15a294d-d8a0-d167-704f-9cf7136f2ec3",
     "correct": true,
     "answer": "When you want your code to be more concise and easy to read."
    }
   ],
   "guidance": "Compound conditionals allow you to test two or more things to be true, and they make your code more concise and easy to read.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundCompoundConditionals.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundCompoundConditionals.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3392232950",
  "source": {
   "name": "Nested If Else",
   "showName": true,
   "instructions": "Construct code that will print out messages based on the weather:\n * \"Bring an umbrella!\" if it is rainy but *not* windy\n * \"Wear a rain jacket.\" if it is rainy and windy\n * \"You might need a coat.\" if it is cold but *not* rainy\n * \"Enjoy your day!\" if it is *not* cold and *not* rainy\n\nAssume the following boolean variables have already been declared and initialized: `rainy`, `windy`, `cold`",
   "initial": "if( rainy ) {\n    if( windy ) {\n        System.out.print(\"Wear a rain jacket.\"); }\n    else {\n        System.out.print(\"Bring an umbrella!\"); }\n} else {\n    if( cold ) {\n        System.out.print(\"You might need a coat.\"); }\n    else {\n        System.out.print(\"Enjoy your day!\"); }\n}\n    ",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "1",
   "guidance": "```\nif( rainy ) {\n    if( windy ) {\n        System.out.print(\"Wear a rain jacket.\"); }\n    else {\n        System.out.print(\"Bring an umbrella!\"); }\n} else {\n    if( cold ) {\n        System.out.print(\"You might need a coat.\"); }\n    else {\n        System.out.print(\"Enjoy your day!\"); }\n}\n```\n\nBy nesting if-else statements, you can create 4 unique cases: rainy and windy, rainy but not windy, not rainy and cold, and not rainy or cold.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3356521837",
  "source": {
   "name": "Switch Case Syntax",
   "showName": true,
   "instructions": "Which of the following code snippets has the **correct** switch case syntax?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "218a1bbd-83c5-7ec0-9ce4-7e83957f1383",
     "correct": false,
     "answer": "```\nString num = \"two\";\nint number;\nswitch (num) {\n    case \"one\" : number = 1;\n    case \"two\" : number = 2;\n    case \"three\" : number = 3;\n    default: number = -1;\n}\n```"
    },
    {
     "_id": "a4a8ac81-2148-3861-2d6f-d14c18276a0d",
     "correct": true,
     "answer": "```\nString num = \"two\";\nint number;\nswitch (num) {\n    case \"one\" : number = 1; break;\n    case \"two\" : number = 2; break;\n    case \"three\" : number = 3; break;\n    default: number = -1;\n}\n```"
    },
    {
     "_id": "1174c2b0-87c3-1d3e-92d6-f13be004c695",
     "correct": false,
     "answer": "```\nString num = \"two\";\nint number;\nswitch num:\n    case \"one\" : number = 1; break;\n    case \"two\" : number = 2; break;\n    case \"three\" : number = 3; break;\n    default: number = -1;\n```"
    },
    {
     "_id": "4c030e41-bf51-5873-da1f-169e8bf16497",
     "correct": false,
     "answer": "```\nString num = \"two\";\nint number;\nswitch num :\n    case \"one\" : number = 1;\n    case \"two\" : number = 2;\n    case \"three\" : number = 3;\n    default: number = -1;\n```"
    }
   ],
   "guidance": "`switch (num) { `\nThe `switch` keyword is followed by the variable in parentheses. \nThe case statements are surrounded by curly braces.\n\n`case \"one\" : number = 1; break;`\nEach case keyword is followed by a value and `:`\nAfter the code that should run if the variable == value, a `break;` ends the switch case.\n\n`default: number = -1;`\nIt is best practice to have the final case be `default`. Since it is the final case, it does not need a `break;` statement.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundSwitchSyntax.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundSwitchSyntax.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2751211238",
  "source": {
   "name": "Switch Case or If Else?",
   "showName": true,
   "instructions": "Which of the following would be most appropriate for a `switch` statement?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "905ff6cf-c38b-2113-f728-6ec8d5e1e916",
     "correct": true,
     "answer": "Providing different types information about a caller's bank account (or re-directing the call) based on the number they pressed on their keypad"
    },
    {
     "_id": "97135b54-8949-1e9c-52c4-9e62d6f3b7a1",
     "correct": false,
     "answer": "Generating the overall and category (male under 20, male over 50, female under 20, female over 50, etc) winners of a 5k race"
    },
    {
     "_id": "4e254ba9-60b9-8ea4-25ce-76a64aea539e",
     "correct": false,
     "answer": "Using a car's mileage and service history to list what work needs to be done"
    }
   ],
   "guidance": "Generating race winners requires comparing unknown times and for categories you will need a compound conditional -- so you need `if else`.\n\nSimilarly, a car's milage is going to fall into a range. Additionally, you will need to check against variables to see if the service has been done -- so you need `if else`.\n\nA `switch` would work well in the phone example since the user can only press 10 discrete buttons with constant values.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundSwitch.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundSwitch.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1569349997",
  "source": {
   "name": "Only 4 pennies",
   "showName": true,
   "instructions": "You are programming a children's game where the most \"money\" they can hold is 4 pennies. Which of the following is the most elegant way to print out a full list of store items the player can afford based on the number of `pennies` they have?\n\nWhile **elegant code** has no firm definition, assume for now it means \"uses cleverness to accomplish something in much less code, but in a way that's readable\". It is also assumed that the code works as intended (which some of the below do not).",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "559ca87f-9d7f-7354-fc1f-e25bfa0e5194",
     "correct": false,
     "answer": "```\nswitch(pennies) {\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n            System.out.println(\"Marble (1 penny)\"); break;    \n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n            System.out.println(\"Pet rock (2 pennies)\");\n            System.out.println(\"Marble (1 penny)\"); break; \n    case 4: System.out.println(\"Goldfish (4 pennies)\");\n            System.out.println(\"Jump rope (3 pennies)\");\n            System.out.println(\"Pet rock (2 pennies)\");\n            System.out.println(\"Marble (1 penny)\"); break; \n   default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    },
    {
     "_id": "9a1836f3-7817-7599-8468-c7d55f6baceb",
     "correct": false,
     "answer": "```\nswitch(pennies) {\n    case 1: System.out.println(\"Marble (1 penny)\");\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n    case 4: System.out.println(\"Goldfish (4 pennies)\"); break; \n   default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    },
    {
     "_id": "216898d2-dd31-1823-d0ba-1548b8b8c2ed",
     "correct": true,
     "answer": "```\nswitch(pennies) {\n    case 4: System.out.println(\"Goldfish (4 pennies)\");\n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    },
    {
     "_id": "d3a192ff-8218-9b60-0a2e-e864523d2d26",
     "correct": false,
     "answer": "```\nswitch(pennies) {\n    case 4: System.out.println(\"Goldfish (4 pennies)\"); break;\n    case 3: System.out.println(\"Jump rope (3 pennies)\"); break;\n    case 2: System.out.println(\"Pet rock (2 pennies)\"); break;\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    }
   ],
   "guidance": "By listing the items from most expensive to least expensive, we can assume that every item after the true case is also affordable.\n\n```\nswitch(pennies) {\n    case 4: System.out.println(\"Goldfish (4 pennies)\");\n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    default: System.out.println(\"It looks like you need some pennies!\");\n}\n```\n\nAdditionally, by removing the `break` statements between cases, Java continues down until the end of case 1. \n\nExploiting these two facts results in only having to state each item once.\n\nThe one break statement after case 1 is so that the out of money message should really only show if they do not have any pennies.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3628618227",
  "source": {
   "name": "Switch key words",
   "showName": true,
   "instructions": "Select the correct key word to make the code below a valid switch statement.",
   "text": "```\n<<<switch>>> (years) {\n    <<<case>>> 5: System.out.println(\"5 year award\"); <<<break>>>;\n    <<<case>>> 10: System.out.println(\"10 year award\"); <<<break>>>;\n    <<<case>>> 20: System.out.println(\"20 year award\"); <<<break>>>;\n    <<<case>>> 30: System.out.println(\"30 year award\"); <<<break>>>;\n    default: System.out.println(\"You are not eligible for a longevity award this year\");\n}\n```",
   "guidance": "```\nswitch (years) {\n    case 5: System.out.println(\"5 years of employment award\"); break;\n    case 10: System.out.println(\"10 years of employment award\"); break;\n    case 20: System.out.println(\"20 years of employment award\"); break;\n    case 30: System.out.println(\"30 years of employment award\"); break;\n    default: System.out.println(\"You are not eligible for a longevity award this year\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "switch",
     "case",
     "break",
     "case",
     "break",
     "case",
     "break",
     "case",
     "break"
    ],
    "text": [
     "```\n",
     0,
     " (years) {\n    ",
     0,
     " 5: System.out.println(\"5 year award\"); ",
     0,
     ";\n    ",
     0,
     " 10: System.out.println(\"10 year award\"); ",
     0,
     ";\n    ",
     0,
     " 20: System.out.println(\"20 year award\"); ",
     0,
     ";\n    ",
     0,
     " 30: System.out.println(\"30 year award\"); ",
     0,
     ";\n    default: System.out.println(\"You are not eligible for a longevity award this year\");\n}\n```"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-330785356",
  "source": {
   "name": "Using Switch",
   "showName": true,
   "instructions": "Complete the paragraph below using the drop downs.",
   "text": "A switch statement uses a variable to make decisions. It checks if the variable is <<<equal>>> to the value listed after the key word <<<case>>>. After the `:` is code that runs if that case is true. The code ends with a <<<break>>> statement. The default case should be <<<last>>>.",
   "guidance": "A switch statement uses a variable to make decisions. It checks if the variable is equal to the value listed after the key word case. After the `:` is code that runs if that case is true. The code ends with a break statement. The default case should be last.\n\nIn code, this looks like:\n```\nint dayOfWeek = 3;\nswitch(dayOfWeek) {\n\n    case 1: System.out.print(\"Sunday\"); break;\n    case 2: System.out.print(\"Monday\"); break;\n    case 3: System.out.print(\"Tuesday\"); break;\n    case 4: System.out.print(\"Wednesday\"); break;\n    case 5: System.out.print(\"Thursday\"); break;\n    case 6: System.out.print(\"Friday\"); break;\n    case 7: System.out.print(\"Saturday\"); break;\n    default : System.out.print(\"Invalid\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/conditionals/Lab_Switch.java",
     "code/conditionals/Lab_IfElse.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_Switch.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "equal",
     "case",
     "break",
     "last"
    ],
    "text": [
     "A switch statement uses a variable to make decisions. It checks if the variable is ",
     0,
     " to the value listed after the key word ",
     0,
     ". After the `:` is code that runs if that case is true. The code ends with a ",
     0,
     " statement. The default case should be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1176951521",
  "source": {
   "name": "Month of the Year",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.",
   "command": "java -cp code/conditionals/ Lab_Challenge",
   "preExecuteCommand": "javac code/conditionals/Lab_Challenge.java",
   "guidance": "One way to complete this challenge is a switch statement:\n```\nString monthString;\n        switch (month) {\n            case 1:  monthString = \"January\"; break;\n            case 2:  monthString = \"February\"; break;\n            case 3:  monthString = \"March\"; break;\n            case 4:  monthString = \"April\"; break;\n            case 5:  monthString = \"May\"; break;\n            case 6:  monthString = \"June\"; break;\n            case 7:  monthString = \"July\"; break;\n            case 8:  monthString = \"August\"; break;\n            case 9:  monthString = \"September\"; break;\n            case 10: monthString = \"October\"; break;\n            case 11: monthString = \"November\"; break;\n            case 12: monthString = \"December\"; break;\n            default: monthString = \"Invalid month\"; break;\n        }\n        System.out.println(monthString);\n```\n\nYou could have also used either if or if-else statements too!",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1",
     "input": "",
     "output": "January",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "2",
     "input": "",
     "output": "February ",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "3",
     "input": "",
     "output": "March",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "4",
     "input": "",
     "output": "April",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5",
     "input": "",
     "output": "May",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "6",
     "input": "",
     "output": "June",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "7",
     "input": "",
     "output": "July",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "8",
     "input": "",
     "output": "August",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "9",
     "input": "",
     "output": "September",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "10",
     "input": "",
     "output": "October ",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "11",
     "input": "",
     "output": "November",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "12",
     "input": "",
     "output": "December",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Lab_Challenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_Challenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-80440528",
  "source": {
   "name": "Conditionals Exercise 1",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.",
   "command": "java -cp code/conditionals/ Exercise1",
   "preExecuteCommand": "javac code/conditionals/Exercise1.java",
   "guidance": "You can do this with a single if statement using a compound conditional.\n```\nif( (x >= 0 && x <=25) || (x >= 75 && x <=100) )\n    { System.out.println(String.valueOf(x) + \" is between 0 and 25 or 75 and 100\"); }\n```\nAlternatively, you could use other combinations such as two separate if statements.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "0",
     "input": "",
     "output": "0 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "25",
     "input": "",
     "output": "25 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "26",
     "input": "",
     "output": "",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "74",
     "input": "",
     "output": "",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "75",
     "input": "",
     "output": "75 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "100",
     "input": "",
     "output": "100 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "101",
     "input": "",
     "output": "",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-596935369",
  "source": {
   "name": "Conditionals Exercise 2",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.",
   "command": "java -cp code/conditionals/ Exercise2",
   "preExecuteCommand": "javac code/conditionals/Exercise2.java",
   "guidance": "A single if else can be used to solve this exercise. The real trick is remembering that modulo `%` is the correct operator to check for \"is divisible by\".\n\n```\nif ( x % 5 == 0 )\n    { System.out.println(String.valueOf(x) + \" is divisible by 5\"); }\nelse\n    { System.out.println(String.valueOf(x) + \" is not divisible by 5\"); }\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "0",
     "input": "",
     "output": "0 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5",
     "input": "",
     "output": "5 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "500",
     "input": "",
     "output": "500 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "2",
     "input": "",
     "output": "2 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "11",
     "input": "",
     "output": "11 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "13",
     "input": "",
     "output": "13 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise2.java",
     "code/conditionals/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2452434922",
  "source": {
   "name": "Conditionals Exercise 3",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.\n\n",
   "command": "java -cp code/conditionals/ Exercise3",
   "preExecuteCommand": "javac code/conditionals/Exercise3.java",
   "guidance": "You can use a single `if else` with compound conditionals to complete this challenge:\n```\nif ( x % 5 == 0 && x % 2 == 0)\n    { System.out.println(String.valueOf(x) + \" is divisible by 5 and even\"); }\nelse\n    { System.out.println(String.valueOf(x) + \" is not divisible by 5 or it is odd\"); }\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "50",
     "input": "",
     "output": "50 is divisible by 5 and even",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "110",
     "input": "",
     "output": "110 is divisible by 5 and even",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "3",
     "input": "",
     "output": "3 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5",
     "input": "",
     "output": "5 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "25",
     "input": "",
     "output": "25 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "6",
     "input": "",
     "output": "6 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1582349154",
  "source": {
   "name": "Conditionals Exercise 4",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.\n\n",
   "command": "java -cp code/conditionals/ Exercise4",
   "preExecuteCommand": "javac code/conditionals/Exercise4.java",
   "guidance": "There are a few ways to do this. One way is to use a `switch case`:\n```\nswitch (x) {\n    case \"yellow\": case \"red\": case \"blue\": System.out.println(x + \" is a primary color\"); break;\n    default: System.out.println(x + \" is not a primary color\"); break;\n}\n```\n\nOr you could use a compound conditional in an `if else`:\n```\nif( x.equals(\"yellow\") || x.equals(\"red\") || x.equals(\"blue\") )\n    {System.out.println(x + \" is a primary color\");}\nelse\n    {System.out.println(x + \" is not a primary color\");}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "red",
     "input": "",
     "output": "red is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "yellow",
     "input": "",
     "output": "yellow is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "blue",
     "input": "",
     "output": "blue is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "purple",
     "input": "",
     "output": "purple is not a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "orange",
     "input": "",
     "output": "orange is not a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "teal",
     "input": "",
     "output": "teal is not a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "brown",
     "input": "",
     "output": "brown is not a primary color",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise4.java",
     "code/conditionals/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-334334839",
  "source": {
   "name": "Conditionals Exercise 5",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.\n\n",
   "command": "java -cp code/conditionals/ Exercise5",
   "preExecuteCommand": "javac code/conditionals/Exercise5.java",
   "guidance": "You can either use a switch case or if else for this:\n\n```\nswitch (x) {\n    case \"a\": case \"e\": case \"i\": case \"o\": case \"u\": System.out.println(x + \" is a vowel\"); break;\n    default: System.out.println(x + \" is not a vowel\"); break;\n}\n```\n\n```\nif( x.equals(\"a\") || x.equals(\"e\") || x.equals(\"i\") || x.equals(\"o\") || x.equals(\"u\") )\n    {System.out.println(x + \" is a vowel\");}\nelse\n    {System.out.println(x + \" is not a vowel\");}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "a",
     "input": "",
     "output": "a is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "e",
     "input": "",
     "output": "e is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "i",
     "input": "",
     "output": "i is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "o",
     "input": "",
     "output": "o is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "u",
     "input": "",
     "output": "u is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "b",
     "input": "",
     "output": "b is not a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "x",
     "input": "",
     "output": "x is not a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "k",
     "input": "",
     "output": "k is not a vowel",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3742835214",
  "source": {
   "name": "Summation Using a For Loop",
   "showName": true,
   "instructions": "Construct a program using the code blocks below that incorporates a `for` loop to find the sum of all numbers between 1 and 100, and then prints that cumulative sum. The program should **include both 1 and 100** in the sum.\n\n**Hint:** You will not need to use all of the blocks and be sure to **indent** any command(s) that you want the system to repeat by dragging it slightly to the right. You only have **ONE ATTEMPT** at this problem!",
   "initial": "int sum = 0;\nfor (int i = 1; i <= 100; i++) {\n  sum += i;\n}\nSystem.out.println(sum);\nfor (int i = 0; i < 100; i++) {    #distractor\nfor (int i = 1; i < 100; i++) {    #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Since we want to include the numbers from `1` through `100` in our sum, which starts at `0`, the appropriate loop header to use will be `for (int i = 1; i <= 100; i++)`. Remember that `<` is not inclusive, but `<=` is. The loop iterator variable `i` is then added to the `sum` during each iteration. Finally, the `sum` is printed. Thus, the correct solution is:\n```java\nint sum = 0;\nfor (int i = 1; i <= 100; i++) {\n  sum += i;\n}\nSystem.out.println(sum);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/loops/TurtleLoopImages.java"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3472530842",
  "source": {
   "name": "For Loop Headers",
   "showName": true,
   "instructions": "Which of the following `for` loop headers will loop **exactly** 100 times? Ignore the value of the iterating variable and focus on the **number of times** the loop body will be executed.\n\n**Note:** There may be more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ede0aacf-cc9d-ccba-e514-27acf5cf621c",
     "correct": true,
     "answer": "for (int i = 0; i < 100; i++)"
    },
    {
     "_id": "a28b5a3e-79e4-83d6-fb27-c471fe30edb2",
     "correct": false,
     "answer": "for (int i = 0; i <= 100; i++)"
    },
    {
     "_id": "fcb9631f-067b-dbc0-e6ef-5b5fe8709297",
     "correct": false,
     "answer": "for (int i = 1; i < 100; i++)"
    },
    {
     "_id": "d87cfb2e-2de6-089d-3968-6157f10045cd",
     "correct": true,
     "answer": "for (int i = 1; i <= 100; i++)"
    }
   ],
   "guidance": "Only choices #1 and #4 are correct because they are both executed **exactly** 100 times. `for (int i = 0; i < 100; i++)` goes from 0 to 99 and `for (int i = 1; i <= 100; i++)` goes from 1 to 100. Both of those ranges include 100 iterations.\n\n`for (int i = 0; i <= 100; i++)` goes from 0 to 100 which is a total of 101 iterations.\n\n`for (int i = 1; i < 100; i++)` goes from 1 to 99 which is only 99 iterations.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-90216139",
  "source": {
   "name": "While Loop",
   "showName": true,
   "instructions": "Re-arrange the following lines of code so that the while loop will print \"Java\" 10 times.",
   "initial": "int i = 0;\nwhile( i < 10 ) {\nSystem.out.println(\"Java\");\ni++;\n}",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "1",
   "guidance": "The solution is:\n```java\nint i = 0;\nwhile( i < 10 ) {\n    System.out.println(\"Java\");\n    i++;\n}\n```\nNotice that the variable is declared **before** the while loop and is incremented **inside** the loop.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4115991507",
  "source": {
   "name": "While loop with break",
   "showName": true,
   "instructions": "Fill in the blanks such that the while loop will stop once `total` is greater than 100.",
   "text": "int <<<total>>> = 0;\nwhile ( <<<true>>> ) {\n    //increment total by some random number\n    if(<<<total>>> > 100)\n    { <<<break;>>> }\n}",
   "guidance": "The correct solution looks like: \n```\nint total = 0;\nwhile ( true ) {\n    //increment total by some random number\n    if(total > 100)\n    { break; }\n}\n```\n\nYou can make the same loop work without the if statement and break...\n```\nint total = 0;\nwhile (total < 100) {\n    //increment total by some random number\n}\n```\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "total",
     "true",
     "total",
     "break;"
    ],
    "text": [
     "int ",
     0,
     " = 0;\nwhile ( ",
     0,
     " ) {\n    //increment total by some random number\n    if(",
     0,
     " > 100)\n    { ",
     0,
     " }\n}"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-945377963",
  "source": {
   "name": "Cumulative Song with a Nested Loop",
   "showName": true,
   "instructions": "\"A cumulative song is a song with a simple verse structure modified by progressive addition so that each verse is longer than the verse before.\" - Wikipedia\n\nRearrange the code blocks below to create a cheat sheet for the cumulative song *The 12 Days of Christmas* where you start with 1, add 2, etc. **Remember to indent** where appropriate! You only have **ONE ATTEMPT** at this problem!\n\nThe output should look like:\n```\n1\n1 2 \n1 2 3 \n1 2 3 4 \n....\n1 2 3 4 5 6 7 8 9 10 11 12 \n```\n",
   "initial": "for (int line = 1; line <= 12; line++) {\n  for (int num = 1; num <= line; num++) {\n    System.out.print(num + \" \");\n  }\n  System.out.println(\"\");\n}",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\"}",
   "grader": "1",
   "guidance": "You may have noticed that the line number corresponds with how many digits are printed on each line. For example, **line #1** prints just the number **1** and **line #5** prints numbers **1 through 5**. This means that the outer loop iterator variable `line` should start at 1 and go through 12. The inner loop iterator variable `num` depends on the outer loop variable `line` which is why `num <= line` is included in the loop header. This means `num` will only go up to `line` but never over. Additionally, the output produced by the inner loop **do not** include a newline character, which enables the numbers to be printed side by side. Only the outer loop will include the newline character to help separate the lines from each other.\n\n**Solution:**\n```java\nfor (int line = 1; line <= 12; line++) {\n  for (int num = 1; num <= line; num++) {\n    System.out.print(num + \" \");\n  }\n  System.out.println(\"\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/loops/NestedLoops.java"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-700172618",
  "source": {
   "name": "Identifying Patterns with Nested Loops",
   "showName": true,
   "instructions": "Fill in the blanks such that the nested loop will print out:\n\n```\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n```",
   "text": "```java\nfor(int i = 0; i < <<<4>>>; i++) {\n    System.out.println(\"<<<&&>>>\");\n    for(int j = 0; j < <<<3>>>; j++) {\n        System.out.println(\"<<<*>>>\");\n    }\n}\n```",
   "guidance": "The tricky part is to identify the pattern. The first pattern is that `&& * * *` is repeated 4 times. The pattern within that is that you have a `&&` followed by 3 `*`. Once you are able to break this up - it is clear that the outer loop should repeat 4 times and the inner loop should repeat 3.\n\nThe next part is where to place the print statements. In this case, since the one-off `&&` is printed *before* the repeating `*` - the print statement in the outer loop needs to be placed *before* the inner loop.\n\n```\nfor(int i = 0; i < 4; i++) {\n    System.out.println(\"&&\");\n    for(int j = 0; j < 3; j++) {\n        System.out.println(\"*\");\n    }\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "4",
     "&&",
     "3",
     "*"
    ],
    "text": [
     "```java\nfor(int i = 0; i < ",
     0,
     "; i++) {\n    System.out.println(\"",
     0,
     "\");\n    for(int j = 0; j < ",
     0,
     "; j++) {\n        System.out.println(\"",
     0,
     "\");\n    }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-673183289",
  "source": {
   "name": "Variables - Strings",
   "showName": true,
   "instructions": "Select the correct line of code to declare and assign the `var` variable.",
   "initial": "String var = \"this is a string\";\nString var = 'this is a string'; #distractor\nstring var = \"this is a string\"; #distractor\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "`String var = \"this is a string\";`\nUnlike the other data types so far, `String` is uppercase. The string must be surrounded by double quotation marks `\"`.\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-13854979",
  "source": {
   "name": "Exercise 5",
   "showName": true,
   "instructions": "Use **two** print statements to write the following String:\n`Okay, it is time to learn about operators.`",
   "command": "bash .guides/secure/fundamentals/exercise5.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "It does not matter where you split up the string...but the first line needs to use `print` instead of `println`. You can also use `print` for both.\n\n```\nSystem.out.print(\"Okay, it is time to \");\nSystem.out.print(\"learn about operators.\");\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3084493133",
  "source": {
   "name": "For Loop Syntax",
   "showName": true,
   "instructions": "Select **all** of code snippets below that will print `Loops are awesome!` exactly **10** times.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "6af1ba2f-46dc-c111-0d5c-31088beee339",
     "correct": false,
     "answer": "```java\nfor (int i = 0; i < 9; i++) {\n  System.out.println(\"Loops are awesome!\");\n}\n```"
    },
    {
     "_id": "11e519c5-be7f-d9ca-38b7-856bae0189eb",
     "correct": true,
     "answer": "```java\nfor (int i = 0; i <= 9; i++) {\n  System.out.println(\"Loops are awesome!\");\n}\n```"
    },
    {
     "_id": "2aa111ef-2a8b-1e91-3bde-b3a111f714f7",
     "correct": true,
     "answer": "```java\nfor (int i = 0; i < 10; i++) {\n  System.out.println(\"Loops are awesome!\");\n}\n```"
    },
    {
     "_id": "797a7b0f-8222-52fc-1c0f-21ee21a84d67",
     "correct": false,
     "answer": "```java\nfor (int i = 0; i <= 10; i++) {\n  System.out.println(\"Loops are awesome!\");\n}\n```"
    }
   ],
   "guidance": "Since all of the loop iterators start at 0, you have to count 0 as the first iteration. You want a total of 10 iterations which is why only choices #2 and #3 are correct. Remember that the operator `<` does not include the end value but the `<=` operator does.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/loops/ForLoops.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/ForLoops.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-554878332",
  "source": {
   "name": "Conditional For Loop",
   "showName": true,
   "instructions": "Rearrange the code blocks below to create a program that outputs the following:\n```java\nEven Odd Even\nOdd Even Odd\nEven Odd Even\nOdd Even Odd\nEven Odd Even\n```\n**Remember to indent** where appropriate by dragging the code blocks slightly to the right! You will only have **ONE ATTEMPT** at this problem.",
   "initial": "for (int x = 0; x < 5; x++) {\n  if (x % 2 == 0) {\n    System.out.println(\"Even Odd Even\");\n  }\n  else {\n    System.out.println(\"Odd Even Odd\");\n  }\n}",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\"}",
   "grader": "1",
   "guidance": "In order to produce the provided output, the code blocks **with indentations** should look like:\n```java\nfor (int x = 0; x < 5; x++) {\n  if (x % 2 == 0) {\n    System.out.println(\"Even Odd Even\");\n  }\n  else {\n    System.out.println(\"Odd Even Odd\");\n  }\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/loops/LabForLoop.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/LabForLoop.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3684672137",
  "source": {
   "name": "Infinite While Loop",
   "showName": true,
   "instructions": "Which of the following code snippets will result in an **infinite** `while` loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "adfe5db3-e185-a3b3-8028-fa1b8260d3b1",
     "correct": false,
     "answer": "```java\nint lives = 0;\nwhile (lives > 10) {\n  System.out.println(\"You are still in the game.\");\n}\nSystem.out.println(\"Game over.\");\n```"
    },
    {
     "_id": "219e5ce5-e5d7-55f6-07ef-3899ded9b9b6",
     "correct": false,
     "answer": "```java\nint lives = 10;\nwhile (lives > 0) {\n  System.out.println(\"You are still in the game.\");\n  lives = lives - 1;\n}\nSystem.out.println(\"Game over.\");\n```"
    },
    {
     "_id": "0887e2c7-461c-79b5-03db-bec2abe25aa2",
     "correct": true,
     "answer": "```java\nint lives = 10;\nwhile (lives > 0) {\n  System.out.println(\"You are still in the game.\");\n  lives = lives + 1;\n}\nSystem.out.println(\"Game over.\");\n```"
    },
    {
     "_id": "a2e1d09e-ca46-a2f7-ce9b-2a0853430ca4",
     "correct": false,
     "answer": "```java\nint lives = 10;\nwhile (lives < 0) {\n  System.out.println(\"You are still in the game.\");\n  lives = lives + 1;\n}\nSystem.out.println(\"Game over.\");\n```"
    }
   ],
   "guidance": "Only choice #3 will result in an infinite `while` loop because `lives` will never reach `0` or less to terminate the loop. \n\nThe `while` loops in choices #1 and #4 are not executed because the boolean expression in the loop header never evaluates to true. \n\nThe `while` loop in choice #2 executes but is ended once `lives` reaches `0` due to `lives` being decremented after each iteration.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/loops/LabWhileLoop.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/LabWhileLoop.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1942677726",
  "source": {
   "name": "Infinite Loop Solution",
   "showName": true,
   "instructions": "The following program results in an infinite loop:\n```java\nString s;\nScanner sc = new Scanner(System.in);\n\nwhile (true) {\n  System.out.println(\"Enter a lowercase vowel.\");\n  s = sc.nextLine();\n  if (s.equals(\"a\") || \n  s.equals(\"e\") || \n  s.equals(\"i\") || \n  s.equals(\"o\") || \n  s.equals(\"u\")) {\n    System.out.println(\"You successfully entered a lowercase vowel.\");\n  }\n  else {\n    System.out.println(\"You did not enter a lowercase vowel.\");\n  }\n}\n\nsc.close();\n```\n\nSelect **all** of the solutions below that will enable the program to resolve this infinite loop.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "4ca9b8d3-85a3-c654-3f6d-9e6a266da414",
     "correct": true,
     "answer": "Insert a `break;` statement on the line after `System.out.println(\"You successfully entered a lowercase vowel.\");`."
    },
    {
     "_id": "407af2de-6864-5c81-f1cf-932144cb2a82",
     "correct": true,
     "answer": "Insert a `break;` statement on the line after `System.out.println(\"You did not enter a lowercase vowel.\");`."
    },
    {
     "_id": "2bd1e9e0-1a33-48b2-7124-c67acf93513e",
     "correct": false,
     "answer": "Replace `while (true)` with `for (true)`."
    },
    {
     "_id": "3aba40ee-46d3-382f-8529-83d5f5a842fd",
     "correct": false,
     "answer": "Remove `s = sc.nextLine();`"
    }
   ],
   "guidance": "By definition, an **infinite loop** occurs when a program has no test conditions to cause a loop to stop. The program above will indefinitely ask the user for input and store that input regardless of what the user enters.\n\nChoices #1 and #2 are correct because they will offer a condition for the loop to stop depending on what the user enters.\n\nChoice #3 will result in errors because the `for` loop syntax is incorrect. The program can still run, but the infinite loop is not resolved.\n\nChoice #4 will result in an error because the String `s` needs to be initialized.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/loops/LabBreak.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/LabBreak.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-2973701964",
  "source": {
   "name": "Nested For Loop Challenge",
   "showName": true,
   "instructions": "When your code is ready, click the button below to check your work. **Remember** to include **at least two `for` loops** and, **at most**, **two** `System.out.print()` or `System.out.println()` statements in your code in order to receive credit!",
   "command": "bash .guides/secure/loops/labChallenge.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The pattern can be identified as follow. There is one line of `XOXOXOXOX` following by two lines of `OXO`. Thus, we will need an outer `for` loop like `for (int x = 0; x < 1; x++)`. The outer loop will only run **once**. On the other hand, the inner loop needs to run **twice**, thus something like `for (int y = 0; y < 2; y++)` is needed. The outer loop should print `XOXOXOXOX` whereas the inner loop should print `OXO`. However, these two nested loops will only produce the output:\n```java\nXOXOXOXOX\nOXO\nOXO\n```\nTo iterate or repeat the pattern **three times**, we will have to modify the outer loop to run three times instead of once. Thus, all we have to do is change the outer loop header from `x < 1` to `x < 3`. Here is one possible solution:\n```java\nfor (int x = 0; x < 3; x++) {\n  System.out.println(\"XOXOXOXOX\");\n  for (int y = 0; y < 2; y++) {\n    System.out.println(\"OXO\");\n  }\n}\n```\nAlternatively, if you don't want to modify the existing nested loops, you can nest them inside another loop that runs **three times**. Here is another potential solution:\n```java\nfor (int z = 0; z < 3; z++) {\n  for (int x = 0; x < 1; x++) {\n    System.out.println(\"XOXOXOXOX\");\n    for (int y = 0; y < 2; y++) {\n      System.out.println(\"OXO\");\n    }\n  }\n}\n```\nNote that the outermost loop `for (int z = 0; z < 3; z++)` doesn't actually produce any output, it just runs three times, causing the identified pattern to print three times as well.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/loops/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-2204813483",
  "source": {
   "name": "Loops: Exercise 2",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "bash .guides/secure/loops/exercise2.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Here are some sample solutions:\n```java\nfor (int i = 0; i < 10; i++) {\n  System.out.println(x);\n}\n```\n```java\nint i = 0;\nwhile (i < 10) {\n  System.out.println(x);\n  i++;\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/loops/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-124790676",
  "source": {
   "name": "Loops: Exercise 3",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "java -cp code/loops/ Exercise3",
   "preExecuteCommand": "javac code/loops/Exercise3.java",
   "guidance": "You can use either the `for` or `while` loop to complete this assignment. If using a `for` loop, the iterating variable should start at `a` and get incremented by 1 until it reaches `b`. Below is a sample solution involving the `for` loop.\n```java\nint sum = 0;\n  \nfor (int iter = a; iter <= b; iter++) {\n  sum += iter;\n}\n  \nif (a == b) {\n  sum = a;\n}\n  \nSystem.out.println(sum);\n```\n\nAlternatively, you can use the `while` loop by setting the iterating variable to `a` and incrementing it by 1 after each time it gets added to the sum. Here is a solution that uses the `while` loop:\n```java\nint sum = 0;\nint iter = a;\n  \nwhile (iter <= b) {\n  sum += iter;\n  iter++;\n}\n  \nif (a == b) {\n  sum = a;\n}\n  \nSystem.out.println(sum);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "-7 -7",
     "input": "",
     "output": "-7",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "0 -12",
     "input": "",
     "output": "-78",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "0 12",
     "input": "",
     "output": "78",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "12 -12",
     "input": "",
     "output": "0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "0 100",
     "input": "",
     "output": "5050",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/loops/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-230614594",
  "source": {
   "name": "Loops: Exercise 4",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "bash .guides/secure/loops/exercise4.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The only places where you can add a `break;` statement to successfully print `Print me!` and solve the infinite loops are **1)** after `System.out.println(\"Print me!\");` and **2)** after the first closing curly brace `}` that was initially on line 7 in the original code. See solution below:\n```java\nfor (int i = 100; i <= 100; i--) {\n  while (true) {\n    System.out.println(\"Print me!\");\n    break;\n  }\n  break;\n}\n```\n\nBoth the `for` and `while` loops in the code cause the program to run indefinitely. The first `break;` statement in the solution will allow the program to exit the `while` loop and the second `break;` statement in the solution will allow the program to exit the `for` loop. In order for `Print me!` to be printed, the `break;` statement must go *after* the print statement.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/loops/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-2160672239",
  "source": {
   "name": "Loops: Exercise 5",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "bash .guides/secure/loops/exercise5.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The first step is to recognize the two patterns that exist. Notice how the numerical values are printed in ascending order starting at `1` and ending at `5`. Thus, you should implement a loop that starts and ends according to the line number (e.g. `for (int i = 1; i < 6; i++)`). In addition, each iteration should print the existing line number followed by a newline character (e.g. `System.out.println(i);`).\n\nSecond, the `.` start at 4 and then decreases by 1 after every iteration until it reaches zero. An example loop header could be `for (int j = <number of periods>; j > 0; j--)`.\n\nNow all that's left to do is to combine the two loops in a manner that associates **BOTH** loops. Notice how the line number can also represent how many `.` are replaced. So the second loop can be rewritten as `for (int j = 5 - i; j > 0; j--)`. Another important detail is to not include `ln` when printing `.` because it will cause the `.` to be on different lines (e.g. `System.out.print(\".\");`). Below is a sample solution using a nested `for` loop but any two combinations of `for` and `while` loops will work.\n```java\nfor (int i = 1; i < 6; i++) {\n  for (int j = 5 - i; j > 0; j--) {\n    System.out.print(\".\");\n  }\n  System.out.println(i);\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/loops/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3787725782",
  "source": {
   "name": "Recognizing For Loop Pattern",
   "showName": true,
   "instructions": "Given the following code snippet:\n```java\ntina.forward(100);\ntina.right(90);\ntina.forward(100);\ntina.right(90);\ntina.forward(100);\ntina.right(90);\ntina.forward(100);\ntina.right(90);\n```\nSelect **all** of the following that will produce the same output as the code above using a `for` loop?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "172c9559-8cef-bf19-3664-4038f3f31798",
     "correct": true,
     "answer": "```java\nfor (int i = 0; i < 4; i++) {\n  tina.forward(100);\n  tina.right(90);\n}\n```"
    },
    {
     "_id": "e4cb8a0a-2369-de7a-75bb-b6aa6931c3d5",
     "correct": false,
     "answer": "```java\nfor (int i = 1; i < 4; i++) {\n  tina.forward(100);\n  tina.right(90);\n}\n```"
    },
    {
     "_id": "5c90ef56-be3d-5230-7e7a-c145b3dcb4ee",
     "correct": true,
     "answer": "```java\nfor (int i = 1; i < 5; i++) {\n  tina.forward(100);\n  tina.right(90);\n}\n```"
    },
    {
     "_id": "10d487e8-1a95-5ddc-4819-6ba95f35bafc",
     "correct": true,
     "answer": "```java\nfor (int i = 20; i < 24; i++) {\n  tina.forward(100);\n  tina.right(90);\n}\n```"
    }
   ],
   "guidance": "All of the choices above are correct **except** choice #2. It's important to recognize that the `tina.forward(100);` and `tina.right(90);` commands occur exactly **four** times. Thus, a loop that iterates those commands four times is needed. While all of the choices have a loop header that runs four times, choice #2 has a header that only runs **three** times and is therefore incorrect.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/loops/TurtleLoops.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/TurtleLoops.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1183891837",
  "source": {
   "name": "For Loop Iterator Variable",
   "showName": true,
   "instructions": "Here is the output to a sample program:\n\n```java\n2\n4\n6\n8\n10\n```\nFill in the blanks below so that the loop outputs what's shown above.",
   "text": "```java\nfor (int n=<<<2>>>; n<<<<=>>>10; n+=<<<2>>>) {\n System.out.println(<<<n>>>);\n}\n```",
   "guidance": "First, it is important to determine the pattern of the output. `2` is printed first and `10` is printed last. In addition, the numbers from `2` through `10` are printed in increments of `2`s. Noticing this pattern enables us to fill out the loop header like so: \n`for (int n=2; n<=10; n+=2)`\n\nFinally, we need to print the output. Remember that the loop iterator variable `n` is an integer itself so it can be printed like so:\n`System.out.println(n);`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/loops/TurtleLoopImages.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/TurtleLoopImages.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "2",
     "<=",
     "2",
     "n"
    ],
    "text": [
     "```java\nfor (int n=",
     0,
     "; n",
     0,
     "10; n+=",
     0,
     ") {\n System.out.println(",
     0,
     ");\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-966946164",
  "source": {
   "name": "While vs. For Loops",
   "showName": true,
   "instructions": "Fill in the blanks below with either `while` or `for`.",
   "text": "A <<<while>>> loop usually contains a boolean expression(s) in its header and nothing else.\nA <<<for>>> loop contains a header that specifies where an iterator variable starts, where it ends, and how it is changed per iteration.\nA <<<for>>> loop is better if a command needs to be executed a certain number of times.\nA counting variable needs to be declared and initialized before a <<<while>>> loop can be executed properly.",
   "guidance": "One big difference between a `while` loop and a `for` loop is that a `while` loop only contains a boolean expression(s) within its header. That means a counting variable must be declared and initialized before a `while` loop can be used properly. On the other hand, the header of a `for` loop contains an iterator variable which helps to determine how many times the `for` loop will run.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/loops/WhileLoops.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/WhileLoops.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "while",
     "for",
     "for",
     "while"
    ],
    "text": [
     "A ",
     0,
     " loop usually contains a boolean expression(s) in its header and nothing else.\nA ",
     0,
     " loop contains a header that specifies where an iterator variable starts, where it ends, and how it is changed per iteration.\nA ",
     0,
     " loop is better if a command needs to be executed a certain number of times.\nA counting variable needs to be declared and initialized before a ",
     0,
     " loop can be executed properly."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-6741937",
  "source": {
   "name": "For Loop to While Loop",
   "showName": true,
   "instructions": "Here is a sample code that makes use of a `for` loop:\n```java\nfor (int i = 10; i <= 100; i+=10) {\n  System.out.println(i);\n}\n```\n\nRearrange the code blocks below to produce the same output as above using a `while` loop instead. **Remember to indent** any commands that are iterated! You only have **ONE ATTEMPT** at this problem!",
   "initial": "int i = 10;\nwhile (i <= 100) {\n  System.out.println(i);\n  i+=10;\n}",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\"}",
   "grader": "1",
   "guidance": "A `while` loop requires the following:\n1. An iterator or counting variable *before* the keyword `while`.\n2. A boolean expression in `()` or header *following* the keyword `while`.\n3. A change in the iterator or counting variable *inside* the body of the `while` loop.\n\nThus, the solution is:\n```java\nint i = 10;\nwhile (i <= 100) {\n  System.out.println(i);\n  i+=10;\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/loops/WhileLoopImages.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/WhileLoopImages.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-247291117",
  "source": {
   "name": "Break Statement Purpose",
   "showName": true,
   "instructions": "What purpose does the `break` statement serve?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "90eedc33-eb83-824e-7b87-b3c5acec3507",
     "correct": false,
     "answer": "The `break` statement is used to pause a program so that it can run at a later time."
    },
    {
     "_id": "96a19e66-6557-926c-dc04-75c24f42538d",
     "correct": false,
     "answer": "The `break` statement is required in every `while` loop to separate sections of code."
    },
    {
     "_id": "110c6812-dc09-caef-a9a1-9a0a4238698a",
     "correct": false,
     "answer": "The `break` statement is used to end a program."
    },
    {
     "_id": "05f3b4c2-9e93-8f66-b418-620e87595748",
     "correct": true,
     "answer": "The `break` statement is used to stop and exit a loop."
    }
   ],
   "guidance": "The `break` statement is used to stop and exit a loop **not** a program. `break` statements are often used to prevent situations where an infinite loop might be involved; however, `break` statements are not always required.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/loops/BreakStatement.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/BreakStatement.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2362887149",
  "source": {
   "name": "While Loop Syntax",
   "showName": true,
   "instructions": "Fill in the blanks below so that the `while` loop prints `Java` **10** times.",
   "text": "```java\nint <<<count>>> = 0;\nwhile (count <<<<>>> 10) {\n  System.out.println(\"Java\");\n  count = count <<<+>>> 1;\n}\n```",
   "guidance": "The counting variable that is being used in the code is called `count`. If `count` is initialized to `0`, then **ten iterations** will cause it to stop at `9`. Thus, `count < 10` is the correct loop header. `count = count + 1` does the same  thing as `count++` and will increment the counting variable by `1` after during each iterations.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "count",
     "<",
     "+"
    ],
    "text": [
     "```java\nint ",
     0,
     " = 0;\nwhile (count ",
     0,
     " 10) {\n  System.out.println(\"Java\");\n  count = count ",
     0,
     " 1;\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1301128057",
  "source": {
   "name": "Break Statement Syntax",
   "showName": true,
   "instructions": "Fill in the blanks such that the loop will **stop and exit** after it has run **100** times.",
   "text": "```java\nint total = 0;\nwhile (true) {\n  total = <<<total>>> + 1;\n  if (total > <<<99>>>) {\n    <<<break>>>;\n  }\n}\n```",
   "guidance": "`total` is the counting variable that is used in the code above. To increment `total` so that it iterates **100 times**, `total = total + 1` is needed. Since `total` starts at `0` and we want it to iterate 100 times before stopping, we will insert a `break` statement to stop the loop once `total > 99` becomes true. The range from `0` through `99` is a total of exactly 100 iterations.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "total",
     "99",
     "break"
    ],
    "text": [
     "```java\nint total = 0;\nwhile (true) {\n  total = ",
     0,
     " + 1;\n  if (total > ",
     0,
     ") {\n    ",
     0,
     ";\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1201450033",
  "source": {
   "name": "Nested Loops",
   "showName": true,
   "instructions": "Which definition best describes a nested loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "eef02f6d-3654-70b1-4d1c-255a340a26fd",
     "correct": false,
     "answer": "A nested loop is when you have two loops that run one after the other."
    },
    {
     "_id": "6eb6a882-af54-a91b-abfa-6547e7e1cedf",
     "correct": false,
     "answer": "A nested loop is when you have a `while` loop and a `for` loop in the same program."
    },
    {
     "_id": "ad64050e-7a3a-e1cb-dcc0-95b058efe301",
     "correct": true,
     "answer": "A nested loop is when a loop exists inside another loop."
    },
    {
     "_id": "1fa4f2aa-22cd-1558-84c1-c2305985fac9",
     "correct": false,
     "answer": "A nested loop is when you have more than one loop in your program."
    }
   ],
   "guidance": "By definition, a **nested loop** is when one loop exists inside another loop. There are are restrictions on the type of loop that can be nested nor the number of nested loops that can be used (though it is rare to implement more than two nested loops). Thus, a `for` loop can be nested in another `for` loop and a `while` loop can be nested inside another `while` loop. In addition, a `for` loop can be nested inside a `while` loop and vice versa. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/loops/NestedLoops.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/NestedLoops.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4111672069",
  "source": {
   "name": "Loops: Exercise 1",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading. **Reminder:** Make sure you fulfill **all** of the requirements above before submitting your work.",
   "command": "bash .guides/secure/loops/exercise1.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The first step is to figure out the pattern that `tina` moves. First `tina` moves forward by 100 pixels. Then `tina` turns left 120 degrees. Thus `tina`'s commands are `tina.forward(100)` and then `tina.left(120)`. This pattern happens exactly three times.\n\nNext is setting the loop so that `tina`'s commands are iterated three times. Per requirements, your loop header should include `int i = 0` and `i++`. Here are some possible solutions:\n```java\nfor(int i = 0; i < 3; i++) {\n  tina.forward(100);\n  tina.left(120);\n}\n```\n```java\nfor(int i = 0; i <= 2; i++) {\n  tina.forward(100);\n  tina.left(120);\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/loops/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/Exercise1.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1357018041",
  "source": {
   "name": "Array Syntax",
   "showName": true,
   "instructions": "Which of the following correctly contains the syntax for creating an **integer** array called `numbers` that stores elements from **1 through 5**?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c07a8f55-5d98-547e-bb1b-13eee2f7c6ff",
     "correct": false,
     "answer": "`String[] numbers = {1, 2, 3, 4, 5};`"
    },
    {
     "_id": "cb424813-9e7e-e6f7-8b59-250a560b2766",
     "correct": false,
     "answer": "`String[] numbers = new String[5];`"
    },
    {
     "_id": "71246471-5425-f126-f3c5-7409d51c2594",
     "correct": true,
     "answer": "`int[] numbers = {1, 2, 3, 4, 5};`"
    },
    {
     "_id": "b7985b98-aeac-2ec6-1106-8d022b41a71e",
     "correct": false,
     "answer": "`int[] numbers = new int[5];`"
    }
   ],
   "guidance": "In order to store integers into an array, `int[]` must be used. Also, we know we want elements in the array to be initialized to numbers 1 through 5 which means we cannot use `new`. Thus, the correct answer is `int[] numbers = {1, 2, 3, 4, 5};`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Creating Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/ArrayCreate.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayCreate.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Create an array using both the initializer list and new methods"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3807028898",
  "source": {
   "name": "Array Indices",
   "showName": true,
   "instructions": "Given the following code:\n```java\ndouble[] tenths = {1.2, 2.3, 3.4, 4.5};\n```\n\nDetermine what will be printed for each of the following print statements.",
   "showValues": true,
   "text": "1. `System.out.println(tenths[0])` will print <<<1.2>>>.\n2. `System.out.println(tenths[2])` will print <<<3.4>>>.\n3. `System.out.println(tenths[4])` will print <<<ArrayIndexOutOfBoundsException>>>.",
   "distractors": "2.3\n4.5\n",
   "guidance": "Remember that array indices always start at `0`. Thus, `tenths[0]` refers to the first element, `tenths[2]` refers to the third element, and `tenths[4]` refers to the fifth element. The first element is `1.2`, the third element is `3.4`, and the fifth element does not exist. Therefore, an `ArrayIndexOutOfBoundsException` error message will be returned.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Accessing Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/ArrayAccess.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayAccess.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Access and modify array elements",
   "tokens": {
    "blank": [
     "1.2",
     "3.4",
     "ArrayIndexOutOfBoundsException"
    ],
    "text": [
     "1. `System.out.println(tenths[0])` will print ",
     0,
     ".\n2. `System.out.println(tenths[2])` will print ",
     0,
     ".\n3. `System.out.println(tenths[4])` will print ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2251455786",
  "source": {
   "name": "Modifying Test Scores",
   "showName": true,
   "instructions": "Given the following output:\n```java\nFirst test: 84\nSecond test: 76\nThird test: 97\n```\n\nFill in the blanks below with code to produce the output mentioned above.",
   "showValues": false,
   "text": "```java\n<<<String>>>[] test = {\"<<<First>>> test: \", \"Second test: \", \"Third test: \"};\nint[] scores = <<<new>>> int[<<<3>>>];\n\nscores[<<<0>>>] = 84;\n<<<scores>>>[1] = 76;\nscores[2] = <<<97>>>;\n\nSystem.out.println(<<<test>>>[0] + scores[<<<0>>>]);\nSystem.out.println(test[<<<1>>>] + scores[<<<1>>>]);\nSystem.out.println(test[<<<2>>>] + <<<scores>>>[2]);\n```",
   "distractors": "",
   "guidance": "The first array uses the **initializer list** method to populate Strings into the array. Thus, `String[]` is needed. While initializing the String array, the first element should be initialized to \"`First` test: \". \n\nThe second array uses the **new** method to populate ints into the array. Thus, `new` is needed followed by int[`3`] in order to store 3 elements.\n\nDue to the **new** method, the int array will be populated with the default `0`. To change the elements, you must specify the indices at which they are located and assign them the appropriate values. For example, `scores[0] = 84;` will replace the first element in the array with `84`.\n\nThe print statements should refer to the elements' indices starting from `0` and going through `2`. You need to use both arrays in your print statements. For example, `System.out.println(test[0] + scores[0]);`\n\n**Solution:**\n```java\nString[] test = {\"First test: \", \"Second test: \", \"Third test: \"};\nint[] scores = new int[3];\n\nscores[0] = 84;\nscores[1] = 76;\nscores[2] = 97;\n\nSystem.out.println(test[0] + scores[0]);\nSystem.out.println(test[1] + scores[1]);\nSystem.out.println(test[2] + scores[2]);\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Modifying Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/ArrayListIterate.java",
     "code/arrays/ArrayModify.java"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Access and modify array elements",
   "tokens": {
    "blank": [
     "String",
     "First",
     "new",
     "3",
     "0",
     "scores",
     "97",
     "test",
     "0",
     "1",
     "1",
     "2",
     "scores"
    ],
    "text": [
     "```java\n",
     0,
     "[] test = {\"",
     0,
     " test: \", \"Second test: \", \"Third test: \"};\nint[] scores = ",
     0,
     " int[",
     0,
     "];\n\nscores[",
     0,
     "] = 84;\n",
     0,
     "[1] = 76;\nscores[2] = ",
     0,
     ";\n\nSystem.out.println(",
     0,
     "[0] + scores[",
     0,
     "]);\nSystem.out.println(test[",
     0,
     "] + scores[",
     0,
     "]);\nSystem.out.println(test[",
     0,
     "] + ",
     0,
     "[2]);\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2702771590",
  "source": {
   "name": "Modifying Array Elements",
   "showName": true,
   "instructions": "After outputting your code, you noticed that `Friday` is printed twice. Your code is shown below:\n```java\nString[] weekdays = {\"Monday\", \"Tuesday\", \"Wednesday\", \n                     \"Friday\", \"Friday\"};\n```\n\nWhich of the following code snippets correctly modifies the array so that `Thursday` is printed **after** `Wednesday` but **before** the second `Friday`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "30018346-4ee9-1f01-3f01-2288826b3678",
     "correct": false,
     "answer": "`weekdays = \"Thursday\";`"
    },
    {
     "_id": "61a99cd1-955a-c758-74d5-47634e3c707f",
     "correct": true,
     "answer": "`weekdays[3] = \"Thursday\";`"
    },
    {
     "_id": "7e70a1b4-af06-28d1-8d2b-8027bc00c20d",
     "correct": false,
     "answer": "`weekdays[4] = \"Thursday\";`"
    },
    {
     "_id": "4d4799b0-c2ab-5b25-a508-3a408425a224",
     "correct": false,
     "answer": "`weekdays[5] = \"Thursday\";`"
    }
   ],
   "guidance": "In order to modify an array element, you must specify the index at which that element is located within brackets `[]`. Also, remember that array indices start at `0` for the first element, then `1` for the second element, etc. Since we want to replace the first `Friday` with `Thursday`, which is the fourth element in the array, we need to access index number `3`. Thus, the correct answer is choice **#2**: `weekdays[3] = \"Thursday\";`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Modifying Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/ArrayModify.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayModify.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Access and modify array elements"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3987656755",
  "source": {
   "name": "Iterating Array Elements",
   "showName": true,
   "instructions": "Construct a program using the code blocks below that iterates through the array and prints every element inside.\n\n**Hint:** You will not need to use all of the blocks and be sure to **indent** any command(s) that you want the program to repeat by dragging it slightly to the right. You only have **ONE ATTEMPT** at this problem!",
   "initial": "double[] debt = {23.67, 82.96, 34.51};\nfor (int i = 0; i < debt.length; i++) {\n  System.out.println(debt[i]);\n}\ndouble[] debt = {\"23.67\", \"82.96\", \"34.51\"};    #distractor\nfor (int i = 0; i <= 3; i++) {    #distractor\nSystem.out.println(debt);    #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The first step is to initialize all of the elements inside the array. The array type is **double**, therefore you cannot initialize the elements as Strings (i.e `\"23.67\"`, etc.). Next, the `for` loop needs to run exactly **three** times to iterate through the three elements that we have. You cannot use `for (int i = 0; i <= 3; i++) {` because that will cause the loop to run **four** times. We do not have a fourth element so the system will encounter an `ArrayIndexOutOfBoundsException` error. Use `for (int i = 0; i < debt.length; i++) {` instead because `debt.length` will always keep track of how many elements are in our array. Lastly, we need to print `debt[i]`, not `debt`. Remember, `debt` is the array itself, not the array elements. Printing `debt` will only print its memory address.\n\n**Solution:**\n```java\ndouble[] debt = {23.67, 82.96, 34.51};\nfor (int i = 0; i < debt.length; i++) {\n  System.out.println(debt[i]);\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Iterating Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/ArrayIterate.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayIterate.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Iterate through arrays using a for loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2708756625",
  "source": {
   "name": "Enhanced For-Loop",
   "showName": true,
   "instructions": "Which of the following situations can an enhanced `for` loop be used for?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b3a1305a-175b-2613-0926-d9874ef13f5e",
     "correct": false,
     "answer": "To refer to an array index or position within the array."
    },
    {
     "_id": "f287b009-53fb-6c58-7eb3-24810209a198",
     "correct": false,
     "answer": "To modify an element inside the array."
    },
    {
     "_id": "76eb1fa4-f417-dfd8-6e8b-1cd5c02f6b73",
     "correct": true,
     "answer": "To print all of the elements within an array."
    },
    {
     "_id": "817e04cb-8e5e-5d30-927a-416daed85e0d",
     "correct": false,
     "answer": "To print only specific elements of the array."
    }
   ],
   "guidance": "The biggest advantage of an enhanced `for` loop is that it cuts down on the amount of code needed to **print all of the elements** inside an array. Unfortunately, it cannot access array indices, modify array elements, nor print specific elements within an array.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Array Enhanced For Loop"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/ArrayEnhancedFor.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayEnhancedFor.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT Iterate through arrays using an enhanced for loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1047073280",
  "source": {
   "name": "Arrays, Loops, and Conditionals",
   "showName": true,
   "instructions": "Complete the program below with code so that the program will print `Even` if the array element is an even number and `Odd` if it is odd.",
   "showValues": false,
   "text": "```java\nint[] numbers = {15, 48, 22, 93, 75};\n\n<<<for>>> (<<<int>>> i : numbers) {\n  <<<if>>> (i % 2 == <<<0>>>) {\n    System.out.println(\"Even\");\n  }\n  else {\n    System.out.println(\"<<<Odd>>>\");\n  }\n}\n```",
   "distractors": "",
   "guidance": "The code implements an enhanced `for` loop, thus you need to specify the type for `i` which is `int`. A conditional `if` is needed to direct the program to print `Even` if the element has no remainder when dividing by 2, `if (i % 2 == 0)`. Otherwise, the element is an odd number and the program will print `Odd`.\n\n**Solution:**\n```java\nint[] numbers = {15, 48, 22, 93, 75};\n\nfor (int i : numbers) {\n  if (i % 2 == 0) {\n    System.out.println(\"Even\");\n  }\n  else {\n    System.out.println(\"Odd\");\n  }\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Array Algorithms"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/ArrayAlgorithms.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayAlgorithms.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Determine array output",
   "tokens": {
    "blank": [
     "for",
     "int",
     "if",
     "0",
     "Odd"
    ],
    "text": [
     "```java\nint[] numbers = {15, 48, 22, 93, 75};\n\n",
     0,
     " (",
     0,
     " i : numbers) {\n  ",
     0,
     " (i % 2 == ",
     0,
     ") {\n    System.out.println(\"Even\");\n  }\n  else {\n    System.out.println(\"",
     0,
     "\");\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1223430986",
  "source": {
   "name": "Conditional Array Output",
   "showName": true,
   "instructions": "Given the following code snippet:\n```java\nint[] ages = {18, 21, 15, 2, 68};\n\nfor (int i : ages) {\n  if (i >= 18) {\n    System.out.println(\"Eligible\");\n  }\n  else {\n    System.out.println(\"Ineligible\");\n  }\n}\n```\n\nDetermine the output that will be produced by the program above.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b146ffa9-3af1-1f86-ff0a-21bcbc1dff6c",
     "correct": true,
     "answer": "```java\nEligible\nEligible\nIneligible\nIneligible\nEligible\n```"
    },
    {
     "_id": "df9231ee-b47f-87a4-350b-de310dedfe89",
     "correct": false,
     "answer": "```java\nIneligible\nIneligible\nEligible\nEligible\nIneligible\n```"
    },
    {
     "_id": "40b71e5a-c523-cc52-dc05-7c6f84cb8979",
     "correct": false,
     "answer": "```java\n18\n21\n15\n2\n68\n```"
    },
    {
     "_id": "380ba21f-d0d3-fad1-02bf-74695f2bf1cb",
     "correct": false,
     "answer": "```java\n68\n2\n15\n21\n18\n```"
    }
   ],
   "guidance": "**Guide:**\n* The elements `18`, `21`, `15`, `2`, and `68` are added to the array called `ages`.\n* An enhanced `for` loop is used which causes `i` to take on the value of each element.\n* If `i` is greater than or equal to `18`, then the system prints `Eligible`.\n* Otherwise, the system will print `Ineligible`.\n* `18`, `21`, and `68` will result in `Eligible` since they are greater than or equal to `18`.\n* `15` and `2` are less than `18` so they will result in `Ineligible`.\n\n**Solution:**\n```java\nEligible\nEligible\nIneligible\nIneligible\nEligible\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Array Output"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Determine array output"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-594360288",
  "source": {
   "name": "ArrayList Syntax",
   "showName": true,
   "instructions": "Which of the following ArrayList syntax is **incorrect**?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d57cd3cf-5547-516a-14d8-1515dfaceff8",
     "correct": false,
     "answer": "`ArrayList<String> list = new ArrayList<String>();`"
    },
    {
     "_id": "efbd97b7-0a5a-ee49-63fd-7a4d3ee3dadf",
     "correct": true,
     "answer": "`ArrayList<int> list = new ArrayList<int>();`"
    },
    {
     "_id": "b1b1e647-da9e-2776-d75d-eb1d0ad3501e",
     "correct": false,
     "answer": "`ArrayList<Double> list = new ArrayList<Double>();`"
    },
    {
     "_id": "b977568d-04b1-da53-614b-e6a23f8c7c77",
     "correct": false,
     "answer": "`ArrayList<Boolean> list = new ArrayList<Boolean>();`"
    }
   ],
   "guidance": "There are *unique* labels for data types in ArrayLists. Instead of `int`, `double`, and `boolean`, ArrayLists use `Integer`, `Double`, and `Boolean`. Only `String`s is similarly used between ArrayLists and arrays. Thus, it should be `ArrayList<Integer> list = new ArrayList<Integer>();` rather than `ArrayList<int> list = new ArrayList<int>();`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Creating ArrayLists"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/ArrayListCreate.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayListCreate.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT Create an empty ArrayList"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-225623719",
  "source": {
   "name": "Adding and Removing ArrayList Elements",
   "showName": true,
   "instructions": "Given the follow code snippet:\n```java\nArrayList<String> words = new ArrayList<String>();\n\nwords.add(\"I\");\nwords.add(\"love\");\nwords.remove(1);\nwords.add(\"hate\");\nwords.add(1, \"really\");\nwords.add(3, \"bean sprouts\");\n\nSystem.out.println(words);\n```\n\nDetermine the output that is produced.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8fdfcbdb-ba2d-452b-e0a3-5bd74c51b3d4",
     "correct": false,
     "answer": "`IndexOutOfBoundsException` error"
    },
    {
     "_id": "d82bce28-c3e8-1724-b0eb-ece7c9111441",
     "correct": false,
     "answer": "`[I, really, love, bean sprouts]`"
    },
    {
     "_id": "ce842c54-828a-9f5d-8934-a8bc9ef9d62e",
     "correct": false,
     "answer": "`[I, hate, really, bean sprouts]`"
    },
    {
     "_id": "a6b2f21e-33ae-97e0-5a9d-34202d9142cc",
     "correct": true,
     "answer": "`[I, really, hate, bean sprouts]`"
    }
   ],
   "guidance": "By following the syntax for adding and removing ArrayList elements, you should end up with the output `[I, really, hate, bean sprouts]`.\n\n**Code Flow:**\n`words.add(\"I\");` ---> `[I]`\n`words.add(\"love\");` ---> `[I, love]`\n`words.remove(1);` ---> `[I]`\n`words.add(\"hate\");` ---> `[I, hate]`\n`words.add(1, \"really\");` ---> `[I, really, hate]`\n`words.add(3, \"bean sprouts\");` ---> `[I, really, hate, bean sprouts]`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Adding and Removing ArrayList Elements"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/ArrayListAddRemove.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayListAddRemove.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Add and remove ArrayList elements"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1250261069",
  "source": {
   "name": "Get and Set ArrayList Elements",
   "showName": true,
   "instructions": "Construct a program using the code blocks below so that the following will be printed:\n```java\nParker\n```\n\nYou only have **ONE ATTEMPT** at this problem!",
   "initial": "ArrayList&lt;String&gt; name = new ArrayList&lt;String&gt;();\nname.add(\"Peter\");\nname.set(0, \"Parker\");\nSystem.out.println(name.get(0));",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":false,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Before any ArrayList methods can be used, an ArrayList must be created first, `ArrayList<String> name = new ArrayList<String>();`. After the ArrayList is created, it is empty by default so neither the `get()` nor `set()` methods will work. You must add an element to the ArrayList, thus, `name.add(\"Peter\");` comes next. Since the output is `Parker`, you want the print statement to come after `name.set(0, \"Parker\");`. Otherwise, `Peter` will be printed instead.\n\n**Solution:**\n```java\nArrayList<String> name = new ArrayList<String>();\nname.add(\"Peter\");\nname.set(0, \"Parker\");\nSystem.out.println(name.get(0));\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Getting and Setting ArrayLists Elements"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/ArrayListGetSet.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayListGetSet.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Get and set ArrayList elements"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1411510745",
  "source": {
   "name": "Iterating ArrayList Elements",
   "showName": true,
   "instructions": "Fill in the program below with code so that all elements of the ArrayList `BMI` is printed.\n\n**Hint:** Some code might be used more than once while others are not used at all.",
   "showValues": true,
   "text": "```java\n<<<ArrayList>>>&lt;Double&gt; BMI = <<<new>>> ArrayList&lt;<<<Double>>>&gt;();\nBMI.<<<add>>>(18.5);\nBMI.<<<add>>>(25.0);\nBMI.<<<add>>>(30.0);\n\nfor (<<<Double>>> d : <<<BMI>>>) {\n  System.out.println(<<<d>>>);\n}\n```",
   "distractors": "get\nset",
   "guidance": "The correct syntax for creating an empty Double ArrayList is `ArrayList<Double> BMI = new ArrayList<Double>();`. The `get()` and `set()` methods cannot be used on an empty ArrayList. Only `add()` can be used to add elements to the empty ArrayList. Since the ArrayList is of type Double, `Double` must be used to type the iterating variable `d`. On the other side of the colon `:` is the reference of the ArrayList name `BMI`. Then the final step is to print `d` which has taken on all elements of the ArrayList in order.\n\n**Solution:**\n```java\nArrayList<Double> BMI = new ArrayList<Double>();\nBMI.add(18.5);\nBMI.add(25.0);\nBMI.add(30.0);\n\nfor (Double d : BMI) {\n  System.out.println(d);\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Iterating ArrayLists"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/ArrayListIterate.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayListIterate.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Iterate through ArrayLists using an enhanced for loop",
   "tokens": {
    "blank": [
     "ArrayList",
     "new",
     "Double",
     "add",
     "add",
     "add",
     "Double",
     "BMI",
     "d"
    ],
    "text": [
     "```java\n",
     0,
     "&lt;Double&gt; BMI = ",
     0,
     " ArrayList&lt;",
     0,
     "&gt;();\nBMI.",
     0,
     "(18.5);\nBMI.",
     0,
     "(25.0);\nBMI.",
     0,
     "(30.0);\n\nfor (",
     0,
     " d : ",
     0,
     ") {\n  System.out.println(",
     0,
     ");\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-298729376",
  "source": {
   "name": "ArrayList or Array?",
   "showName": true,
   "instructions": "Fill out the following statements with either `ArrayList` or `Array` depending on whether each statement is true to one or the other.",
   "showValues": true,
   "text": "1. Can be initialized by adding elements into curly braces `{}`: <<<Array>>>\n2. Can add or remove elements after being created: <<<ArrayList>>>\n3. Can change the order of elements without modifying existing elements: <<<ArrayList>>>\n4. Can use `length` to determine the number of elements: <<<Array>>>\n",
   "distractors": "",
   "guidance": "Although it is possible to initialize elements at the start, arrays are **static** so adding or removing elements *after* initialization is not possible. On the other hand, ArrayLists are **dynamic** so it is possible to add, remove, and reorder elements. Arrays use `length` while ArrayLists use `size()` to determine the number of existing elements.\n\n**Solution:**\n1. Array\n2. ArrayList\n3. ArrayList\n4. Array",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "ArrayLists vs. Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/ArrayListArray.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayListArray.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT Determine key differences between ArrayLists and arrays",
   "tokens": {
    "blank": [
     "Array",
     "ArrayList",
     "ArrayList",
     "Array"
    ],
    "text": [
     "1. Can be initialized by adding elements into curly braces `{}`: ",
     0,
     "\n2. Can add or remove elements after being created: ",
     0,
     "\n3. Can change the order of elements without modifying existing elements: ",
     0,
     "\n4. Can use `length` to determine the number of elements: ",
     0,
     "\n"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3501560183",
  "source": {
   "name": "ArrayLists, Loops, and Conditionals",
   "showName": true,
   "instructions": "On a student's first four tests, they received scores in the following order: `68`, `92`, `100`, and `88`.\n\nFill in the blanks below with code so that the program will print `You got a perfect score!` if the student scored as least one `100` and will print `Keep up the hard work!` if they did not.",
   "showValues": false,
   "text": "```java\nArrayList<Integer> scores = new ArrayList&lt;Integer&gt;();\nscores.<<<add>>>(68);\nscores.<<<add>>>(92);\nscores.<<<add>>>(100);\nscores.<<<add>>>(88);\n    \n<<<String>>> feedback = \"\";\n\n<<<for>>> (Integer i : <<<scores>>>) {\n  if (i == <<<100>>>) {\n    <<<feedback>>> = \"You got a perfect score!\";\n    break;\n  }\n  <<<else>>> {\n    feedback = \"Keep up the hard work!\";\n  }\n}\n    \nSystem.out.println(<<<feedback>>>);\n```",
   "distractors": "",
   "guidance": "**Guide:**\n* All of the test scores need to be added to `scores` using `add()`.\n* `feedback` is of type `String`.\n* Enhanced `for` loop is needed due to the given syntax `(Integer i : scores)`.\n* If the iterating variable equals `100`, then `You got a perfect score!` will be assigned to `feedback`.\n* `else`, `Keep up the hard work!` will be assigned.\n* Lastly, the program should print the resulting `feedback`.\n\n**Solution:**\n```java\nArrayList<Integer> scores = new ArrayList<Integer>();\nscores.add(68);\nscores.add(92);\nscores.add(100);\nscores.add(88);\n    \nString feedback = \"\";\n\nfor (Integer i : scores) {\n  if (i == 100) {\n    feedback = \"You got a perfect score!\";\n    break;\n  }\n  else {\n    feedback = \"Keep up the hard work!\";\n  }\n}\n    \nSystem.out.println(feedback);\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "ArrayLists Algorithms"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/ArrayListAlgorithms.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/ArrayListAlgorithms.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Determine ArrayList output",
   "tokens": {
    "blank": [
     "add",
     "add",
     "add",
     "add",
     "String",
     "for",
     "scores",
     "100",
     "feedback",
     "else",
     "feedback"
    ],
    "text": [
     "```java\nArrayList<Integer> scores = new ArrayList&lt;Integer&gt;();\nscores.",
     0,
     "(68);\nscores.",
     0,
     "(92);\nscores.",
     0,
     "(100);\nscores.",
     0,
     "(88);\n    \n",
     0,
     " feedback = \"\";\n\n",
     0,
     " (Integer i : ",
     0,
     ") {\n  if (i == ",
     0,
     ") {\n    ",
     0,
     " = \"You got a perfect score!\";\n    break;\n  }\n  ",
     0,
     " {\n    feedback = \"Keep up the hard work!\";\n  }\n}\n    \nSystem.out.println(",
     0,
     ");\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-241323723",
  "source": {
   "name": "Modifying a Shopping List",
   "showName": true,
   "instructions": "Your shopping list is stored in an ArrayList and when printed gives you the following output:\n```java\nApple\nBanana\nBanana\nDumpling\n```\nYou notice that you accidentally added `Banana` twice and you had meant to add `Carrot` after the *first* `Banana`. Assuming that your ArrayList is called `list`, which of the following commands will modify `list` so that printing it will produce:\n```java\nApple\nBanana\nCarrot\nDumpling\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "e20da985-8138-c148-fdfe-d8cfef52f43f",
     "correct": false,
     "answer": "`list.add(\"Carrot\");`"
    },
    {
     "_id": "f8221175-1a9d-c7ec-8a42-c3223af02eb5",
     "correct": false,
     "answer": "`list.remove(2);`"
    },
    {
     "_id": "5adcce38-d962-3fb9-e74e-b3b9d4a2feb8",
     "correct": false,
     "answer": "`list.get(1);`"
    },
    {
     "_id": "262c66bc-2618-78bd-a661-81328784b5ce",
     "correct": true,
     "answer": "`list.set(2, \"Carrot\");`"
    }
   ],
   "guidance": "Only choice **#4** will modify the `list` so that `Carrot` will replace `Banana` at index 2. Choice **#1** will only add `Carrot` to the end of the `list`. Choice **#2** will only remove the second `Banana` stored at index 2. And finally, choice **#3** will just access index 1 without modifying any elements.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Modifying ArrayLists"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Modify ArrayList elements"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3810632630",
  "source": {
   "name": "Decoding the Message",
   "showName": true,
   "instructions": "Given the following program:\n```java\nArrayList<String> message = new ArrayList<String>();\nmessage.add(\"a\");\nmessage.add(\"bad\");\nmessage.add(0, \"today\");\nmessage.set(1, \"is\");\nmessage.remove(2);\nmessage.add(\"good\");\nmessage.add(2, \"a\");\nmessage.add(\"day\");\n\nfor (String s : message) {\n  System.out.print(s);\n}\n```\n\nDetermine the `message` that is outputted.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5e719328-bd18-d10d-a1e8-3b530aeea733",
     "correct": true,
     "answer": "`todayisagoodday`"
    },
    {
     "_id": "7754aa6b-fefc-f357-bd83-507c6a91cd69",
     "correct": false,
     "answer": "`today is a bad day`"
    },
    {
     "_id": "7011bcc2-66e1-8b4a-36a9-c2726f30b778",
     "correct": false,
     "answer": "`a bad today is good a today`"
    },
    {
     "_id": "4a2d9e94-1e93-3886-46b1-e9bf8629d650",
     "correct": false,
     "answer": "`abaddayisagoodday`"
    }
   ],
   "guidance": "To decode the message, follow each commands below:\n* message.add(\"a\"); ---> [a]\n* message.add(\"bad\"); ---> [a, bad]\n* message.add(0, \"today\"); ---> [today, a, bad]\n* message.set(1, \"is\"); ---> [today, is, bad]\n* message.remove(2); ---> [today, is]\n* message.add(\"good\"); ---> [today, is, good]\n* message.add(2, \"a\"); ---> [today, is, a, good]\n* message.add(\"day\"); ---> [today, is, a, good, day]\n* System.out.print(s); ---> `todayisagoodday`\n\n**Note** that the enhanced for loop will iterate through the elements and print them **without** any newlines nor spaces.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "ArrayList Output"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Determine ArrayList output"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-579717952",
  "source": {
   "name": "2D Array Creation",
   "showName": true,
   "instructions": "If you want to create a 2D array with `2` rows and `4` columns that stores **integer** elements, which of the following syntax should you use?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a3761fa8-70c0-0810-09c1-20e828e33bb5",
     "correct": false,
     "answer": "`Integer[][] elements = new Integer[1][3];`"
    },
    {
     "_id": "779d20c2-c7b9-fc1d-a9ab-8a97febfc8bc",
     "correct": false,
     "answer": "`Integer[][] elements = new Integer[2][4];`"
    },
    {
     "_id": "22ec3e7c-7242-b7b9-437a-3b8bb41bdbca",
     "correct": false,
     "answer": "`int[][] elements = new int[1][3];`"
    },
    {
     "_id": "6fc8564d-11eb-5f85-304a-8bad46fc7a64",
     "correct": true,
     "answer": "`int[][] elements = new int[2][4];`"
    }
   ],
   "guidance": "`Integer` is used for ArrayLists, not arrays. Remember, a 2D array is just an array inside another array. Therefore, the correct type is `int`. When creating a 2D array, the numbers that go into the brackets represent how many rows and columns will be created, not the row and column indices.\n\n**Solution:**\n`int[][] elements = new int[2][4];`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Creating 2D Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [
     "code/arrays/TwoDArrayCreate.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/TwoDArrayCreate.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Create a 2D array using the initializer list method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3279998998",
  "source": {
   "name": "2D Array Modification",
   "showName": true,
   "instructions": "Given the following 2D array:\n```java\ndouble[][] sqroots = { {1.00, 1.41, 1.73},\n                       {2.00, 2.2, 2.45} };\n```\n\nWhich of the following code snippets will enable you to change `2.2` within the 2D array to `2.24`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1d0bea6a-1015-dfff-99f2-be886a58d09e",
     "correct": false,
     "answer": "`sqroots[2][2] = 2.24;`"
    },
    {
     "_id": "2c215a34-a18e-15a5-e829-d955148d65e0",
     "correct": true,
     "answer": "`sqroots[1][1] = 2.24;`"
    },
    {
     "_id": "992cba1b-cc11-3225-0ec0-dc095efe6fea",
     "correct": false,
     "answer": "`sqroots[2, 2] = 2.24;`"
    },
    {
     "_id": "74c2f0c1-bd4b-213d-ebbf-5f68dc7e3dca",
     "correct": false,
     "answer": "`sqroots[1, 1] = 2.24;`"
    }
   ],
   "guidance": "Remember that array indices start at `0`, **not** at `1`. Thus, `2.2` is located at row index 1 and column index 1. To access an element inside a 2D array, the row and column indices must go into brackets `[][]`.\n\n**Solution:**\n`sqroots[1][1] = 2.24;`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Accessing and Modifying 2D Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [
     "code/arrays/TwoDArrayAccessMod.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/TwoDArrayAccessMod.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Access and modify 2D array elements"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2789344707",
  "source": {
   "name": "Iterating 2D Array Elements",
   "showName": true,
   "instructions": "Fill in the blanks below with code so that the program will iterate through a 2D array called `family` and print the following output:\n```java\nGrandpa Grandma\nDad Mom\nBrother Sister\n```",
   "showValues": false,
   "text": "```java\n<<<String>>>[][] family = { {\"Grandpa\", \"Grandma\"},\n                      {\"Dad\", \"Mom\"},\n                      {\"Brother\", \"Sister\"} };\n\nfor (int i = 0; i < family.<<<length>>>; i++) {\n  <<<for>>> (int j = 0; j < family<<<[>>>0<<<]>>>.length; j++) {\n    <<<if>>> (j == <<<family>>>[0].length - 1) {\n      System.out.<<<println>>>(family[i][j]);\n    }\n    else {\n      System.out.<<<print>>>(family[i][j] + \" \");\n    }\n  }\n}\n```",
   "distractors": "",
   "guidance": "**Guide:**\n* The 2D array is of type `String`.\n* The `for` loops include the iterating variable `i` that ends before `family.length` and the iterating variable `j` that ends before `family[0].length`.\n* `if` `j` gets to the end of the column index, `family[0].length - 1`, print the element with `println`, else, print the element with `print` and an empty space.\n\n**Solution:**\n```java\nString[][] family = { {\"Grandpa\", \"Grandma\"},\n                      {\"Dad\", \"Mom\"},\n                      {\"Brother\", \"Sister\"} };\n\nfor (int i = 0; i < family.length; i++) {\n  for (int j = 0; j < family[0].length; j++) {\n    if (j == family[0].length - 1) {\n      System.out.println(family[i][j]);\n    }\n    else {\n      System.out.print(family[i][j] + \" \");\n    }\n  }\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Iterating 2D Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [
     "code/arrays/TwoDArrayIterate.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/TwoDArrayIterate.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Iterate through 2D arrays using both a for loop",
   "tokens": {
    "blank": [
     "String",
     "length",
     "for",
     "[",
     "]",
     "if",
     "family",
     "println",
     "print"
    ],
    "text": [
     "```java\n",
     0,
     "[][] family = { {\"Grandpa\", \"Grandma\"},\n                      {\"Dad\", \"Mom\"},\n                      {\"Brother\", \"Sister\"} };\n\nfor (int i = 0; i < family.",
     0,
     "; i++) {\n  ",
     0,
     " (int j = 0; j < family",
     0,
     "0",
     0,
     ".length; j++) {\n    ",
     0,
     " (j == ",
     0,
     "[0].length - 1) {\n      System.out.",
     0,
     "(family[i][j]);\n    }\n    else {\n      System.out.",
     0,
     "(family[i][j] + \" \");\n    }\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2639237839",
  "source": {
   "name": "Printing a Squares 2D Array",
   "showName": true,
   "instructions": "Construct a program using the code blocks below that iterates through the 2D array and prints the following output:\n```java\n1 4\n9 16\n```\n\n**Hint:** You will not need to use all of the blocks and be sure to **indent** any command(s) that you want the program to repeat or any nested loops by dragging them slightly to the right. You only have **ONE ATTEMPT** at this problem!",
   "initial": "int[][] squares = {{1, 4},{9, 16}};\nfor (int[] i : squares) {\n  for (int j : i) {\n    if (j == 4 | j == 16) {\n      System.out.println(j);\n    }\n    else {\n      System.out.print(j + \" \");\n    }\n  }\n}\nInteger[][] squares = {{1, 4},{9, 16}};     #distractor\nfor (int i : squares) {     #distractor\nif (j == squares[0].length - 1) {     #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "**Guide:**\n* 2D arrays of integer is typed as `int`, not `Integer`.\n* To use an enhanced `for` loop, the first iterating variable must be `int[]` rather than `int`.\n* The iterating variables in an enhanced `for` loop cannot manipulate element indices, only element values, thus `if (j == 4 | j == 16)` is needed rather than `if (j == squares[0].length - 1)`.\n* Print using `println` for when `j` is `4` or `16`.\n* Print using `print` for when `j` is anything else with a space.\n\n**Solution:**\n```java\nint[][] squares = {{1, 4},{9, 16}};\nfor (int[] i : squares) {\n  for (int j : i) {\n    if (j == 4 | j == 16) {\n      System.out.println(j);\n    }\n    else {\n      System.out.print(j + \" \");\n    }\n  }\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "2D Array Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Determine 2D array output"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-375825005",
  "source": {
   "name": "2D Array Table",
   "showName": true,
   "instructions": "Given the following code snippet:\n```java\nString[][] names = new String[3][2];\nnames[0][1] = \"First name\";\nnames[0][0] = \"Last name\";\nnames[2][0] = \"Man\";\nnames[1][1] = \"Peter\";\nnames[1][0] = \"Parker\";\nnames[2][1] = \"Spider\";\n\nfor (int i = 0; i < names.length; i++) {\n  for (int j = 0; j < names[0].length; j++) {\n    if (j == names[0].length - 1) {\n      System.out.println(names[i][j]);\n    }\n    else {\n      System.out.print(names[i][j] + \" \");\n    }\n  }\n}\n```\n\nDetermine the output that is produced by the program.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8c9b0d80-9d77-7c1a-11ea-d62818c2d72d",
     "correct": false,
     "answer": "```java\nFirstnameLastnameManPeterParkerSpider\n```"
    },
    {
     "_id": "49bea188-98ce-974b-7454-4fb6239fe64b",
     "correct": false,
     "answer": "```java\nFirst name Last name\nPeter Parker\nSpider Man\n```"
    },
    {
     "_id": "bf65c7d1-04e6-4b22-509b-98c2b0cf7000",
     "correct": true,
     "answer": "```java\nLast name First name\nParker Peter\nMan Spider\n```"
    },
    {
     "_id": "d61d72c8-e37a-8274-af18-f10e74c73570",
     "correct": false,
     "answer": "```java\nLast name\nFirst name\nParker\nPeter\nMan\nSpider\n```"
    }
   ],
   "guidance": "The program creates a 2D array and populates each index with Strings. Then some elements are printed with a newline while others are printed with a space. The solution guide below shows the sequence in which the elements are populated. Note that the `x`'s represent placeholders.\n\n**Solution Guide:**\n* Empty 2D array:\n```java\nx x\nx x\nx x\n```\n* `names[0][1] = \"First name\";`\n```java\nx First name\nx x\nx x\n```\n* `names[0][0] = \"Last name\";`\n```java\nLast name First name\nx x\nx x\n```\n* `names[2][0] = \"Man\";`\n```java\nLast name First name\nx x\nMan x\n```\n* `names[1][1] = \"Peter\";`\n```java\nLast name First name\nx Peter\nMan x\n```\n* `names[1][0] = \"Parker\";`\n```java\nLast name First name\nParker Peter\nMan x\n```\n* `names[2][1] = \"Spider\";`\n```java\nLast name First name\nParker Peter\nMan Spider\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "2D Array Output"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Determine 2D array output"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3239956842",
  "source": {
   "name": "Even or Odd Index?",
   "showName": true,
   "instructions": "Rearrange the code blocks below to produce a program that:\n1. Creates a `new` boolean array of 5 elements. \n1. Iterates through the array and modifies it so that elements at even indices are changed to `true` and elements at odd indices remain `false`.\n\nIf you were to print all of the elements in the array, it would look like this:\n```java\ntrue false true false true\n```\n\n**Remember to indent** where appropriate or you will not get credit for your work! You only have **ONE ATTEMPT** at this problem!",
   "initial": "boolean[] bools = new boolean[5];\nfor (int i = 0; i < bools.length; i++) {\n  if (i % 2 == 0) {\n    bools[i] = true;\n  }\n}",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\"}",
   "grader": "1",
   "guidance": "**Guide:**\n* First, create a new array with 5 elements, `boolean[] bools = new boolean[5]`.\n* Create a `for` loop that iterates through the length of the array and increments by 1 after every iteration, `for (int i = 0; i < bools.length; i++)`\n* If the index is even, modify the element and change it to `true`, `if (i % 2 == 0) { bools[i] = true }`.\n* Since the `new` method automatically initializes all elements to `false` by default, there is no need to include an `else` statement.\n\n**Solution:**\n```java\nboolean[] bools = new boolean[5];\nfor (int i = 0; i < bools.length; i++) {\n  if (i % 2 == 0) {\n    bools[i] = true;\n  }\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Array Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/LabArray.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/LabArray.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine correct array syntax"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2271749750",
  "source": {
   "name": "ArrayList Size",
   "showName": true,
   "instructions": "Select **all** of the following methods that will affect an ArrayList's size. In other words, the number of elements is changed by the method(s).",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "3feaefc6-3495-2356-b011-ad93b1e551a4",
     "correct": true,
     "answer": "`add()`"
    },
    {
     "_id": "35b70755-b539-ff49-a913-b66ad8cf1974",
     "correct": true,
     "answer": "`remove()`"
    },
    {
     "_id": "1d0c982f-8dea-e968-7508-945587679962",
     "correct": false,
     "answer": "`get()`"
    },
    {
     "_id": "b968842b-ece4-1b1b-457e-3ca147af7d3a",
     "correct": false,
     "answer": "`set()`"
    }
   ],
   "guidance": "Both the `add()` and `remove()` methods will affect the size of the ArrayList. The size of the ArrayList will increase by one after `add()` is used and will decrease by 1 after `removed()` is used. `get()` and `set()` will access and modify an element respectively, but they do not change the size of the ArrayList.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "ArrayList Size"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/LabArrayList.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/LabArrayList.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT Understand ArrayList methods"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1121497759",
  "source": {
   "name": "Wrong Number",
   "showName": true,
   "instructions": "Given the 2D array output:\n```java\n1 2 3\n4 5 0\n7 8 9\n```\n\nIf this 2D array was initialized as `int[][] keypad = new int[3][3];`, which of the following statements will modify the 2D array so that `6` is printed as an element instead of `0`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "ae837ad1-6944-2dd2-e30c-0a1e06f4c18d",
     "correct": false,
     "answer": "`keypad[2][3] = \"6\";`"
    },
    {
     "_id": "7f8f2910-5910-254f-771c-171e17ddf2a9",
     "correct": false,
     "answer": "`keypad[2][3] = 6;`"
    },
    {
     "_id": "60c18cc9-bb24-b097-a372-4a75b70b17dc",
     "correct": false,
     "answer": "`keypad[1][2] = \"6\";`"
    },
    {
     "_id": "373d9b34-00ba-ae41-beba-5fd3df7a14e2",
     "correct": true,
     "answer": "`keypad[1][2] = 6;`"
    }
   ],
   "guidance": "The 2D array is of type `int`, therefore the element has to be an integer `6` rather than a String `\"6\"`. 2D array indices start at 0, not 1; therefore, `0` is located at row index 1 and column index 2. To change `0` to `6`, the correct command is `keypad[1][2] = 6;`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Modifying 2D Arrays"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [
     "code/arrays/LabTwoDArray.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/LabTwoDArray.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Determine correct 2D array syntax"
  }
 },
 {
  "type": "test",
  "taskId": "test-2213811040",
  "source": {
   "name": "2D Chessboard Challenge",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading. **Remember** that you should not have modified the original code, otherwise, you will not receive credit for the challenge!",
   "command": "bash .guides/secure/arrays/labChallenge.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "If you used a nested `for` loop in your code, you would need to identify the pattern that exists within the chessboard. One noticeable pattern is shown below:\n```java\nOX\nXO\n```\n* **Even** row index and **even** column index = `O`\n* **Odd** row index and **odd** column index = `O`\n* **Even** row index and **odd** column index = `X`\n* **Odd** row index and **even** column index = `X`\n\n**Sample Solution:**\n```java\nfor (int i = 0; i < chessboard.length; i++) {\n  for (int j = 0; j < chessboard[0].length; j++) {\n    if ((i % 2 == 0) && (j % 2 == 0)) {\n      chessboard[i][j] = \"O\";\n    }\n    else if ((i % 2 == 1) && (j % 2 == 1)) {\n      chessboard[i][j] = \"O\";\n    }\n    else if ((i % 2 == 0) && (j % 2 == 1)) {\n      chessboard[i][j] = \"X\";\n    }\n    else if ((i % 2 == 1) && (j % 2 == 0)) {\n      chessboard[i][j] = \"X\";\n    }\n  }\n}\n```\n\nIf you tried to access each row/column index, then you would need to have 64 lines of code in your program to assigned each row/column pair of indices either `O` or `X`.\n```java\nchessboard[0][0] = \"O\";\nchessboard[0][1] = \"X\";\nchessboard[1][0] = \"X\";\nchessboard[1][1] = \"O\";\n...\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "2D Array Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [
     "code/arrays/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT Apply correct 2D array syntax"
  }
 },
 {
  "type": "test",
  "taskId": "test-2762730864",
  "source": {
   "name": "Arrays: Exercise 1",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading. **Remember** that you should not have modified the original code, otherwise, you will not receive credit for the exercise!",
   "command": "bash .guides/secure/arrays/exercise1.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You can use several ways to print the elements inside `oceans`. You can either print each element by referring to its **index** number:\n```java\nSystem.out.println(oceans[0]);\nSystem.out.println(oceans[1]);\nSystem.out.println(oceans[2]);\nSystem.out.println(oceans[3]);\nSystem.out.println(oceans[4]);\n```\n\nOr you can use an **enhanced** `for` loop:\n```java\nfor (String s : oceans) {\n  System.out.println(s);\n}\n```\n\nLastly, you can use a regular `for` loop:\n```java\nfor (int i = 0; i < oceans.length; i++) {\n  System.out.println(oceans[i]);\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Array Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Arrays"
     }
    ],
    "files": [
     "code/arrays/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT Apply correct array syntax"
  }
 },
 {
  "type": "test",
  "taskId": "test-264923223",
  "source": {
   "name": "Arrays: Exercise 2",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading. **Remember** that you should not have modified the original code, otherwise, you will not receive credit for the exercise!",
   "command": "bash .guides/secure/arrays/exercise2.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are multiple ways to print the desired result. One way is to add all of the specified elements into the ArrayList first. Then add a *Place Holder* element, set that *Place Holder* element to anything such as *Delete*, and finally, remove that *Delete* element.\n\n**Sample Solution:**\n```java\noceans.add(\"Pacific\");\noceans.add(\"Atlantic\");\noceans.add(\"Indian\");\noceans.add(\"Arctic\");\noceans.add(\"Southern\");\noceans.add(\"Place Holder\");\noceans.set(5, \"Delete\");\noceans.remove(5);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "ArrayList Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT Apply correct ArrayList syntax"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2597383171",
  "source": {
   "name": "Arrays: Exercise 3",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "java -cp code/arrays/ Exercise3",
   "preExecuteCommand": "javac code/arrays/Exercise3.java",
   "guidance": "There are so many different ways to approach this problem. One solution is to add the arguments in reverse order into the ArrayList. This will cause the ArrayList to hold six elements where the last three elements is the reverse of the first three. Then, all that's left to do is to remove the first three elements. Now you have a reversed ArrayList.\n\n**Sample Solution:**\n```java\nreverse.add(args[2]);\nreverse.add(args[1]);\nreverse.add(args[0]);\nreverse.remove(0);\nreverse.remove(0);\nreverse.remove(0);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "1 2 3",
     "input": "",
     "output": "[3, 2, 1]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "today is great",
     "input": "",
     "output": "[great, is, today]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "do re mi",
     "input": "",
     "output": "[mi, re, do]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "12.3 23.4 34.5",
     "input": "",
     "output": "[34.5, 23.4, 12.3]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "live laugh love",
     "input": "",
     "output": "[love, laugh, live]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "aba aba aba",
     "input": "",
     "output": "[aba, aba, aba]",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "ArrayList Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT Apply correct ArrayList syntax"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1856445250",
  "source": {
   "name": "Arrays: Exercise 4",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "java -cp code/arrays/ Exercise4",
   "preExecuteCommand": "javac code/arrays/Exercise4.java",
   "guidance": "First, you would need to modify the 2D array (`nums`) so that `a`, `b`, `c`, and `d` are placed at the correct row and column indices. Next, you'd need to calculate the correct row, column, and total sums while also placing them in the appropriate row and column indices. The code below showcases how each set of row and column indices pair is accessed and modified. **Note** that the total sum is just the arguments added together and then multiplied by 2.\n\n```java\nnums[0][0] = a;\nnums[0][1] = b;\nnums[0][2] = a + b;\nnums[1][0] = c;\nnums[1][1] = d;\nnums[1][2] = c + d;\nnums[2][0] = a + c;\nnums[2][1] = b + d;\nnums[2][2] = ((a+b) + (c+d) + (a+c) + (b+d));\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "1 2 3 4",
     "input": "",
     "output": "1 2 3\n3 4 7\n4 6 20",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "9 8 7 6",
     "input": "",
     "output": "9 8 17\n7 6 13\n16 14 60",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "-2 4 6 -12",
     "input": "",
     "output": "-2 4 2\n6 -12 -6\n4 -8 -8",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "0 0 0 0",
     "input": "",
     "output": "0 0 0\n0 0 0\n0 0 0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "-1 -2 -3 -4",
     "input": "",
     "output": "-1 -2 -3\n-3 -4 -7\n-4 -6 -20",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "2D Array Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "2D Arrays"
     }
    ],
    "files": [
     "code/arrays/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT Apply correct 2D array syntax"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1353242294",
  "source": {
   "name": "Arrays: Exercise 5",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "java -cp code/arrays/ Exercise5",
   "preExecuteCommand": "javac code/arrays/Exercise5.java",
   "guidance": "To add input into the ArrayList `numList`, you can use `add()`. Since this method is inside of the `while` loop, the system will keep adding integers into `numList` until a non-integer is entered.\n```java\nnumList.add(input);\n```\n\nTo iterate through `numList`, add all elements to `total`, and calculate the average `avg`, you can use an enhanced `for` loop or a regular `for` loop.\n```java\nfor (Integer i : numList) {\n  total += i;\n  avg = total / numList.size();\n}\n```\n```java\nfor (int i = 0; i < numList.size(); i++) {\n  total += numList.get(i);\n  avg = total / numList.size();\n}\n```\n\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "",
     "input": "1\n2\n3\nx",
     "output": "Enter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\n2.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "I am entering a non-integer",
     "output": "Enter integer to add to total, else find total average:\n0.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "-14\n14\n-14\n-14\n14.0",
     "output": "Enter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\n-7.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "0\n0\n0*0\n",
     "output": "Enter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\n0.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "19\n-4\n0\ntrue",
     "output": "Enter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\nEnter integer to add to total, else find total average:\n5.0",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "ArrayList Syntax"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "ArrayLists"
     }
    ],
    "files": [
     "code/arrays/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/arrays/Exercise5.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT Apply correct ArrayList syntax"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1495458135",
  "source": {
   "name": "writing to a file reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat method is used to write to a file?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "fa8477e9-9ab4-9977-570e-b975cdc593a3",
     "correct": true,
     "answer": "write"
    },
    {
     "_id": "5159b3db-395c-8367-02df-a888b7ff5a43",
     "correct": false,
     "answer": "println"
    },
    {
     "_id": "9df21a80-728a-c577-42d4-370f5e1d01f8",
     "correct": false,
     "answer": "writeln"
    },
    {
     "_id": "1b51eb12-d36f-a9ef-3f8e-f304f376253f",
     "correct": false,
     "answer": "writelines"
    }
   ],
   "guidance": "The `write` method is used to write text to a file in Java.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Writing to a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/Writing.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Writing.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the method used to write strings to a text file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1881541547",
  "source": {
   "name": "more writing to files reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nYou want to write the following text to a file:\n\n```\nOne upon a time\nIn a land far, far away\nLived a king and queen\n```\n\nAssume that `writer` is a `FileWriter` object. Select all of the valid ways you can do this. **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "568fcd22-3929-d29c-7b8b-19f77827fe6e",
     "correct": true,
     "answer": "```java\nString text1 = \"Once upon a time\\n\";\nString text2 = \"In a land far, far away\\n\";\nString text3 = \"Lived a king and queen\\n\";\nwriter.write(text1);\nwriter.write(text2);\nwriter.write(text3);\n```"
    },
    {
     "_id": "0acae752-8fd4-b82e-574a-765ad2ceb88f",
     "correct": false,
     "answer": "```java\nString text1 = \"Once upon a time\";\nString text2 = \"In a land far, far away\";\nString text3 = \"Lived a king and queen\";\nwriter.write(text1);\nwriter.write(text2);\nwriter.write(text3);\n```"
    },
    {
     "_id": "81337b74-a574-4c9f-cebe-f417190cfe49",
     "correct": true,
     "answer": "```java\nString text = \"Once upon a time\\nIn a land far, far away\\nLived a king and queen\";\nwriter.write(text);\n```"
    },
    {
     "_id": "445bb91b-dcc2-6eb2-2eff-c4893b7cf674",
     "correct": false,
     "answer": "```java\nString text1 = \"Once upon a time\\n\";\nString text2 = \"In a land far, far away\\n\";\nString text3 = \"Lived a king and queen\\n\";\nwriter.write(text1, text2, text3);\n```"
    },
    {
     "_id": "0a898994-c4a5-60c7-bbca-0044e32bbe38",
     "correct": true,
     "answer": "```java\nString text1 = \"Once upon a time\";\nString text2 = \"In a land far, far away\";\nString text3 = \"Lived a king and queen\";\nwriter.write(text1);\nwriter.newLine();\nwriter.write(text2);\nwriter.newLine();\nwriter.write(text3);\n```"
    }
   ],
   "guidance": "## Correct Answers\nThe correct answers are:\n\n```java\ntext1 = \"Once upon a time\\n\";\ntext2 = \"In a land far, far away\\n\";\ntext3 = \"Lived a king and queen\\n\";\nwriter.write(text1);\nwriter.write(text2);\nwriter.write(text3);\n```\nEach string has a newline character at the end.\n\n```java\ntext = \"Once upon a time\\nIn a land far, far away\\nLived a king and queen\";\nwriter.write(text);\n```\nThe string uses two newline characters to write the text over three lines.\n\n```java\nString text1 = \"Once upon a time\";\nString text2 = \"In a land far, far away\";\nString text3 = \"Lived a king and queen\";\nwriter.write(text1);\nwriter.newLine();\nwriter.write(text2);\nwriter.newLine();\nwriter.write(text3);\n```\nThe above code uses the `newLine` method to write a newline separator in the file.\n\n## Incorrect Answers\nThe following code snippet is **not correct** because there are no newline characters. All three strings would be on the same line.\n\n```java\nString text1 = \"Once upon a time\";\nString text2 = \"In a land far, far away\";\nString text3 = \"Lived a king and queen\";\nwriter.write(text1);\nwriter.write(text2);\nwriter.write(text3);\n```\n\nThe following code snippet is **not correct** because the `write` method takes just a string or a string and two integers. In the code below, three strings are passed to the `writer` method.\n\n```java\nString text1 = \"Once upon a time\\n\";\nString text2 = \"In a land far, far away\\n\";\nString text3 = \"Lived a king and queen\\n\";\nwriter.write(text1, text2, text3);\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Writing to a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/Multiline.java",
     "code/files/MoreWriting.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Multiline.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT write properly formatted text to a file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3027494163",
  "source": {
   "name": "file basics reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhy is it preferable to use `BufferedWriter` as opposed to just `FileWriter`?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "7da6d2b2-56d3-09d7-eec8-f3e0829e3ab3",
     "correct": true,
     "answer": "`BufferedWriter` writes to memory, which is faster than writing directly to disk."
    },
    {
     "_id": "bb07ad6b-c61e-eabf-dd89-9c3dc08fff41",
     "correct": false,
     "answer": "`FileWriter` is no longer supported by Java."
    },
    {
     "_id": "32eac220-65cb-12d6-c3da-5b0ca2b91b11",
     "correct": false,
     "answer": "`BufferedWriter` writes directly to disk, which is faster than writing to memory."
    },
    {
     "_id": "48d65a9d-5ea0-c5cc-0b87-aa3e358d4bca",
     "correct": false,
     "answer": "There is no class called `FileWriter` in Java."
    }
   ],
   "guidance": "Remember, reading and writing to memory is much faster than reading or writing to disk. So using `BufferedWriter` will be faster than `FileWriter` because `BufferedWriter` writes to memory while `FileWriter` writes to disk.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Buffers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/FileBasics.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/FileBasics.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT explain why buffers are useful"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3874763106",
  "source": {
   "name": "appending to a file reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below with words from the dropdown menu.",
   "showValues": true,
   "text": "<<<Writing>>> to a file will erase its contents before adding the string.\n<<<Appending>>> to a file will keep its contents and add the string at the end.",
   "distractors": "Adding\n",
   "guidance": "**Writing** to a file will overwrite it. That means all existing content will be replaced with the new content.\n**Appending** to a file keeps the existing content and adds the new content at the end of the file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Appending to a File"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/Append.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Append.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between writing and appending to a file",
   "tokens": {
    "blank": [
     "Writing",
     "Appending"
    ],
    "text": [
     0,
     " to a file will erase its contents before adding the string.\n",
     0,
     " to a file will keep its contents and add the string at the end."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4064983796",
  "source": {
   "name": "writing a file formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program that writes the following information to the file `tongueTwister.txt`.\n\n```\nPeter Piper picked a peck of pickled peppers\nA peck of pickled peppers Peter Piper picked\nIf Peter Piper picked a peck of pickled peppers\nWhere’s the peck of pickled peppers Peter Piper picked?\n```",
   "initial": "String path = &quot;tongueTwister.txt&quot;;\ntry {\n  BufferedWriter writer = new BufferedWriter(new FileWriter(path));\n  writer.write(&quot;Peter Piper picked a peck of pickled peppers\\n&quot;);\n  writer.write(&quot;A peck of pickled peppers Peter Piper picked\\n&quot;);\n  writer.write(&quot;If Peter Piper picked a peck of pickled peppers\\n&quot;);\n  writer.write(&quot;Where’s the peck of pickled peppers Peter Piper picked?&quot;);\n  writer.close();\n} catch (IOException e) {\n  System.out.println(e);\n}",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\"}",
   "grader": "1",
   "guidance": "Here is the correct answer:\n\n```java\nString path = \"tongueTwister.txt\";\ntry {\n  BufferedWriter writer = new BufferedWriter(new FileWriter(path));\n  writer.write(\"Peter Piper picked a peck of pickled peppers\\n\");\n  writer.write(\"A peck of pickled peppers Peter Piper picked\\n\");\n  writer.write(\"If Peter Piper picked a peck of pickled peppers\\n\");\n  writer.write(\"Where’s the peck of pickled peppers Peter Piper picked?\");\n  writer.close();\n} catch (IOException e) {\n  System.out.println(e);\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Write to a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate writing to a file"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3435269715",
  "source": {
   "name": "writing to a file formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume that you have the text file `quotes.txt`. Rearrange the code blocks below to create a program that will add the following text to the file. Your program should not alter any information already in the text file. This quote should be on its own line in the file. \n\n```text\n\"The time is always right to do what is right.\"\n```\n\n**Note**, not all of the code blocks will be used.",
   "initial": "String path = &quot;quotes.txt&quot;;\ntry {\n  BufferedWriter writer = new BufferedWriter(new FileWriter(path, true));\n  String text = &quot;The time is always right to do what is right.&quot;;\n  writer.newLine();\n  writer.write(text);\n  writer.close();\n} catch (IOException e) {\n  System.out.println(e);\n}\ntry(BufferedWriter writer = new BufferedWriter(new FileWriter(path))) {   #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Here is the solution:\n\n```java\nString path = \"quotes.txt\";\ntry {\n  BufferedWriter writer = new BufferedWriter(new FileWriter(path, true));\n  String text = \"The time is always right to do what is right.\";\n  writer.newLine();\n  writer.write(text);\n  writer.close();\n} catch (IOException e) {\n  System.out.println(e);\n}\n```\n\nThere are two important ideas to keep in mind. One, you do not want to overwrite the file, so you need to append to the file. Be sure to select the `try` statement that has the Boolean `true`. Two, you want the quote to appear on its own line, so you need to call the `newLine` method before the `write` method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Appending to a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT append a string to a file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1392982459",
  "source": {
   "name": "reading question skip method",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume that `reader` is a `BufferedReader` object and that the first line of a text file has 22 characters.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "b74f68d8-7c7c-7c15-60b4-0daae9910980",
     "correct": true,
     "answer": "```java\nreader.skip(20);\nSystem.out.println(reader.readLine());\n```"
    },
    {
     "_id": "b5d2cd71-1248-0da7-38d1-f6b643b0b90b",
     "correct": false,
     "answer": "```java\nreader.skip(23);\nSystem.out.println(reader.readLine());\n```"
    },
    {
     "_id": "87134a16-199a-62bf-9360-de69b2423d0e",
     "correct": true,
     "answer": "```java\nreader.skip(17);\nSystem.out.println(reader.readLine());\n````"
    },
    {
     "_id": "d84e3997-dc8d-2c6e-e964-388411bd0a42",
     "correct": false,
     "answer": "```java\nreader.skip(-1);\nSystem.out.println(reader.readLine());\n```"
    }
   ],
   "guidance": "The correct answers are those where the `skip` method has an argument that is positive and less than 22 (the number of characters in the line). When the argument is greater than 22, Java will return text from the second line of the file. Java will return an error if the argument is negative.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Skip method"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Reading a File"
     }
    ],
    "files": [
     "code/files/Skip.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Skip.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the skip method to ignore a set of characters when reading a file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1012654483",
  "source": {
   "name": "reading question reading a file",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the true statement about reading files in Java.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "0f712637-137a-e2d7-213a-fcfa75365fe2",
     "correct": true,
     "answer": "The `readLine` method reads from the file until it encounters a newline character."
    },
    {
     "_id": "967b4cff-b064-0c8e-3c62-2b03703a2c89",
     "correct": false,
     "answer": "The `readLine` method reads the entire file at once."
    },
    {
     "_id": "eb41b960-7bea-96c5-7922-35698985f8d7",
     "correct": false,
     "answer": "The `read` method reads from the file until it encounters a newline character."
    },
    {
     "_id": "4a7ae184-36b8-90f1-16b7-ef87e89c7425",
     "correct": false,
     "answer": "The `read` method reads the entire file at once."
    }
   ],
   "guidance": "The `readLine` method reads from the file until it comes across a newline character. The `read` method reads only one character at a time.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Reading a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/Read.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Read.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define what the readLine method does"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3272895920",
  "source": {
   "name": "reading question file iteration",
   "showName": false,
   "instructions": "## Reading Question\n\nWhy do the examples on this page use a while loop instead of a for loop?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "a3f0a49f-a2db-13d1-5986-0f51b412bec7",
     "correct": true,
     "answer": "We want to iteration until a condition is met (the end of the file) as opposed to iterating a specific number of times."
    },
    {
     "_id": "a8a8c82a-434e-8307-ce5b-29c5e1c3e213",
     "correct": false,
     "answer": "Java throws an error when reading a file with a for loop."
    },
    {
     "_id": "1e3c1719-90cd-a4fa-44d7-33d8d4a58367",
     "correct": false,
     "answer": "For loops are slower than while loops."
    }
   ],
   "guidance": "The correct answer is: \n\n```\nYou want to iteration until a condition is met (the end of the file) as opposed to iterating a specific number of times.\n```\n\nWe do not know how many lines of text there are in a file. A for loop is not a good choice because it runs a specified number of times. Instead, use a while loop to test for the end of the file. This way your loop runs the correct amount of iterations.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File Iteration"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/FileIteration.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/FileIteration.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT explain why a while loop is preferable to a for loop when iterating over a file"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2176276099",
  "source": {
   "name": "reading question tokens",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Tokens {\n  public static void main(String args[]) {\n    String path = \"myFile.txt\";\n\n      //your code goes here\n   \n  }\n}\n```\n\nArrange the blocks below to read a file and create tokens for each word. **Hint**, not all of the blocks will be used.",
   "initial": "try {\n  BufferedReader reader = new BufferedReader(new FileReader(path));\n  String line = reader.readLine();\n  StringTokenizer tokens = new StringTokenizer(line, &quot; &quot;);\n  while (tokens.hasMoreTokens()) {\n    System.out.println(tokens.nextToken());\n  }\n} catch (IOException e) {\n  System.out.println(e);\n}\nStringTokenizer tokens = new StringTokenizer(line, &quot;\\n&quot;);  #distractor\nwhile (tokens.nextToken()) {  #distractor\nSystem.out.println(tokens.hasMoreTokens());  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\ntry {\n  BufferedReader reader = new BufferedReader(new FileReader(path));\n  String line = reader.readLine();\n  StringTokenizer tokens = new StringTokenizer(line, \" \");\n  while (tokens.hasMoreTokens()) {\n    System.out.println(tokens.nextToken());\n  }\n} catch (IOException e) {\n  System.out.println(e);\n}\n```\n\nThe method `hasMoreTokens` returns a Boolean value; so it should be used in the while loop. The `nextToken` method returns a string; so it should be used in the print statement.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Tokens"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Reading a file"
     }
    ],
    "files": [
     "code/files/Tokens.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Tokens.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create tokens from a string read from a file"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4088463411",
  "source": {
   "name": "read and write reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nLook at the two code examples carefully. Fill in the blanks below based on these code examples.\n\n## Code Example 1\n```java\nString readPath = \"myFile1.txt\";\nString writePath = \"myFile2.txt\";\nBufferedReader reader = new BufferedReader(new FileReader(readPath));\nBufferedWriter writer = new BufferedWriter(new FileWriter(writePath));\n```\n\n## Code Example 2\n```java\nString readPath = \"myFile4.txt\";\nString writePath = \"myFile3.txt\";\nBufferedReader reader = new BufferedReader(new FileReader(readPath));\nBufferedWriter writer = new BufferedWriter(new FileWriter(writePath));\n```",
   "showValues": true,
   "text": "In **Code Example 1**, Java reads from the file stored in the variable <<<myFile1.txt>>> and writes to file stored in variable <<<myFile2.txt>>>.\n\nIn **Code Example 2**, Java reads from the file stored in the variable <<<myFile4.txt>>> and writes to file stored in variable <<<myFile3.txt>>>.",
   "distractors": "",
   "guidance": "In the first example, Java is reading from `myFile1.txt` and writing to `myFile2.txt`.\nIn the second example, Java is reading from `myFile4.txt` and writing to `myFile3.txt`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Read a file, write to a file"
     }
    ],
    "files": [
     "code/files/ReadWrite.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/ReadWrite.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine which file is being read and which file is being written to",
   "tokens": {
    "blank": [
     "myFile1.txt",
     "myFile2.txt",
     "myFile4.txt",
     "myFile3.txt"
    ],
    "text": [
     "In **Code Example 1**, Java reads from the file stored in the variable ",
     0,
     " and writes to file stored in variable ",
     0,
     ".\n\nIn **Code Example 2**, Java reads from the file stored in the variable ",
     0,
     " and writes to file stored in variable ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3262692339",
  "source": {
   "name": "reading a file formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nimport java.io.*;\n\npublic class ReadProblem {\n  public static void main(String args[]) {\n    String path = \"myFile.txt\";\n    try {\n      \n      //your code goes here\n\n    } catch (IOException e) {\n      System.out.println(e);\n    }\n  }\n}\n```\n\nRearrange the code blocks below so that the program will print the text file as you would expect it to appear. **Note**, not all of the code blocks will be used.",
   "initial": "BufferedReader reader = new BufferedReader(new FileReader(path));\nwhile(reader.ready()) {\n  System.out.println(reader.readLine());\n}\nreader.close();\nBufferedWriter reader = new BufferedWriter(new FileWriter(path)); #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nBufferedReader reader = new BufferedReader(new FileReader(path));\nwhile(reader.ready()) {\n  System.out.println(reader.readLine());\n}\nreader.close();\n```\n\nYou do not use the `BufferedWriter` class when reading a document.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Reading a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT print each line of a text file"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1173360768",
  "source": {
   "name": "formative assessment 2 reading a file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nimport java.io.*;\n\npublic class ReadProblem {\n  public static void main(String args[]) {\n    String path = \"myFile.txt\";\n    try {\n      \n      //your code goes here\n\n    } catch (IOException e) {\n      System.out.println(e);\n    }\n  }\n}\n```\n\nFill in the blanks below so the code reads the file and prints each line of the text file.",
   "showValues": true,
   "text": "```java\nBufferedReader reader = new BufferedReader(new FileReader(path));\nString <<<currentLine>>> = reader.readLine();\nwhile(currentLine <<<!=>>> null) {\n    System.out.println(<<<currentLine>>>);\n    currentLine = reader.<<<readLine()>>>;\n}\nreader.close();\n```",
   "distractors": "==\nread()\nline",
   "guidance": "The correct answer is:\n\n```java\nBufferedReader reader = new BufferedReader(new FileReader(path));\nString currentLine = reader.readLine();\nwhile(currentLine != null) {\n    System.out.println(currentLine);\n    currentLine = reader.readLine();\n}\nreader.close();\n```\n\n* You do not use `==` because `null` means you have reached the end of the file. You should keep reading as long as you have not reached the end of the file. Use `!=` instead.\n* You do not use `read()` because this only reads one character at a time. It would not output the text as you would expect.\n* You do not use `line` because this variable name is not used in the given code.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Reading a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "SWBAT iterate through a text file without the ready method",
   "tokens": {
    "blank": [
     "currentLine",
     "!=",
     "currentLine",
     "readLine()"
    ],
    "text": [
     "```java\nBufferedReader reader = new BufferedReader(new FileReader(path));\nString ",
     0,
     " = reader.readLine();\nwhile(currentLine ",
     0,
     " null) {\n    System.out.println(",
     0,
     ");\n    currentLine = reader.",
     0,
     ";\n}\nreader.close();\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-667076594",
  "source": {
   "name": "csv files reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the variable `path` contains the file path to a CSV file. What is the proper way to declare an object work with CSV files using Opencsv?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "f37f6e82-63cc-ecac-cce8-e459ea957b6b",
     "correct": true,
     "answer": "CSVReader reader = new CSVReader(new FileReader(path));"
    },
    {
     "_id": "c8a761c6-4ae5-8ef8-3db6-c7494324571b",
     "correct": false,
     "answer": "BufferedReader reader = new BufferedReader(new FileReader(path));"
    },
    {
     "_id": "729e041c-0f4f-59d4-724e-6fe307ab41cf",
     "correct": false,
     "answer": "CSVReader reader = new CSVReader(new BufferedReader(path));"
    },
    {
     "_id": "783088ef-28dd-fbb6-ff1c-12f73ff1be60",
     "correct": false,
     "answer": "FileReader reader = new FileReader(new CSVReader(path));"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nCSVReader reader = new CSVReader(new FileReader(path));\n```\n\n* The `BufferedReader` class is not used when working with CSV files\n* The `CSVReader` class is wrapped around a `Filewriter` object",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Reading a CSV file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "CSV Files"
     }
    ],
    "files": [
     "code/files/CsvFiles.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/CsvFiles.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT declare a CSVReader object"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-956065085",
  "source": {
   "name": "printing an csv file reading question",
   "showName": false,
   "instructions": "## Reading Question\nHow is the data for each row in a CSV file stored once it is read?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "a5f8b059-7730-d3e1-918e-ae46b2b23d0d",
     "correct": true,
     "answer": "As an array of strings"
    },
    {
     "_id": "67cf82ef-32c2-ac7d-14bb-300571b021fd",
     "correct": false,
     "answer": "As a string"
    },
    {
     "_id": "386089dc-049c-9517-d9f2-34e78b01c314",
     "correct": false,
     "answer": "As a list of booleans"
    },
    {
     "_id": "2bb45f4a-002c-f291-ceb6-8eb8516e895e",
     "correct": false,
     "answer": "As floats and ints"
    }
   ],
   "guidance": "Once a CSV has been read, each row is stored as an array of strings. So manipulating CSV information is based on working with arrays (indexing, slicing, methods, functions, etc.) and working with strings (printing, methods, etc.).",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/files/CsvFiles.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/CsvFiles.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify how CSV data is stored once it has been read"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-221700422",
  "source": {
   "name": "what does a delimiter do",
   "showName": true,
   "instructions": "## Reading Question\n\nWhat is the purpose of a delimiter?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "0352f866-49c2-ef0d-ac1d-ac3917f3b723",
     "correct": true,
     "answer": "A delimiter is a character that separates units of data."
    },
    {
     "_id": "ec9f7bda-67ea-c2f3-101b-43f1c35f1adf",
     "correct": false,
     "answer": "A delimiter is a character that marks the end of a line."
    },
    {
     "_id": "24384492-42ca-33b0-95e3-5bca2caef5d1",
     "correct": false,
     "answer": "A delimiter is a character that begins a line of data."
    },
    {
     "_id": "8d51e177-7a05-1367-17e7-c281c90f6123",
     "correct": false,
     "answer": "A delimiter is a character that marks the end of a file."
    }
   ],
   "guidance": "A delimiter is a character that separates units of data. In a CSV file, the default delimiter is a comma. Here is an example of a file with a comma delimiter:\n\nName,Breed\nBear,German Shepherd\nRoxy,Black Lab\nBella,Yorkie\nLucky,Terrier",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Delimiter"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/files/Delimiters.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Delimiters.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a delimiter"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2823084271",
  "source": {
   "name": "reading/writing to CSV files",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "The <<<CSVReader>>> object is used to read a CSV file.\nThe <<<CSVWriter>>> object is used to write to a CSV file.",
   "distractors": "BufferedReader\nBufferedWriter",
   "guidance": "The `CSVReader` object is used to read CSV files, while the `CSVWriter` object is used to write to a CSV file. The `BufferedReader` and `BufferedWriter` objects are used to read and write to text files.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Reading and writing objects"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/files/WritingCsv.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/WritingCsv.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the objects used to read and write to CSV files",
   "tokens": {
    "blank": [
     "CSVReader",
     "CSVWriter"
    ],
    "text": [
     "The ",
     0,
     " object is used to read a CSV file.\nThe ",
     0,
     " object is used to write to a CSV file."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1266046220",
  "source": {
   "name": "csv formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume that the variable `path` contains a file path to a CSV file. Rearrange the code blocks below to read the file and print the contents line by line. **Note**, not all of the code blocks will be used.",
   "initial": "CSVReader reader = new CSVReader(new FileReader(path));\nfor (String[] row : reader) {\n  for (String item : row) {\n    System.out.print(item + &quot; &quot;);\n  }\n  System.out.println();\n}\nBufferedReader reader = new BufferedReader(new FileReader(path)); #distractor\nfor (String row : reader) { #distractor\nSystem.out.println(item + &quot; &quot;); #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nCSVReader reader = new CSVReader(new FileReader(path));\nfor (String[] row : reader) {\n  for (String item : row) {\n    System.out.print(item + \" \");\n  }\n  System.out.println();\n}\n```\n\n* Use a `CSVReader` object when reading a CSV file, which is why `BufferedReader` is incorrect.\n* Each row read from the file is an array of strings which is why `String row` is incorrect. \n* We want to print each row as it appears in the CSV file. That means each element in the array `row` should be printed on the same line. That is why `System.out.println(item + \" \");` is incorrect.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "CSV Files"
     }
    ],
    "files": [
     "code/files/WritingCsv.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/WritingCsv.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate over a CSV and print each row"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-543342311",
  "source": {
   "name": "delimiter formative assessment",
   "showName": false,
   "instructions": "## Formative Assessment\n\nYou are reading from a CSV file that uses `|` as the delimiter. How would separate the string `row` into an array of tokens with the delimiter?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "230aa7c4-644d-9b28-994e-4b20010f05bd",
     "correct": true,
     "answer": "row.split(\"|\")"
    },
    {
     "_id": "f0c6a71c-e9ee-3610-4345-7da35d362d3b",
     "correct": false,
     "answer": "row.separate(\"|\")"
    },
    {
     "_id": "be7e79b8-6e66-2aec-37a3-889b53b5aa5a",
     "correct": false,
     "answer": "row.split('|')"
    },
    {
     "_id": "147d1a82-bf39-6f0f-1a09-8b5e4d61a4b1",
     "correct": false,
     "answer": "line.split(\"|\")"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nrow.split(\"|\")\n```\n\n* The method is `split`, which is why `separate` is incorrect\n* The `split` method splits a string based on a string not a character, which is why `'|'` is incorrect\n* The string to be split is `row`, which is why `line` is incorrect",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Delimiters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/files/WritingCsv.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/WritingCsv.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT to parse a CSV file with a delimiter that is not a comma"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3471810899",
  "source": {
   "name": "files lab question 1",
   "showName": false,
   "instructions": "## Lab Question\n\nWhy does the code above say `System.out.println(text.get(0))` instead of `System.out.println(text)`?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "d1f6ed88-8d17-8f2b-c364-7715a4c43359",
     "correct": true,
     "answer": "The variable `text` is an ArrayList of strings. If you print `text`, it will print the entirety of the list — including square brackets. Printing `text.get(0)` will print just the text, no square brackets."
    },
    {
     "_id": "c7cae6bc-5fd7-0ec4-1579-e83413a66564",
     "correct": false,
     "answer": "Both `System.out.println(text.get(0))` and `System.out.println(text)` print the same thing."
    },
    {
     "_id": "b1d63e8e-5c19-68ed-2197-25e1eb377276",
     "correct": false,
     "answer": "Using `System.out.println(text)` will cause an error."
    },
    {
     "_id": "8882ce80-af1f-a12b-7bc6-2d006322ca29",
     "correct": false,
     "answer": "Text files require `System.out.println(text.get(0))` while CSV files require `System.out.println(text)`."
    }
   ],
   "guidance": "The variable `text` is an ArrayList of strings. If you print `text`, it will print the entirety of the list — including square brackets. Printing `text.get(0)` will print just the first element in the ArrayList, no square brackets. If you want the text, print the string inside the list, not the list itself.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Read a file"
     }
    ],
    "files": [
     "code/files/Lab1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Lab1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT demonstrate how to read the contents of a file into a variable and then manipulate the text in the variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3332130344",
  "source": {
   "name": "lab 2 lab question",
   "showName": false,
   "instructions": "## Lab Question\n\nSelect the correct line of code that would allow you to append to a text file rather than overwriting it.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "5859559a-5d2c-8492-4967-089a327136aa",
     "correct": true,
     "answer": "BufferedWriter writer = new BufferedWriter(new FileWriter(path, true));"
    },
    {
     "_id": "a4d0bd67-33d1-95a3-8ec4-e3761e2acc4f",
     "correct": false,
     "answer": "BufferedWriter writer = new BufferedWriter(new FileWriter(path));"
    },
    {
     "_id": "9f73219b-68ba-1c33-132b-d6eda59b9beb",
     "correct": false,
     "answer": "BufferedWriter writer = new BufferedWriter(new FileWriter(path, append));"
    },
    {
     "_id": "8573cab3-2ddc-8c2c-5a10-7e2bbef7530c",
     "correct": false,
     "answer": "BufferedWriter writer = new BufferedWriter(new FileWriter(true, path));"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nBufferedWriter writer = new BufferedWriter(new FileWriter(path, true));\n```\n\nThe boolean value `true` is used after the file path in the `FileWriter` object.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Writing to files"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/Lab2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Lab2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT demonstrate how to append to a text file"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3298104747",
  "source": {
   "name": "lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the variable `line` is a string read from a text file. Drag the blocks below so that you create tokens for each word using a `StringTokenizer` object. **Important**, not all of the blocks will be used.",
   "initial": "StringTokenizer tokens = new StringTokenizer(line, &quot; &quot;);\nwhile (tokens.hasMoreTokens()) {\n  System.out.println(tokens.nextToken());\n}\nwhile (tokens.ready()) { #distractor\nSystem.out.println(tokens.token()); #distractor\nStringTokenizer tokens = new StringTokenizer(line, space); #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nStringTokenizer tokens = new StringTokenizer(line, \" \");\nwhile (tokens.hasMoreTokens()) {\n  System.out.println(tokens.nextToken());\n}\n```\n\n* The `StringTokenizer` object uses the `hasMoreTokens` method, not the `ready` method.\n* The `StringTokenizer` object uses the `nextToken` method to get the next token, not the `token` method.\n* The `StringTokenizer` object uses the literal string `\" \"` instead of the word `space` to represent a space.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Tokens"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/Lab3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Lab3.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create tokens from a string read from a file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1705630447",
  "source": {
   "name": "lab 4 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat would happen if you removed the following line of code from the Caesar cipher?\n\n```java\ndestination.newLine();\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "1ba0431e-899b-33f3-6ff6-15e1ecaba728",
     "correct": true,
     "answer": "The resulting text would be one long sentence as there would be no newline characters. The `write` method does not add a newline character."
    },
    {
     "_id": "4acea14c-ff9a-d199-abdf-0b269be0b677",
     "correct": false,
     "answer": "Nothing, the output would be the same."
    },
    {
     "_id": "7ac63661-0918-f311-48d7-8f84bac7a5b4",
     "correct": false,
     "answer": "Removing that line of code would remove the blank line between paragraphs."
    }
   ],
   "guidance": "When you read line from a text file, Java will read up until the newline character. The newly read line does not include the newline character. So when you write the same line to a new file, you need to add a newline character to preserve the original format.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Writing to a file"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Files"
     }
    ],
    "files": [
     "code/files/Lab4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Lab4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain why it is important to manually new lines when writing to a file."
  }
 },
 {
  "type": "test",
  "taskId": "test-1319880366",
  "source": {
   "name": "lab challenge",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "bash .guides/secure/files/labChallenge.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 20,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/files/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4082543202",
  "source": {
   "name": "lab challenge",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "java -cp code/files LabChallenge",
   "preExecuteCommand": "javac code/files/LabChallenge.java",
   "guidance": "Here is one possible solution:\n\n```java\nimport java.io.*;\nimport java.util.ArrayList;\n\npublic class LabChallenge {\n  public static void main(String args[]) {\n    \n    String path = args[0];\n    //add code below this line\n    \n    ArrayList<String> text = new ArrayList<String>();\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(path));\n      while (reader.ready()) {\n        text.add(reader.readLine());\n      }\n      reader.close();\n    } catch (IOException e) {\n      System.out.println(e);\n    } finally {\n      System.out.println(\"Finished reading a file.\\n\");\n    }\n    for (String line : text) {\n      String replaceLine = line.replace(\"Burma\", \"Myanmar\");\n      System.out.println(replaceLine);\n    }\n    \n    //add code above this line \n  }\n}\n```\n\nThis solution performs the following steps:\n* Create an ArrayList\n* Iterate over the text file\n* Read a line from the text file and append it to the ArrayList\n* Once the file has been read, iterate over the elements in the ArrayList\n* Use the `replace` method to replace the word `Burma` with `Myanmar`\n* Print this new line",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": true,
   "sequence": [
    {
     "arguments": ".guides/secure/files/labChallengeText1.txt",
     "input": "",
     "output": "My name is Myanmar.\nMyanmar is 10 years old.\nHello Myanmar.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure/files/labChallengeText2.txt",
     "input": "",
     "output": "Nothing left to do but Myanmar, Myanmar, Myanmar.\nMyanmar gone and he ain't never coming back.\nDark Myanmar rising.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure/files/labChallengeText3.txt",
     "input": "",
     "output": "Take me out to the Myanmar\nBuy me some Myanmar and Myanmar\nRoot, root for the Myanmar",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/files/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1933829280",
  "source": {
   "name": "exercise 1 files",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "java -cp code/files Exercise1",
   "preExecuteCommand": "javac code/files/Exercise1.java",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 20,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": true,
   "sequence": [
    {
     "arguments": ".guides/secure/files/exercise1Test1.txt",
     "input": "",
     "output": "4 lines\n245 characters",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure/files/exercise1Test2.txt",
     "input": "",
     "output": "7 lines\n934 characters",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure/files/exercise1Test3.txt",
     "input": "",
     "output": "0 lines\n0 characters",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/files/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 }
]