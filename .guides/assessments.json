[
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2074845473",
  "source": {
   "name": "If Else",
   "showName": true,
   "instructions": "Drag the appropriate code blocks into the box below. Your program should check to see if a number is even and print \"Even\". If the number is odd, then print \"Odd\". Assume the variable `x` represents the number to be tested.",
   "initial": "if(x % 2 == 0)\n    {System.out.print(\"Even\");}\nelse\n    {System.out.print(\"Odd\");}\nif(x % 2 = 0) #distractor\nif(x / 2 == 0) #distractor\nSystem.out.print(Even); #distractor\nSystem.out.print(Odd); #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "Here is the correct answer:\n\n```java\nif(x % 2 == 0)\n    {System.out.print(\"Even\");}\nelse\n    {System.out.print(\"Odd\");}\n```\n\nHere is why the other options are incorrect:\n\n* `if x % 2 = 0` - The equality operator (`==`) is not used.\n* `if x / 2 == 0` - The `/` operator is division. To be even, there can be no remainder. The modulo operator (`%`) must be used instead.\n* `System.out.print(Even);` - The quotation marks are missing. Without them, Java will try to print the variable `Even`, which has not been declared. \n* `System.out.print(Odd);` - The quotation marks are missing. Without them, Java will try to print the variable `Odd`, which has not been declared. ",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/conditionals/Lab_IfElse.java",
     "code/selection/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_IfElse.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT construct an if else statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3649559415",
  "source": {
   "name": "If Statements",
   "showName": false,
   "instructions": "Select all of the statements below that are true with regards to if statements. \n\n**Hint:** There is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ae9339af-fb42-8d8e-417c-fb46b58232bf",
     "correct": true,
     "answer": "If statements only ask if a boolean expression is true."
    },
    {
     "_id": "3acea470-c092-f47c-fa6f-d2e9cda607a7",
     "correct": false,
     "answer": "If statements will perform a set of actions if the boolean expression is false."
    },
    {
     "_id": "2aefb536-6703-74bd-6e97-314c0d90dd7b",
     "correct": false,
     "answer": "If statements provide the most precision of all the conditional statements."
    },
    {
     "_id": "279c31cc-b47f-1756-d5ef-c97da61a6514",
     "correct": true,
     "answer": "If statements are the simplest of all the conditionals."
    }
   ],
   "guidance": "The correct answers are:\n\n```\nIf statements only ask if a boolean expression is true.\n\nIf statements are the simplest of all the conditionals.\n```\n\nIf statements can only ask if a boolean expression is true. An else statement takes into account a false boolean expression.\n\nIf statements are the simplest because they ignore when a boolean expression is false, and they do not ask subsequent boolean expressions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Pyh"
     },
     {
      "name": "Category",
      "value": "If statement"
     }
    ],
    "files": [
     "code/conditionals/Lab_IfStatement.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_IfStatement.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the characteristics of an if statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2919609863",
  "source": {
   "name": "Make a Triangle",
   "showName": true,
   "instructions": "Construct a program by drag&amp;dropping and reordering lines from the left to the right. You can change the loop header (<span class=\"jsparson-toggle\"></span>) by clicking them. The constructed program should draw a triangle like shown below.\n\nHint: You need to indent the lines of code within the loop by dragging the blocks slightly to the right. We'll talk about this next.",
   "initial": "REPEAT $$toggle::2::3::4$$ TIMES\nforward(100)\nleft(120)\nENDREPEAT\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"turtleModelCode\": \"modelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\",\n  \"executable_code\": \"for i in range(0,3):\\nmyTurtle.forward(100)\\nmyTurtle.left(120)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5",
   "guidance": "The loop header is setting up how many times code is repeated. In the case of a triangle, it makes sense to repeat 3 times - one for each side.\n\n```\nREPEAT 3 TIMES\n  forward(100)\n  left(120)\nENDREPEAT\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Loop Headers"
     },
     {
      "name": "Programming Language",
      "value": "Psuedo"
     },
     {
      "name": "Category",
      "value": "Loops"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT... define a loop header"
  },
  "linkedId": "5038b41f-51e1-4de2-bba9-0435fc132d47",
  "libraryId": "a6135984-c66a-483f-9eb2-48cdba182812",
  "version": 0
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1264740481",
  "source": {
   "name": "Make a Square",
   "showName": true,
   "instructions": "Construct a program by drag&amp;dropping and reordering lines from the left to the right. You can change the loop header (<span class=\"jsparson-toggle\"></span>) by clicking them. The constructed program should draw a square like shown below. Be sure to indent the loop body by dragging repeated blocks slightly to the right.",
   "initial": "REPEAT $$toggle::2::3::4$$ TIMES\nforward(100)\nleft(90)\nENDREPEAT\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"modelTurtle.forward(100)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(90)\",\n  \"executable_code\": \"for i in range(0,4):\\nmyTurtle.forward(100)\\nmyTurtle.left(90)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5",
   "guidance": "The loop header is setting up how many times code is repeated. In the case of a square, it makes sense to repeat 4 times - one for each side.\n\nThe loop body are the lines to be repeated, in this case the blocks instructing the turtle to turn and step forward.\n\n```\nREPEAT 4 TIMES\n  forward(100)\n  left(90)\nENDREPEAT\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Category",
      "value": "Loops"
     },
     {
      "name": "Content",
      "value": "Loop Body"
     },
     {
      "name": "Programming Language",
      "value": "Psuedo"
     }
    ],
    "files": [
     "loop.flode"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT... define a loop body"
  },
  "libraryId": "a6135984-c66a-483f-9eb2-48cdba182812",
  "version": 0,
  "linkedId": "5f45c731-8ac5-40c6-bc8a-39bdd9fb9098"
 },
 {
  "type": "test",
  "taskId": "test-2965980592",
  "source": {
   "name": "Fence-Posting Answer",
   "showName": true,
   "instructions": "Click here to see the bug-free flow chart",
   "command": "/bin/true",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "![](.guides/img/fenceSoln.png)",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "fence.flode"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "fence.flode"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2167968400",
  "source": {
   "name": "Loop Vocabulary",
   "showName": true,
   "instructions": "Select the appropriate vocabulary words in the paragraph below.",
   "text": "In code, we use loops to repeat or <<<iterate>>> over sections of code. The <<<loop header>>> indicates how many times the loop will repeat the code. The code section that is repeated is called the <<<loop body>>>.",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "iterate",
     "loop header",
     "loop body"
    ],
    "text": [
     "In code, we use loops to repeat or ",
     0,
     " over sections of code. The ",
     0,
     " indicates how many times the loop will repeat the code. The code section that is repeated is called the ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1835017652",
  "source": {
   "name": "How many repetitions?",
   "showName": true,
   "instructions": "Looking at the psuedo-code below, how many times will the loop repeat?\n\n```\ni = 0;\nloop while i <= 5\n    print(i);\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a808549d-ff49-8b80-25f6-82e574dbb137",
     "correct": false,
     "answer": "4"
    },
    {
     "_id": "e0673c9d-66a3-ac21-5859-66d305a1c788",
     "correct": false,
     "answer": "5"
    },
    {
     "_id": "cd425d6d-bb39-2944-a89b-e2718ae7df0b",
     "correct": false,
     "answer": "6"
    },
    {
     "_id": "dc97bc08-3ee0-5559-e9f0-8015a7ee8826",
     "correct": true,
     "answer": "infinite"
    }
   ],
   "guidance": "`i` is never incremented, so `i` remains `0` forever. Because `i=0` forever, `i<=5` will ALWAYS be true.\n\nWithout the incriminator, we get an infinite loop!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3591130309",
  "source": {
   "name": "What is the output?",
   "showName": true,
   "instructions": "What is the output of the following psuedo-code?\n\n```\ni = 0;\nloop while i < 10\n    i = i + 2;\n    print(i + \",\");\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f52be2d7-c7cf-c811-84e4-78bb3063bf56",
     "correct": false,
     "answer": "0,2,4,6,8"
    },
    {
     "_id": "ee4b10b2-8a26-9023-5442-12fff710589e",
     "correct": false,
     "answer": "0,2,4,6,8,"
    },
    {
     "_id": "18bdba2f-5a19-7cff-849d-73140f3b2bc9",
     "correct": false,
     "answer": "2,4,6,8,10"
    },
    {
     "_id": "ef6389af-113a-b054-fdde-ccf361074cd4",
     "correct": true,
     "answer": "2,4,6,8,10,"
    }
   ],
   "guidance": "Because the print statement is *after* the increment of i, we see values 2-10. Flipping the two lines within the loop body would change the values to 0-8.\n\nBecause we do not use fence-posting, we have an extraneous `,` in our output.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3185531965",
  "source": {
   "name": "For Loop flow",
   "showName": true,
   "instructions": "After completing the loop body, what part of the for loop header is run?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "02056a52-0228-34db-d77e-2a6f318f6148",
     "correct": false,
     "answer": "int i = 10"
    },
    {
     "_id": "85e8fcaa-693d-2843-0ce4-12c0bb9d400d",
     "correct": false,
     "answer": "i >= 0"
    },
    {
     "_id": "37555a97-5218-c552-09f5-bc2a668f6156",
     "correct": true,
     "answer": "i--"
    }
   ],
   "guidance": "Even though it is the last part of the for loop header, the incrementing is the first piece of the header run after an iteration.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/ForLoop.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/ForLoop.java"
     },
     {
      "type": "tutor",
      "panelNumber": 1,
      "content": "code/ForLoop.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-336859680",
  "source": {
   "name": "For Loop Flow",
   "showName": true,
   "instructions": "Re-arrange the blocks below so that is shows the flow of execution for the code:\n```java\nfor(int i = 0; i < 2; i++) {\n    System.out.println(i);\n}\n```\n",
   "initial": "for(int i = 0;\ni < 2;\nSystem.out.println(i);\ni++\ni < 2;\nSystem.out.println(i);\ni++\ni < 2;\nfor(int i = 0; #distractor\ni < 2; #distractor\nSystem.out.println(i); #distractor\ni++ #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"can_indent\": false,\n  \"max_wrong_lines\": 2\n}",
   "grader": "1",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/ForLoop.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/ForLoop.java"
     },
     {
      "type": "tutor",
      "panelNumber": 1,
      "content": "code/ForLoop.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2547412741",
  "source": {
   "name": "Printing - Reading Question 1",
   "showName": true,
   "instructions": "What is wrong with the code snippet below?\n```\nSystem.out.println(Hello world);\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "98269ac4-221e-99c2-a370-5bb9a7a1e43f",
     "correct": false,
     "answer": "Capitalize `print`"
    },
    {
     "_id": "24ba2369-1319-d169-5724-ae922d7b9a84",
     "correct": false,
     "answer": "Use `{}` instead of `()`"
    },
    {
     "_id": "d9d0f578-f0b5-9920-478b-5dedad2afc65",
     "correct": true,
     "answer": "Missing `\"` around `Hello world`"
    },
    {
     "_id": "5b259746-35ab-8daf-e7f7-e85013da0125",
     "correct": false,
     "answer": "Add a `;` at the end of the line of code"
    }
   ],
   "guidance": "After the print command use parentheses and quotation marks around the words to be printed.\n```\nSystem.out.print(\"Hello world\");\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundPrinting1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundPrinting1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2710921318",
  "source": {
   "name": "Printing - Reading Question 2",
   "showName": true,
   "instructions": "Which of the following commands adds a newline character?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0f4cd3f1-1bc1-7bca-c5b7-b3ed441ad84a",
     "correct": false,
     "answer": "`System.out.print(\"Hello\");`"
    },
    {
     "_id": "06080af5-6086-6f81-d3ba-ecc73cc8b1f6",
     "correct": true,
     "answer": "`System.out.println(\"Hello\");`"
    }
   ],
   "guidance": "`System.out.println(\"Hello\");` inserts a new line character after `Hello` which is hard to see when you only print one line of text. However, if you print two lines like:\n```\nSystem.out.println(\"Hello\");\nSystem.out.println(\"World!\");\n```\nIt outputs:\n```\nHello\nWorld!\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundPrinting2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundPrinting2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1191669709",
  "source": {
   "name": "Print Statement",
   "showName": true,
   "instructions": "What does the `System.out.print();` or `print` statement do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d7d80be3-ec5a-1dd2-3dec-7f197270a0a2",
     "correct": false,
     "answer": "Sends your output to the printer"
    },
    {
     "_id": "8c3f2936-de60-039c-ab3b-923944853e61",
     "correct": false,
     "answer": "Sends your output to a file"
    },
    {
     "_id": "47224aaf-0efb-46b5-471b-eb90cec3cd6e",
     "correct": true,
     "answer": "Sends your output to the screen"
    },
    {
     "_id": "9311dd34-afec-1afa-4a22-40bd88277de9",
     "correct": false,
     "answer": "Sends your output to the compiler"
    }
   ],
   "guidance": "The `print` command sends your output to your computer's default output which is the computer console or terminal.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2355446782",
  "source": {
   "name": "Printing with the Newline Character",
   "showName": true,
   "instructions": "Fill in the blank with the missing text that will print the text `Hi!` **with** a newline character?",
   "text": "`System.out.<<<println>>>(\"Hi!\");`",
   "guidance": "To add the newline character, you use the `println` command instead of the `print` command. The code should look like: `System.out.println(\"Hi!\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "println"
    ],
    "text": [
     "`System.out.",
     0,
     "(\"Hi!\");`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-328592840",
  "source": {
   "name": "Variables - Reading Question 1",
   "showName": true,
   "instructions": "Which parts of a variable do *not* change in Java?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "b1beff98-719d-cc43-3796-8bd3cac2bc03",
     "correct": true,
     "answer": "data type"
    },
    {
     "_id": "b1f8b186-381e-4a69-4bc5-859981f8f85f",
     "correct": true,
     "answer": "name"
    },
    {
     "_id": "1a9e1dc1-1581-42e8-ad92-79d34f0e0bfe",
     "correct": false,
     "answer": "value"
    }
   ],
   "guidance": "For each variable, the data type and name of the variable *never* change. The value can be re-assigned as many times as you want!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables1.java"
     },
     {
      "type": "tutor",
      "panelNumber": 1,
      "content": "code/fundamentals/PlaygroundVariables1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3784696113",
  "source": {
   "name": "Variables - int vs double",
   "showName": true,
   "instructions": "Fill in the following with the appropriate vocabulary to explain the difference between a double and an int.",
   "text": "A <<<double>>> is a <<<floating point number>>> meaning it has a <<<decimal>>>, where an <<<int>>> is a <<<whole number>>> meaning it does not have a decimal.",
   "guidance": "A `double` is a floating point number or a rational number meaning it has a decimal or represents a fraction, where an `int` (short for integer) is a whole number meaning it does not have a decimal.\n\nBoth can be positive or negative!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "double",
     "floating point number",
     "decimal",
     "int",
     "whole number"
    ],
    "text": [
     "A ",
     0,
     " is a ",
     0,
     " meaning it has a ",
     0,
     ", where an ",
     0,
     " is a ",
     0,
     " meaning it does not have a decimal."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3562273974",
  "source": {
   "name": "Variables - Booleans RQ",
   "showName": true,
   "instructions": "What is the general rule for boolean values in Java?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "fffe32a5-3fb4-d6e3-24f9-830f2795f75f",
     "correct": true,
     "answer": "Boolean values are case sensitive and must be lowercase."
    },
    {
     "_id": "af3927d1-6442-b597-3ae1-33a7d5018b99",
     "correct": false,
     "answer": "Boolean values are not case sensitive and can be either uppercase or lowercase."
    },
    {
     "_id": "950da155-8c2e-44d8-f8f0-6e775bf686e4",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be uppercase."
    },
    {
     "_id": "7c3ce400-ac2d-3bed-fbfe-57a0811ef3a1",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be all caps."
    }
   ],
   "guidance": "Boolean values in Java are case sensitive and must start with a lowercase letter: `true` or `false`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-78767737",
  "source": {
   "name": "Variables - Strings",
   "showName": true,
   "instructions": "Complete the line of code below so that variable declaration and assignment is correct.",
   "text": "`<<<String>>> var;`\n`var = \"a <<<string>>> is made up of words and num63rs<<<\">>>;`",
   "guidance": "Unlike the previous data types, `String` is capitalized and the value of a String is surrounded by double quotation marks.\n\n```\nString var;\nvar = \"a string is made up of words and num63rs\";\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "String",
     "string",
     "\""
    ],
    "text": [
     "`",
     0,
     " var;`\n`var = \"a ",
     0,
     " is made up of words and num63rs",
     0,
     ";`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1839186458",
  "source": {
   "name": "Declaring Variables",
   "showName": true,
   "instructions": "Which of the following code snippets contain correct variable declerations?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "34add045-19a1-30fe-1590-a921287d1899",
     "correct": false,
     "answer": "```\nint var;\nString var;\n```"
    },
    {
     "_id": "d70b48eb-03de-f36b-0701-7b972ce58971",
     "correct": false,
     "answer": "```\nString var;\nString var;\n```"
    },
    {
     "_id": "a2f56772-5cf8-0a1c-596a-251d9a37d745",
     "correct": false,
     "answer": "```\nString var;\nint var 2;\n```"
    },
    {
     "_id": "9998090e-4e0f-efc2-8edb-4060ae5d6d8b",
     "correct": true,
     "answer": "```\nString var;\nint Var;\n```"
    }
   ],
   "guidance": "Java does not allow different variables to have the same name - regardless of data type.\n\nAdditionally, Java does not allow spaces in variable names - either user `camelCase` or `snake_case` to separate words.\n\nSince Java variables are case sensitive, `var` and `Var` are different variables.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2935644769",
  "source": {
   "name": "Declaring, Initializing, and Assigning Variables",
   "showName": true,
   "instructions": "Construct a program that initializes variable <code>my_variable</code> to 5 and prints it out. \n\nThen, re-assign <code>my_variable</code> to 10 and print it out.\n\nThe output of the code you are constructing looks like:\n```\n5\n10\n```\n\nYou will not need to use all of the blocks.",
   "initial": "int my_variable = 5;\nSystem.out.println(my_variable);\nmy_variable = 10;\nSystem.out.println(my_variable);\nint my_variable = 10; #distractor\ndouble my_variable = 5; #distractor\nmy_variable = 5; #distractor\nmy_variable = \"10\"; #distractor",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"trashId\": \"sortableTrash\",\n                \"vartests\": [{\"initcode\": \"output = ''\", \"code\": \"\", \"message\": \"Testing...\", \"variables\": {\"output\": \"510\"}}\n                    ],\n                \"executable_code\": \"my_variable = 5\\noutput += str(my_variable)\\nmy_variable = 10\\noutput += str(my_variable)\",\n                \"programmingLang\": \"java\"\n            }",
   "grader": "4",
   "guidance": "You will use an `int` instead of a double since 5 and 10 are whole numbers. Additionally, if you use `double` it would print out `5.0` and `10.0` by default.\n\nYou cannot assign a String (`\"10\"`) to an `int`.\n\nYou do not need to re-declare when you reassign (`int my_variable = 10`).\n\n```\nint my_variable = 5;\nSystem.out.println(my_variable);\nmy_variable = 10;\nSystem.out.println(my_variable);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1224395313",
  "source": {
   "name": "Variable names",
   "showName": true,
   "instructions": "Which of the following is a correct variable name?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "19d4bcaf-a480-896d-176c-e1a268e515ca",
     "correct": false,
     "answer": "1st_variable"
    },
    {
     "_id": "a2520066-4178-e626-c39c-c76f0cf2fdfa",
     "correct": true,
     "answer": "variable_1"
    },
    {
     "_id": "5def279b-4c97-971e-2d01-dc8db8299403",
     "correct": false,
     "answer": "variable_1!"
    },
    {
     "_id": "d1ce0668-9733-2afd-fbf3-90d9e13a79bb",
     "correct": false,
     "answer": "-1-variable-"
    }
   ],
   "guidance": "Here are the basic rules for variable names: \n1. Start with a letter, dollar sign or underscore\n2. Remainder of variable name is letters, numbers, or underscores\n3. Cannot use a Java keyword\n4. Variables are case sensitive",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2166592224",
  "source": {
   "name": "Data Types",
   "showName": true,
   "instructions": "What are the four basic data types used in Java?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "2248a790-0e3c-9a40-9927-a703a227627d",
     "correct": false,
     "answer": "short"
    },
    {
     "_id": "852b4c55-184a-ae33-e327-6d7077949001",
     "correct": true,
     "answer": "int"
    },
    {
     "_id": "bfae0f9f-bbe9-ebde-66a5-f97b0eadae4d",
     "correct": false,
     "answer": "long"
    },
    {
     "_id": "f2876720-d2e2-8833-3a7c-971e1b0d1bda",
     "correct": true,
     "answer": "double"
    },
    {
     "_id": "d200699b-8abc-1e1d-b7d2-4f36694f921a",
     "correct": false,
     "answer": "char"
    },
    {
     "_id": "fb5473ff-c05c-4276-5e3f-9b121323fb3d",
     "correct": false,
     "answer": "number"
    },
    {
     "_id": "f20011ad-f2f6-4b10-8d0f-8ee4a94e8da8",
     "correct": true,
     "answer": "String"
    },
    {
     "_id": "548f680a-74e6-658e-a0b9-19dc17463c1e",
     "correct": true,
     "answer": "boolean"
    },
    {
     "_id": "1ed50fdf-3e31-1d3a-e1d4-f00fc934069f",
     "correct": false,
     "answer": "bits"
    }
   ],
   "guidance": "The four basic data types that you have learned so far are:\n\nString - collections of letters, numbers, and symbols\nboolean - true or false\nint - integers (no decimal)\ndouble - numbers with a decimal",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables6.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables6.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2085987884",
  "source": {
   "name": "Chat greeting",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Lab_Challenge",
   "preExecuteCommand": "javac code/fundamentals/Lab_Challenge.java",
   "guidance": "If you used the hint, you could have done this lab in 2 lines:\n```\n   System.out.println(greeting + \" Today is \" + dayOfWeek + \", \" + month + \" \" + day + \".\");\n   System.out.println(\"The current wait time is \" + currentWaitMinutes + \" minutes.\");\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": false,
   "sequence": [
    {
     "arguments": "Hello! Monday July 4 9",
     "input": "",
     "output": "Hello! Today is Monday, July 4.\nThe current wait time is 9 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Howdy! Monday May 5 19",
     "input": "",
     "output": "Howdy! Today is Monday, May 5.\nThe current wait time is 19 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Greetings! Wednesday May 18 1",
     "input": "",
     "output": "Greetings! Today is Wednesday, May 18.\nThe current wait time is 1 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Hi, banana pear 52 -4",
     "input": "",
     "output": "Hi, Today is banana, pear 52.\nThe current wait time is -4 minutes.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Lab_Challenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Lab_Challenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-330789572",
  "source": {
   "name": "Exercise 1",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise1",
   "preExecuteCommand": "javac code/fundamentals/Exercise1.java",
   "guidance": "```\nboolean my_boolean = true;\nSystem.out.println(my_boolean);\nmy_boolean = test;\nSystem.out.println(my_boolean);\n```\nYou can initialize `my_boolean` on a separate line and use `print` instead of `println`.\n```\nboolean my_boolean;\nmy_boolean = true;\nSystem.out.print(my_boolean);\nmy_boolean = test;\nSystem.out.print(my_boolean);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "true",
     "input": "",
     "output": "true\ntrue",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "false",
     "input": "",
     "output": "true\nfalse",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise1.java",
     "code/fundamentals/Lab_Challenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-903040154",
  "source": {
   "name": "Exercise 2",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise2",
   "preExecuteCommand": "javac code/fundamentals/Exercise2.java",
   "guidance": "You can do the declaration and initialization on the same line:\n```\n    int my_int = first_num;\n    System.out.println(my_int);\n    my_int = second_num;\n    System.out.println(my_int);\n    my_int = third_num;\n    System.out.println(my_int);\n```\nYou can also use `print` instead of `println`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1 2 3",
     "input": "",
     "output": "1\n2\n3",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "-3 -2 -1",
     "input": "",
     "output": "-3\n-2\n-1",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5 99 -2",
     "input": "",
     "output": "5\n99\n-2",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2269653152",
  "source": {
   "name": "Exercise 3",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise3",
   "preExecuteCommand": "javac code/fundamentals/Exercise3.java",
   "guidance": "Because the string variables are already declared and initialized, you simply need to access them. You need to use `println` to ensure the newlines after each line is printed.\n```\n    System.out.println(line1);\n    System.out.println(line2);\n```\n\nYou could use empty `println` commands if you wanted:\n```\n    System.out.print(line1);\n    System.out.println();\n    System.out.print(line2);\n    System.out.println();\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": false,
    "ignoreWhitespaces": false,
    "ignoreNewline": false,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "Hi Bye",
     "input": "",
     "output": "Hi\nBye\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1 2",
     "input": "",
     "output": "1\n2\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "true false",
     "input": "",
     "output": "true\nfalse\n",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1000393404",
  "source": {
   "name": "Exercise 4",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "java -cp code/fundamentals/ Exercise4",
   "preExecuteCommand": "javac code/fundamentals/Exercise4.java",
   "guidance": "You can separate your decleration and initialization onto two lines. Also, you can initialize to either `0` or `0.0` or `0.00` etc\n\n```\ndouble my_double = 0;\nSystem.out.println(my_double);\nmy_double = one;\nSystem.out.println(my_double);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "-9",
     "input": "",
     "output": "0.0\n-9.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "33.22",
     "input": "",
     "output": "0.0\n33.22",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2105043593",
  "source": {
   "name": "Exercise 5",
   "showName": true,
   "instructions": "Use **two** print statements to write the following String:\n`Okay, it is time to learn about operators.`\n\nMake sure there are **no** new lines.",
   "command": "java -cp code/fundamentals/ Exercise5",
   "preExecuteCommand": "javac code/fundamentals/Exercise5.java",
   "guidance": "You should not use **any** `println` statements - instead, only use `print`. It does not matter where you split up the string...\n\n```\nSystem.out.print(\"Okay, it is time to \");\nSystem.out.print(\"learn about operators.\");\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": false,
    "ignoreWhitespaces": false,
    "ignoreNewline": false,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Okay, it is time to learn about operators.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-225606126",
  "source": {
   "name": "Adding ints and doubles",
   "showName": true,
   "instructions": "What happens when you add an int and a double together?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "bc8dbe64-eda2-60df-5c38-cc446b03866b",
     "correct": false,
     "answer": "You get an error"
    },
    {
     "_id": "f4263f0e-d245-4f11-2073-a517e90270b0",
     "correct": false,
     "answer": "You get an int"
    },
    {
     "_id": "01063c21-7332-6c64-65d6-cd9f918314cd",
     "correct": true,
     "answer": "You get a double"
    }
   ],
   "guidance": "Since a double can represent the same value as an integer (`2.0` is the same value as `2`), but not necessarily the other way around (`2.4` cannot be an int) the result will be a double. For example:\n\n`7.0 + 3 = 10.0`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundAddition.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundAddition.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3212025220",
  "source": {
   "name": "Incrementing",
   "showName": true,
   "instructions": "Use the fewest characters possible to complete the code as described.",
   "text": "`int evens = 0;`\n`//add 2`\n`evens <<<+=2>>>;`\n`int all = 0;`\n`//add 1`\n`all<<<++>>>;`",
   "guidance": "```\nint evens = 0;\n//add 2\nevens+=2;\nint all = 0;\n//add 1\nall++;\n```\nIf you are incrementing by 1, the shortest way is the `++` operator, if you are incrementing by any other number (like 2) the shortest way is the `+=` operator.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundIncrement.java",
     "code/operators/PlaygroundAddition.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundIncrement.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "+=2",
     "++"
    ],
    "text": [
     "`int evens = 0;`\n`//add 2`\n`evens ",
     0,
     ";`\n`int all = 0;`\n`//add 1`\n`all",
     0,
     ";`"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1012342029",
  "source": {
   "name": "Concatenation",
   "showName": true,
   "instructions": "Construct a program that will print:\n`I understand String concatenation!`\n",
   "initial": "String a = \"I understand\";\nString b = a + \" String concatenation!\";\nSystem.out.println(b);\nString b = a + \"String concatenation!\"; #distractor\nString a = 'I understand '; #distractor\nSystem.out.println(a+b); #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "```\nString a = \"I understand\";\nString b = a + \" String concatenation!\";\nSystem.out.println(b);\n```\nIn Java, Strings must use double quotes (\") - not single quotes ('). \n\nAdditionally, you need to either end or start with a space when concatenating two Strings to get normal spacing in your resulting String. \n\nString a needs to be declared and instantiated *before* you use it in the instantiation of String b.\n\nSince you are concatenating String a in the initialization of String b, you do not need to concatenate it *again* in the print statement.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/operators/PlaygroundConcatenation.java",
     "code/operators/PlaygroundIncrement.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundConcatenation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-436876892",
  "source": {
   "name": "Decrementing",
   "showName": true,
   "instructions": "Use the fewest characters possible to complete the code as described.",
   "text": "`int a = 42;`\n`int b = 2;`\n`//decrement a by 1`\n`a<<<-->>>;`\n`//decrement a by b`\n`a<<<-=b>>>;`",
   "guidance": "```\nint a = 42;\nint b = 2;\n//decrement a by 1\na--;\n//decrement a by b\na-=b;\n```\n\nTo decrement by 1, you use the `--` operator. To decrement or subtract by any other number, you use `-=`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundSubtraction.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundSubtraction.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "--",
     "-=b"
    ],
    "text": [
     "`int a = 42;`\n`int b = 2;`\n`//decrement a by 1`\n`a",
     0,
     ";`\n`//decrement a by b`\n`a",
     0,
     ";`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3182685241",
  "source": {
   "name": "Division",
   "showName": true,
   "instructions": "Which of the following statements about division in Java is **FALSE**?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "20cbdcb8-5d89-be8b-0e2a-ce06b400dc63",
     "correct": false,
     "answer": "You can use the division operator with `int`s"
    },
    {
     "_id": "a18c3f44-9a7a-d473-3e9a-1db4bfe10522",
     "correct": true,
     "answer": "You will get the same result from the division operator using `int`s and `double`s"
    },
    {
     "_id": "8709f43c-8f4f-bf49-e28e-da9defcd5268",
     "correct": false,
     "answer": "You can use the division operator with `double`s"
    },
    {
     "_id": "1204353c-1b27-9b96-1cbb-3587ca3cdf73",
     "correct": false,
     "answer": "You are not allowed to divide by 0"
    }
   ],
   "guidance": "`int`s and `double`s behave differently with the division operator. Using `double` will result in a decimal where `int` will result in a whole number with the decimal removed. This means that `10/3` is either `3.3333...` or `3` based on data types.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundDivision.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundDivision.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2865610959",
  "source": {
   "name": "Modulo",
   "showName": true,
   "instructions": "What does modulo (`%`) do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "caa5ead1-0e21-0ee9-07b9-4294ae467633",
     "correct": false,
     "answer": "Determines if a number is even or odd"
    },
    {
     "_id": "1683c18e-8028-78e4-ed08-400978af773a",
     "correct": false,
     "answer": "Is another name for division"
    },
    {
     "_id": "23427095-50b5-eede-b414-bb5eb204d056",
     "correct": false,
     "answer": "Determines the percentage of two numbers"
    },
    {
     "_id": "582039a5-37e3-9388-8c53-a0973032e295",
     "correct": true,
     "answer": "Returns the remainder after division if performed"
    }
   ],
   "guidance": "Modulo is the remainder after division is performed. So division is a part of modulo, but modulo is not division. Modulo can be used to determine if a number is even or odd, but modulo can do more than that. Finally, the `%` is used with modulo, but modulo does not deal with percentages.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundModulo.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundModulo.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3051591814",
  "source": {
   "name": "Multiplication",
   "showName": true,
   "instructions": "Complete the code below so that the program prints the product of `a` and `b`.",
   "text": "```\nint a = 5;\nint b = 9;\nSystem.out.println( a <<<*>>> b);\n```",
   "guidance": "Use `*` for multiplication. You also need to add the variable b, multiplication requires two numbers.\n\n`System.out.println(a * b);`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundMultiply.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundMultiply.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "*"
    ],
    "text": [
     "```\nint a = 5;\nint b = 9;\nSystem.out.println( a ",
     0,
     " b);\n```"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2569485715",
  "source": {
   "name": "Order of Operations",
   "showName": true,
   "instructions": "At what point does Java calculate modulo?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "bae16272-bd40-019b-1894-2535626dd0df",
     "correct": false,
     "answer": "Parantheses"
    },
    {
     "_id": "6d3054a3-b8b7-0bfd-3598-4f5e8bbaa08b",
     "correct": false,
     "answer": "Exponent"
    },
    {
     "_id": "a58d58e9-c3c7-39f7-0fa8-efb0f23fa031",
     "correct": true,
     "answer": "Multiplication and Division"
    },
    {
     "_id": "5d14a9b2-2ada-924d-22d1-07a5582ec20e",
     "correct": false,
     "answer": "Addition and Subtraction"
    }
   ],
   "guidance": "Modulo is a type of division, so it is done in order from left to right with the `/` and `*` operators.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundOrder.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundOrder.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3851320160",
  "source": {
   "name": "Programming Math",
   "showName": true,
   "instructions": "Construct a program below such that Java reaches the same answer a normal calculator would. You will **not** use all the blocks.",
   "initial": "double a = 2;\nSystem.out.println(5/a);\nint a = 2; #distractor\nSystem.out.println( (double) (5/a) ); #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "```\ndouble a = 2;\nSystem.out.println(5/a);\n```\n\nFor \"normal\" division to take place, a needs to be a `double` because `5` is not. If it was `5.0` then `int` vs `double` would not matter.\n\nCasting the result as `double` is not necessary since the result of division including a double is always going to be a double.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/operators/PlaygroundModulo.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundModulo.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3653165015",
  "source": {
   "name": "Modulo",
   "showName": true,
   "instructions": "Which of the following is **not** correct?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b40c3d4f-3efe-8f7e-df26-10fade52fe33",
     "correct": false,
     "answer": "6 % 4 = 2"
    },
    {
     "_id": "7f92f93a-0d40-5a7b-ca48-463ac360621b",
     "correct": true,
     "answer": "1 % 0 = 1"
    },
    {
     "_id": "142ba911-4fa7-ce20-2eab-1e4ceb7fc4ad",
     "correct": false,
     "answer": "0 % 2 = 0"
    },
    {
     "_id": "df6cfe79-ab30-6760-2322-8f75241f738e",
     "correct": false,
     "answer": "15 % 4 = 3"
    }
   ],
   "guidance": "Because modulo is a type of division, you cannot modulo divide by 0. Similar to `/0`, `%0` produces an error.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundModulo.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundModulo.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1997792767",
  "source": {
   "name": "Equality",
   "showName": true,
   "instructions": "Enter the appropriate operator for each definition.",
   "text": "This operator checks if two values are equal - <<<==>>>\nThis operator assigns a value to a variable - <<<=>>>\nThis operator checks if two values are not equal - <<<!=>>>",
   "guidance": "* The `=` operator assigns a value to a variable\n* The `==` operator checks equality between two values\n* The `!=` operator checks inequality between two values",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundEquality.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundEquality.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "==",
     "=",
     "!="
    ],
    "text": [
     "This operator checks if two values are equal - ",
     0,
     "\nThis operator assigns a value to a variable - ",
     0,
     "\nThis operator checks if two values are not equal - ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3157845998",
  "source": {
   "name": "Equating to True",
   "showName": true,
   "instructions": "Which of the following conditions would cause the expression `a <= b` to equate to true? \n\n**Hint:** there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "a9b98a69-e35a-df53-1cf9-525ae460df2f",
     "correct": true,
     "answer": "If `a` is less than `b`"
    },
    {
     "_id": "f8444326-0244-3aa6-fb25-f2a1075ed55e",
     "correct": false,
     "answer": "If `a` is less than and equal to `b`"
    },
    {
     "_id": "d1a1e3b0-d207-d0ce-193b-5fb5a0e876ec",
     "correct": true,
     "answer": "If `a` is equal to `b`"
    },
    {
     "_id": "52f37bf4-a901-5735-0cc0-76c78c8bda54",
     "correct": false,
     "answer": "If `a` is greater than `b`"
    }
   ],
   "guidance": "There are two conditions that would case `a <= b` to be true. One is if `a` is less than `b` and the other is `a` is equal to `b`. \n\nAs long as one of those conditions is true, then `a <= b` will be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundLessThan.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundLessThan.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2590570867",
  "source": {
   "name": "Evaluating to True",
   "showName": true,
   "instructions": "Select all of the statements below that are true.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "2bb86746-f9a5-13b4-478f-c4691e628d11",
     "correct": true,
     "answer": "19 >= 19"
    },
    {
     "_id": "71f1966f-0b30-4d20-0160-78689bdb06c4",
     "correct": false,
     "answer": "18.9 >= 19"
    },
    {
     "_id": "7b067fe8-177f-487f-c1a7-8fec20f51528",
     "correct": false,
     "answer": "-19 >= 19"
    },
    {
     "_id": "d851e12a-2a2f-dffa-2c6a-8054c374d40c",
     "correct": true,
     "answer": "19 >= 9"
    }
   ],
   "guidance": "The `>=` operator only returns `true` if the first number is greater than or equal to the second number. So the follow statements would evaluate to true:\n`19 >= 19` and `19 >= 9`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundLessThan.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundLessThan.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2191103233",
  "source": {
   "name": "Evaluating &&",
   "showName": true,
   "instructions": "Fill in the blanks for the following two statements.",
   "text": "For an `&&` statement to be true, all of the boolean expressions must be <<<true>>>.\n\nFor an `&&` statement to be false, only one of the boolean expressions needs to be <<<false>>>.",
   "guidance": "All of the boolean expressions must be true if an and statement is true.\n\nOnly one boolean expression needs to be false for an and statement to be false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundAnd.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundAnd.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "true",
     "false"
    ],
    "text": [
     "For an `&&` statement to be true, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `&&` statement to be false, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3858330751",
  "source": {
   "name": "Evaluating ||",
   "showName": true,
   "instructions": "Fill in the blanks for the following two statements.",
   "text": "For an `||` statement to be false, all of the boolean expressions must be <<<false>>>.\n\nFor an `||` statement to be true, only one of the boolean expressions needs to be <<<true>>>.",
   "guidance": "The `or` operator requires that all boolean expressions be false for the whole thing to be false.\n\nHowever, only one boolean expressions needs to be true for an `or` operator to be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundOr.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundOr.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "false",
     "true"
    ],
    "text": [
     "For an `||` statement to be false, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `||` statement to be true, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3532271981",
  "source": {
   "name": "Many ways to tie a not",
   "showName": true,
   "instructions": "Evaluate the two expressions below.\n\n",
   "text": "`5 != 4` returns <<<true>>>\n`! 5 == 4` returns <<<true>>>",
   "guidance": "Both values evaluate to `true`. In the second case, 5==4 first evaluates to `false` and then `! false` evaluates to `true`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "true",
     "true"
    ],
    "text": [
     "`5 != 4` returns ",
     0,
     "\n`! 5 == 4` returns ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1476766980",
  "source": {
   "name": "Short Circuiting",
   "showName": true,
   "instructions": "Use the dropdown menus to complete the text below.",
   "text": "## Or Operator\nWhen using the `||` operator, Java checks to see if the first boolean expression is <<<true>>>. If it is <<<true>>>, Java returns <<<true>>> and ignores the second boolean expression.\n\n## And Operator\nWhen using the `&&` operator, Java checks to see if the first boolean expression is <<<false>>>. If it is <<<false>>>, Java returns <<<false>>> and ignores the second boolean expression.",
   "guidance": "If the first boolean expression for the `||` operator is true, then the entire thing is true. The second boolean expression is ignored.\n\nIf the first boolean expression for the `&&` operator is false, then the entire thing is false. The second boolean expression is ignored.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/PlaygroundShortCircuiting.java",
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundShortCircuiting.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "true",
     "true",
     "true",
     "false",
     "false",
     "false"
    ],
    "text": [
     "## Or Operator\nWhen using the `||` operator, Java checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Java returns ",
     0,
     " and ignores the second boolean expression.\n\n## And Operator\nWhen using the `&&` operator, Java checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Java returns ",
     0,
     " and ignores the second boolean expression."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4056916696",
  "source": {
   "name": "Evaluating Expressions",
   "showName": true,
   "instructions": "Using your knowledge of boolean operators, choose the best answer about evaluating the below:\n\n`( 5 != 4 ) && ( 3 > 0 ) && ( ! 2 == 3 ) || #unknown condition#`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a8e887c3-38a8-8ba3-d3ee-3a9fd77ab135",
     "correct": false,
     "answer": "The answer if `false` - Java short circuits because you have a `false` condition with an `&&` operator"
    },
    {
     "_id": "079b5b97-52d0-deb8-74a9-445f0a776a03",
     "correct": true,
     "answer": "The answer if `true` - Java short circuits because you have a `true` condition with an `||` operator"
    },
    {
     "_id": "90c1995a-3fa5-654c-2a47-88fa9f8958bf",
     "correct": false,
     "answer": "There is not enough information - we would need to know the \"unknown condition\""
    }
   ],
   "guidance": "Because the first three conditions evaluate as true, when combined with `&&` evaluates as true. When you reach the `||` operator you then have `true || #unknown condition#`. Java short circuits and evaluates the entire line as `true` without ever evaluating the #unknown condition#.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4124457133",
  "source": {
   "name": "Boolean Operators",
   "showName": true,
   "instructions": "Determine if the code below returns true or false.\n\n`(7 >= 7) && (true || 99 < 1) || ! (3 > 5 && 7 < 10) && 2 != 4`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "03e1b0ec-1cd4-5c0e-53e1-789ae07832a6",
     "correct": true,
     "answer": "true"
    },
    {
     "_id": "be9205d9-0f7f-d5c5-6ea9-1a4ade3a4d99",
     "correct": false,
     "answer": "false"
    }
   ],
   "guidance": "First, start by evaluating the expressions in the parentheses.\n\n`( 7 >= 7)` returns true.\n`(true || 99 < 1)` returns true\n`! (3 > 5 && 7 < 10)` returns true\n`2 != 4` returns true\nSo the boolean expression is now `true && true || true && true`, which returns true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4285137417",
  "source": {
   "name": "Identify the arithmetic operators",
   "showName": true,
   "instructions": "",
   "text": "<<<*>>> is the operator for multiplication\n<<<%>>> is the operator for modulo\n<<</>>> is the operator for division\nThe <<</>>> operator might return a result different from a calculator if both numbers are `int`s",
   "guidance": "\\* is the operator for multiplication\n% is the operator for modulo\n/ is the operator for division\nThe / operator might return a result different from a calculator if both numbers are `int`s",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/LabArithmetic.java",
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabArithmetic.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "*",
     "%",
     "/",
     "/"
    ],
    "text": [
     0,
     " is the operator for multiplication\n",
     0,
     " is the operator for modulo\n",
     0,
     " is the operator for division\nThe ",
     0,
     " operator might return a result different from a calculator if both numbers are `int`s"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1823701392",
  "source": {
   "name": "String operators",
   "showName": true,
   "instructions": "Which of the following operators *can* be used with strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "ebe1275b-9c27-0629-379a-3a195038672e",
     "correct": false,
     "answer": "`/`"
    },
    {
     "_id": "571f7ac6-9f11-492f-6988-fd2f4d585b90",
     "correct": false,
     "answer": "`*`"
    },
    {
     "_id": "ecf1554a-0dd1-a4ba-12ff-243e013bb21e",
     "correct": false,
     "answer": "`-`"
    },
    {
     "_id": "daa326f6-a645-58b8-dc55-202b6775ec0f",
     "correct": true,
     "answer": "`+`"
    }
   ],
   "guidance": "Only the `+` operator can be used with Strings. It serves as the concatenation operator - merging two strings together.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1182062674",
  "source": {
   "name": "Order of Operations",
   "showName": true,
   "instructions": "Drag the blocks into the correct order of operations.\n\n**Hint:** You will not need all the blocks - and make sure to explicitly list when modulo is done!",
   "initial": "Parentheses\nExponents\nMultiplication and Division and Modulo\nAddition and Subtraction\nParentheses and Exponents #distractor\nMultiplication and Division #distractor\nModulo #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "Order of operations starts with any expression in parentheses. Next, any exponents are calculated. Then multiplication and division (including modulo) are done moving from left to right. Finally, addition and subtraction are done moving from left to right.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3834665657",
  "source": {
   "name": "Evaluating Mixed Operator Expressions",
   "showName": true,
   "instructions": "What is the results of the following expression?\n\n```\n! (5 != 3) && (5 % 3 >= 2)\n```\n\n",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "885eb97e-a6b7-bca5-9703-58253153d292",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "f85db587-ae19-8e0f-4e9d-7ac458c88ea0",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "Starting with parentheses, `5 != 3` is `true`. So `! true` would be `false`. \n\nUsing the short circuit principal, we can stop evaluating the problem because when we use the `&&` operator, both boolean expressions must be `true` for it to return `true`. Since we have `false` for the first expression, it cannot be `true`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundNot.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundNot.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3510090921",
  "source": {
   "name": "Compilation Error",
   "showName": true,
   "instructions": "When you have the compilation error fixed, submit by clicking the button below.",
   "command": "bash .guides/secure/compiles.sh code/operators/Exercise1.java",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The compilation bug is located on the following line:\n```\nboolean b = 9;\n```\n\nThe bug is that `b` is declared as a `boolean` but is being assigned `9` which is an `int`. To correct this, you would replace `boolean` with `int` which results in:\n```\nint b = 9;\n```\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3481226015",
  "source": {
   "name": "Run-time Error",
   "showName": true,
   "instructions": "Once you have fixed the run-time error, submit your code using the button below.",
   "command": "bash .guides/secure/operators/exercise1.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The following will solve the code:\n```\nint a = 4;\nint b = 9;\n```\n\nBut there are other valid solutions! Can you find another one?",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4227872246",
  "source": {
   "name": "Exercise 2",
   "showName": true,
   "instructions": "Use the button below to submit your code.",
   "command": "bash .guides/secure/operators/exercise2.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Here are a few ways to accomplish this task:\n\n```\nSystem.out.println( 5 == 4 );\nSystem.out.println( ! 5 < 8 && 6 >= 2 );\nSystem.out.println( 5 > 8 || 6 < 2 );\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise2.java",
     "code/operators/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4024654471",
  "source": {
   "name": "String concatenation",
   "showName": true,
   "instructions": "When your code is ready, submit it using the button below.",
   "command": "bash .guides/secure/operators/exercise3.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The variables names can be anything you want. One needs to contain the string `Hello` and the other `world`. Don’t forget that there needs to be a space separating the two words. To print both variables at once, use the `+` operator to concatenate the strings.\n```\nString var_1 = \"Hello \";\nString var_2 = \"world\";\nSystem.out.println(var_1 + var_2);\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4157427635",
  "source": {
   "name": "Division",
   "showName": true,
   "instructions": "When you are ready to submit your code, press the button below.",
   "command": "bash .guides/secure/operators/exercise4.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You can either declare one or both of the variables as double:\n\n```\ndouble seven = 7.0;\ndouble two = 2.0;\nSystem.out.println(seven/two);\n```\n\nOr you can type cast one or both of the variables:\n```\nint seven = 7;\nint two = 2;\nSystem.out.println( (double) seven / (double) two);\n```\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2976548927",
  "source": {
   "name": "Casting and Parsing",
   "showName": true,
   "instructions": "Which of the following throws an error?\n\nAssume the following:\n```java\nint number = 5;\ndouble decimal = 6.2;\nboolean TF = true;\nString words = \"text\";\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "3475e980-f49b-2cb6-50a4-0674ef31a148",
     "correct": false,
     "answer": "```java\nSystem.out.println(words + String.valueOf(number+decimal));\n```"
    },
    {
     "_id": "21d677b3-0059-a906-2b72-f86955febd94",
     "correct": false,
     "answer": "```java\nSystem.out.println(String.valueOf(TF) + words);\n```"
    },
    {
     "_id": "f105b229-9ea1-8aca-d6f0-94c2750fb7e1",
     "correct": true,
     "answer": "```java\nwords = \"3.7\";\nSystem.out.println(Integer.parseInt(words) + number);\n```"
    },
    {
     "_id": "670739aa-775e-2d81-c9bb-8b7e1044d967",
     "correct": false,
     "answer": "```java\nwords = \"3.7\";\nSystem.out.println(Double.parseDouble(words) + decimal);\n```"
    },
    {
     "_id": "bf8b9c32-b228-62a3-bcca-7af5f8f255c0",
     "correct": false,
     "answer": "```java\nSystem.out.println(Boolean.parseBoolean(words));\n```"
    }
   ],
   "guidance": "```java\nwords = \"3.7\";\nSystem.out.println(Integer.parseInt(words) + number);\n```\nis invalid because `3.7` cannot be parsed into an int. The string must have an integer value. You can see in the other parse examples (`parseBoolean` and `parseDouble`) that words has to be re-assigned to a compatible String.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/operators/PlaygroundCasting.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/PlaygroundCasting.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3275115534",
  "source": {
   "name": "Operators",
   "showName": true,
   "instructions": "When your code is ready, press the submit button below.",
   "command": "bash .guides/secure/operators/labChallenge.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/operators/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3620880377",
  "source": {
   "name": "Concatenating Calculations",
   "showName": true,
   "instructions": "Once you have fixed the code, submit by pressing the button below.",
   "command": "java -cp code/operators/ Exercise5",
   "preExecuteCommand": "javac code/operators/Exercise5.java",
   "guidance": "Your friend is attempting to add Strings - but the `+` operate concatenates them! To solve this, you need to use `Integer.parseInt()` to transform the user input to `int`s. One example of a solution is:\n```\nint sum = Integer.parseInt(firstNum) + Integer.parseInt(secondNum);\nSystem.out.println(firstNum + \" + \" + secondNum + \" = \" + String.valueOf(sum));\n```\nYou might have noticed you do not need the `String.valueOf` since Java auto-converts some types - but being explicit is helpful to the readers of your code!",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "5\n4\n",
     "output": "9\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "1\n7\n",
     "output": "8\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "3\n4\n",
     "output": "7\n",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/operators/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/Exercise5.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4036047307",
  "source": {
   "name": "If Statement Syntax",
   "showName": true,
   "instructions": "Rearrange the code blocks below to create an if statement. Not all of the code blocks will be used. Hint: do not forget about indenting.",
   "initial": "if( 7 != 4 ) {\n    System.out.println(\"Only print this if true\");\n}\nSystem.out.println(\"Always print me!\");\nif 7 != 4 { #distractor\nif( 7 != 4 ) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "```\nif( 7 != 4 ) {\n    System.out.println(\"Only print this if true\");\n}\nSystem.out.println(\"Always print me!\");\n```\nThe three main pieces of an if statement are:\n1) The keyword `if`\n2) A boolean expression in `()`\n3) Statements in `{}` the run only if `true`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-952800372",
  "source": {
   "name": "Test Coverage",
   "showName": true,
   "instructions": "Which of the following code segments does *not* account for all possible values?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "87da37bf-08f2-42a5-55ea-ed97ffe29212",
     "correct": false,
     "answer": "```\nif( probability < .01 ) {\nSystem.out.println(\"That's improbable!\"); }\nif( probability < .05 && probability >= .01) {\nSystem.out.println(\"That's unlikely!\"); }\nif( probability >= .05 ) {\nSystem.out.println(\"I am not confident it wasn't chance.\"); }\n```"
    },
    {
     "_id": "ac9dd922-efd9-b640-2772-c51062233082",
     "correct": true,
     "answer": "```\nif( age < 18 ) {\nSystem.out.println(\"No voting, try again next year.\"); }\nif( age > 18 ) {\nSystem.out.println(\"You can vote!\"); }\n```"
    },
    {
     "_id": "d407bb93-9486-fc6b-af2a-f52e80348e27",
     "correct": false,
     "answer": "```\nif( chartPosition <=10 ) {\nSystem.out.println(\"You made it into the top 10 songs!\"); }\nif( chartPosition > 10 ) {\nSystem.out.println(\"Better luck next week.\"); }\n```"
    }
   ],
   "guidance": "The case where age is 18 is not covered by this set of if statements.\n```\nif( age < 18 ) {\nSystem.out.println(\"No voting, try again next year.\"); }\nif( age > 18 ) {\nSystem.out.println(\"You can vote!\"); }\n```\nTo correct it, you would need to change the third line of code to:\n```\nif( age >= 18 ) {\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundIf.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundIf.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2128281602",
  "source": {
   "name": "If Statement",
   "showName": true,
   "instructions": "What does an if statement *not* do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "82f3ef50-cd00-df93-f733-a39c92698ea0",
     "correct": false,
     "answer": "Allows specific code to run only when the boolean expression is true."
    },
    {
     "_id": "59c6cf83-b039-7035-288d-6d4cff82bb34",
     "correct": true,
     "answer": "If the boolean expression is false, the program never reaches the if statement."
    },
    {
     "_id": "e2a9a46d-7ca7-685f-62ce-05ad5845edae",
     "correct": false,
     "answer": "Allows your program to make decisions about what to do."
    },
    {
     "_id": "e5a437cc-4726-0765-861b-3cc7805e849e",
     "correct": false,
     "answer": "Checks to see if a certain condition is true."
    }
   ],
   "guidance": "The program will only know the boolean expression is false after reaching the if statement. The first line with the `if` keyword is always checked, it is the code in the `{}` which will not be run if the boolean expression is false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2774974450",
  "source": {
   "name": "Even numbers",
   "showName": true,
   "instructions": "Complete the if statements below so that it will determine if the variable `num` is even or odd.",
   "text": "`if<<<(>>>num%2==0<<<)>>> <<<{>>>`\n`    System.out.println(\"Even\");`\n`<<<}>>>`\n`if<<<(>>>num%2==1<<<)>>> <<<{>>>`\n`    System.out.println(\"Odd\");`\n`<<<}>>>`",
   "guidance": "```\nif(num%2==0) {\n    System.out.println(\"Even\");\n}\nif(num%2==1) {\n    System.out.println(\"Odd\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "(",
     ")",
     "{",
     "}",
     "(",
     ")",
     "{",
     "}"
    ],
    "text": [
     "`if",
     0,
     "num%2==0",
     0,
     " ",
     0,
     "`\n`    System.out.println(\"Even\");`\n`",
     0,
     "`\n`if",
     0,
     "num%2==1",
     0,
     " ",
     0,
     "`\n`    System.out.println(\"Odd\");`\n`",
     0,
     "`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-88978139",
  "source": {
   "name": "If Else Syntax",
   "showName": true,
   "instructions": "Which of the following are true about using an if-else? \n\n*Hint:* There is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "cd52c537-1fcf-1212-7a1a-7986c3965d9f",
     "correct": false,
     "answer": "Indentation effects how the code runs"
    },
    {
     "_id": "973c96f5-bcd6-cb79-fe3b-bd84b945b50d",
     "correct": true,
     "answer": "You use curly braces `{}` after both the `if` condition and the `else` keyword"
    },
    {
     "_id": "dac65968-086b-e561-367d-a13da0472f27",
     "correct": true,
     "answer": "The `else` condition does not have another boolean expression"
    },
    {
     "_id": "d3c023ca-81b6-f26d-391a-107d268a91b7",
     "correct": false,
     "answer": "There should be empty parentheses `()` after the `else` keyword"
    }
   ],
   "guidance": "Java uses curly braces to group code commands. While indention is helpful, it does not effect how the program runs. Instead, you need to use curly braces to tell Java what code runs in both the true condition (after the `if`) and the false condition (after the `else`).\n\nAdditionally, because `else` refers to the `if`, it does not need its own boolean expression. Nor does it need parentheses.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundIfElseSyntax.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundIfElseSyntax.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3652686275",
  "source": {
   "name": "Evens and Odd with If Else",
   "showName": true,
   "instructions": "Construct code that determines whether `num` is even or odd.",
   "initial": "if ( num % 2 == 0 ) {\n    System.out.println(\"Even\");\n} else {\n    System.out.println(\"Odd\");\n}",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "```\nif ( num % 2 == 0 ) {\n    System.out.println(\"Even\");\n} else {\n    System.out.println(\"Odd\");\n}\n```\nIf the remainder of `num`/2 is `0` then it is even. We can find the remainder using `%` the modulo operator.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundIf.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundIf.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-34021480",
  "source": {
   "name": "Debugging If Else",
   "showName": true,
   "instructions": "What is wrong with the code below? \n\n**Hint:** There is more than one right answer.\n\n```\nif 3 > 4 {\n   System.out.println(\"true\");\nelse\n   System.out.println(\"false\");\n}\n```",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "d92ac4eb-b394-4441-353c-8b18abfcf326",
     "correct": true,
     "answer": "A closing curly brace is missing before the `else` keyword"
    },
    {
     "_id": "308a0669-c6a0-f2d1-6696-a850ade75d05",
     "correct": false,
     "answer": "Parentheses are missing after the `else` keyword"
    },
    {
     "_id": "23f4bb9c-338f-1c08-a688-d310ece95e1e",
     "correct": true,
     "answer": "An open curly brace is missing after the `else` keyword "
    },
    {
     "_id": "8c22423b-7d44-47f8-51dd-18db8a5023cd",
     "correct": true,
     "answer": "Parentheses are missing around the boolean expression after the `if` keyword"
    }
   ],
   "guidance": "The corrected code looks like:\n```\nif (3 > 4) {\n   System.out.println(\"true\");\n}\nelse {\n   System.out.println(\"false\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1569129353",
  "source": {
   "name": "Compound Conditionals",
   "showName": true,
   "instructions": "Why would you want to use a compound conditional? \n\n**Hint:** There is more than one right answer",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "f059fcbf-03a8-521a-8772-1af7cca8e8f5",
     "correct": true,
     "answer": "If two or more thing have to be true."
    },
    {
     "_id": "bc74126b-ccbc-5abb-76f6-b88041e4f65c",
     "correct": false,
     "answer": "When you want your code to be faster."
    },
    {
     "_id": "248f40fc-a57c-59ad-9096-936275f40aac",
     "correct": false,
     "answer": "You will get an error message if you don't use a compound conditional."
    },
    {
     "_id": "b15a294d-d8a0-d167-704f-9cf7136f2ec3",
     "correct": true,
     "answer": "When you want your code to be more concise and easy to read."
    }
   ],
   "guidance": "Compound conditionals allow you to test two or more things to be true, and they make your code more concise and easy to read.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundCompoundConditionals.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundCompoundConditionals.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3392232950",
  "source": {
   "name": "Nested If Else",
   "showName": true,
   "instructions": "Construct code that will print out messages based on the weather:\n * \"Bring an umbrella!\" if it is rainy but *not* windy\n * \"Wear a rain jacket.\" if it is rainy and windy\n * \"You might need a coat.\" if it is cold but *not* rainy\n * \"Enjoy your day!\" if it is *not* cold and *not* rainy\n\nAssume the following boolean variables have already been declared and initialized: `rainy`, `windy`, `cold`",
   "initial": "if( rainy ) {\n    if( windy ) {\n        System.out.print(\"Wear a rain jacket.\"); }\n    else {\n        System.out.print(\"Bring an umbrella!\"); }\n} else {\n    if( cold ) {\n        System.out.print(\"You might need a coat.\"); }\n    else {\n        System.out.print(\"Enjoy your day!\"); }\n}\n    ",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "1",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3356521837",
  "source": {
   "name": "Switch Case Syntax",
   "showName": true,
   "instructions": "Which of the following code snippets has the **correct** switch case syntax?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "218a1bbd-83c5-7ec0-9ce4-7e83957f1383",
     "correct": false,
     "answer": "```\nString num = \"two\";\nint number;\nswitch (num) {\n    case \"one\" : number = 1;\n    case \"two\" : number = 2;\n    case \"three\" : number = 3;\n    default: number = -1;\n}\n```"
    },
    {
     "_id": "a4a8ac81-2148-3861-2d6f-d14c18276a0d",
     "correct": true,
     "answer": "```\nString num = \"two\";\nint number;\nswitch (num) {\n    case \"one\" : number = 1; break;\n    case \"two\" : number = 2; break;\n    case \"three\" : number = 3; break;\n    default: number = -1;\n}\n```"
    },
    {
     "_id": "1174c2b0-87c3-1d3e-92d6-f13be004c695",
     "correct": false,
     "answer": "```\nString num = \"two\";\nint number;\nswitch num:\n    case \"one\" : number = 1; break;\n    case \"two\" : number = 2; break;\n    case \"three\" : number = 3; break;\n    default: number = -1;\n```"
    },
    {
     "_id": "4c030e41-bf51-5873-da1f-169e8bf16497",
     "correct": false,
     "answer": "```\nString num = \"two\";\nint number;\nswitch num :\n    case \"one\" : number = 1;\n    case \"two\" : number = 2;\n    case \"three\" : number = 3;\n    default: number = -1;\n```"
    }
   ],
   "guidance": "`switch (num) { `\nThe `switch` keyword is followed by the variable in parentheses. \nThe case statements are surrounded by curly braces.\n\n`case \"one\" : number = 1; break;`\nEach case keyword is followed by a value and `:`\nAfter the code that should run if the variable == value, a `break;` ends the switch case.\n\n`default: number = -1;`\nIt is best practice to have the final case be `default`. Since it is the final case, it does not need a `break;` statement.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundSwitchSyntax.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundSwitchSyntax.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2751211238",
  "source": {
   "name": "Switch Case or If Else?",
   "showName": true,
   "instructions": "Which of the following would be most appropriate for a `switch` statement?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "905ff6cf-c38b-2113-f728-6ec8d5e1e916",
     "correct": true,
     "answer": "Providing different types information about a caller's bank account (or re-directing the call) based on the number they pressed on their keypad"
    },
    {
     "_id": "97135b54-8949-1e9c-52c4-9e62d6f3b7a1",
     "correct": false,
     "answer": "Generating the overall and category (male under 20, male over 50, female under 20, female over 50, etc) winners of a 5k race"
    },
    {
     "_id": "4e254ba9-60b9-8ea4-25ce-76a64aea539e",
     "correct": false,
     "answer": "Using a car's mileage and service history to list what work needs to be done"
    }
   ],
   "guidance": "Generating race winners requires comparing unknown times and for categories you will need a compound conditional -- so you need `if else`.\n\nSimilarly, a car's milage is going to fall into a range. Additionally, you will need to check against variables to see if the service has been done -- so you need `if else`.\n\nA `switch` would work well in the phone example since the user can only press 10 discrete buttons with constant values.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/PlaygroundSwitch.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/PlaygroundSwitch.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1569349997",
  "source": {
   "name": "Only 4 pennies",
   "showName": true,
   "instructions": "You are programming a children's game where the most \"money\" they can hold is 4 pennies. Which of the following is the most elegant way to print out a full list of store items the player can afford based on the number of `pennies` they have?\n\nWhile **elegant code** has no firm definition, assume for now it means \"uses cleverness to accomplish something in much less code, but in a way that's readable\". It is also assumed that the code works as intended (which some of the below do not).",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "559ca87f-9d7f-7354-fc1f-e25bfa0e5194",
     "correct": false,
     "answer": "```\nswitch(pennies) {\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n            System.out.println(\"Marble (1 penny)\"); break;    \n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n            System.out.println(\"Pet rock (2 pennies)\");\n            System.out.println(\"Marble (1 penny)\"); break; \n    case 4: System.out.println(\"Goldfish (4 pennies)\");\n            System.out.println(\"Jump rope (3 pennies)\");\n            System.out.println(\"Pet rock (2 pennies)\");\n            System.out.println(\"Marble (1 penny)\"); break; \n   default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    },
    {
     "_id": "9a1836f3-7817-7599-8468-c7d55f6baceb",
     "correct": false,
     "answer": "```\nswitch(pennies) {\n    case 1: System.out.println(\"Marble (1 penny)\");\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n    case 4: System.out.println(\"Goldfish (4 pennies)\"); break; \n   default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    },
    {
     "_id": "216898d2-dd31-1823-d0ba-1548b8b8c2ed",
     "correct": true,
     "answer": "```\nswitch(pennies) {\n    case 4: System.out.println(\"Goldfish (4 pennies)\");\n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    },
    {
     "_id": "d3a192ff-8218-9b60-0a2e-e864523d2d26",
     "correct": false,
     "answer": "```\nswitch(pennies) {\n    case 4: System.out.println(\"Goldfish (4 pennies)\"); break;\n    case 3: System.out.println(\"Jump rope (3 pennies)\"); break;\n    case 2: System.out.println(\"Pet rock (2 pennies)\"); break;\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    default: System.out.println(\"It looks like you need some pennies!\");\n}\n```"
    }
   ],
   "guidance": "By listing the items from most expensive to least expensive, we can assume that every item after the true case is also affordable.\n\n```\nswitch(pennies) {\n    case 4: System.out.println(\"Goldfish (4 pennies)\");\n    case 3: System.out.println(\"Jump rope (3 pennies)\");\n    case 2: System.out.println(\"Pet rock (2 pennies)\");\n    case 1: System.out.println(\"Marble (1 penny)\"); break;\n    default: System.out.println(\"It looks like you need some pennies!\");\n}\n```\n\nAdditionally, by removing the `break` statements between cases, Java continues down until the end of case 1. \n\nExploiting these two facts results in only having to state each item once.\n\nThe one break statement after case 1 is so that the out of money message should really only show if they do not have any pennies.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3628618227",
  "source": {
   "name": "Switch key words",
   "showName": true,
   "instructions": "Select the correct key word to make the code below a valid switch statement.",
   "text": "```\n<<<switch>>> (years) {\n    <<<case>>> 5: System.out.println(\"5 years of employment award\"); break;\n    <<<case>>> 10: System.out.println(\"10 years of employment award\"); break;\n    <<<case>>> 20: System.out.println(\"20 years of employment award\"); break;\n    <<<case>>> 30: System.out.println(\"30 years of employment award\"); break;\n    <<<default>>>: System.out.println(\"You are not eligible for a longevity award this year\");\n}\n```",
   "guidance": "```\nswitch (years) {\n    case 5: System.out.println(\"5 years of employment award\"); break;\n    case 10: System.out.println(\"10 years of employment award\"); break;\n    case 20: System.out.println(\"20 years of employment award\"); break;\n    case 30: System.out.println(\"30 years of employment award\"); break;\n    default: System.out.println(\"You are not eligible for a longevity award this year\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "switch",
     "case",
     "case",
     "case",
     "case",
     "default"
    ],
    "text": [
     "```\n",
     0,
     " (years) {\n    ",
     0,
     " 5: System.out.println(\"5 years of employment award\"); break;\n    ",
     0,
     " 10: System.out.println(\"10 years of employment award\"); break;\n    ",
     0,
     " 20: System.out.println(\"20 years of employment award\"); break;\n    ",
     0,
     " 30: System.out.println(\"30 years of employment award\"); break;\n    ",
     0,
     ": System.out.println(\"You are not eligible for a longevity award this year\");\n}\n```"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-330785356",
  "source": {
   "name": "Using Switch",
   "showName": true,
   "instructions": "Complete the paragraph below using the drop downs.",
   "text": "A switch statement uses a variable to make decisions. It checks if the variable is <<<equal>>> to the value listed after the key word <<<case>>>. After the `:` is code that runs if that case is true. The code ends with a <<<break>>> statement. The default case should be <<<last>>>.",
   "guidance": "A switch statement uses a variable to make decisions. It checks if the variable is equal to the value listed after the key word case. After the `:` is code that runs if that case is true. The code ends with a break statement. The default case should be last.\n\nIn code, this looks like:\n```\nint dayOfWeek = 3;\nswitch(dayOfWeek) {\n\n    case 1: System.out.print(\"Sunday\"); \n                 break;\n    case 2: System.out.print(\"Monday\"); \n                 break;\n    case 3: System.out.print(\"Tuesday\"); \n                 break;\n    case 4: System.out.print(\"Wednesday\"); \n                 break;\n    case 5: System.out.print(\"Thursday\"); \n                 break;\n    case 6: System.out.print(\"Friday\"); \n                 break;\n    case 7: System.out.print(\"Saturday\"); \n                 break;\n    default : System.out.print(\"Invalid\");\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/conditionals/Lab_IfElse.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_IfElse.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "equal",
     "case",
     "break",
     "last"
    ],
    "text": [
     "A switch statement uses a variable to make decisions. It checks if the variable is ",
     0,
     " to the value listed after the key word ",
     0,
     ". After the `:` is code that runs if that case is true. The code ends with a ",
     0,
     " statement. The default case should be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1176951521",
  "source": {
   "name": "Month of the Year",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.",
   "command": "java -cp code/conditionals/ Lab_Challenge",
   "preExecuteCommand": "javac code/conditionals/Lab_Challenge.java",
   "guidance": "One way to complete this challenge is a switch statement:\n```\nString monthString;\n        switch (month) {\n            case 1:  monthString = \"January\";\n                     break;\n            case 2:  monthString = \"February\";\n                     break;\n            case 3:  monthString = \"March\";\n                     break;\n            case 4:  monthString = \"April\";\n                     break;\n            case 5:  monthString = \"May\";\n                     break;\n            case 6:  monthString = \"June\";\n                     break;\n            case 7:  monthString = \"July\";\n                     break;\n            case 8:  monthString = \"August\";\n                     break;\n            case 9:  monthString = \"September\";\n                     break;\n            case 10: monthString = \"October\";\n                     break;\n            case 11: monthString = \"November\";\n                     break;\n            case 12: monthString = \"December\";\n                     break;\n            default: monthString = \"Invalid month\";\n                     break;\n        }\n        System.out.println(monthString);\n```\n\nYou could have also used either if or if-else statements too!",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1",
     "input": "",
     "output": "January",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "2",
     "input": "",
     "output": "February ",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "3",
     "input": "",
     "output": "March",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "4",
     "input": "",
     "output": "April",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5",
     "input": "",
     "output": "May",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "6",
     "input": "",
     "output": "June",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "7",
     "input": "",
     "output": "July",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "8",
     "input": "",
     "output": "August",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "9",
     "input": "",
     "output": "September",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "10",
     "input": "",
     "output": "October ",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "11",
     "input": "",
     "output": "November",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "12",
     "input": "",
     "output": "December",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Lab_Challenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Lab_Challenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-80440528",
  "source": {
   "name": "Conditionals Exercise 1",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.",
   "command": "java -cp code/conditionals/ Exercise1",
   "preExecuteCommand": "javac code/conditionals/Exercise1.java",
   "guidance": "You can do this with a single if statement using a compound conditional.\n```\nif( (x >= 0 && x <=25) || (x >= 75 && x <=100) )\n{ System.out.println(String.valueOf(x) + \" is between 0 and 25 or 75 and 100\"); }\n```\nAlternatively, you could use other combinations such as two separate if statements.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "0",
     "input": "",
     "output": "0 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "25",
     "input": "",
     "output": "25 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "26",
     "input": "",
     "output": "",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "74",
     "input": "",
     "output": "",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "75",
     "input": "",
     "output": "75 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "100",
     "input": "",
     "output": "100 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "101",
     "input": "",
     "output": "",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-596935369",
  "source": {
   "name": "Conditionals Exercise 2",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.",
   "command": "java -cp code/conditionals/ Exercise2",
   "preExecuteCommand": "javac code/conditionals/Exercise2.java",
   "guidance": "A single if else can be used to solve this exercise. The real trick is remembering that modulo `%` is the correct operator to check for \"is divisible by\".\n\n```\nif ( x % 5 == 0 )\n{ System.out.println(String.valueOf(x) + \" is divisible by 5\"); }\nelse\n{ System.out.println(String.valueOf(x) + \" is not divisible by 5\"); }\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "0",
     "input": "",
     "output": "0 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5",
     "input": "",
     "output": "5 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "500",
     "input": "",
     "output": "500 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "2",
     "input": "",
     "output": "2 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "11",
     "input": "",
     "output": "11 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "13",
     "input": "",
     "output": "13 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise2.java",
     "code/conditionals/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2452434922",
  "source": {
   "name": "Conditionals Exercise 3",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.\n\n",
   "command": "java -cp code/conditionals/ Exercise3",
   "preExecuteCommand": "javac code/conditionals/Exercise3.java",
   "guidance": "You can use a single `if else` with compound conditionals to complete this challenge:\n```\nif ( x % 5 == 0 && x % 2 == 0)\n{ System.out.println(String.valueOf(x) + \" is divisible by 5 and even\"); }\nelse\n{ System.out.println(String.valueOf(x) + \" is not divisible by 5 or it is odd\"); }\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "50",
     "input": "",
     "output": "50 is divisible by 5 and even",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "110",
     "input": "",
     "output": "110 is divisible by 5 and even",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "3",
     "input": "",
     "output": "3 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5",
     "input": "",
     "output": "5 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "25",
     "input": "",
     "output": "25 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "6",
     "input": "",
     "output": "6 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1582349154",
  "source": {
   "name": "Conditionals Exercise 4",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.\n\n",
   "command": "java -cp code/conditionals/ Exercise4",
   "preExecuteCommand": "javac code/conditionals/Exercise4.java",
   "guidance": "There are a few ways to do this. One way is to use a `switch case`:\n```\nswitch (x) {\n    case \"yellow\": case \"red\": case \"blue\": System.out.println(x + \" is a primary color\"); break;\n    default: System.out.println(x + \" is not a primary color\"); break;\n}\n```\n\nOr you could use a compound conditional in an `if else`:\n```\nif( x.equals(\"yellow\") || x.equals(\"red\") || x.equals(\"blue\") )\n    {System.out.println(x + \" is a primary color\");}\nelse\n    {System.out.println(x + \" is not a primary color\");}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "red",
     "input": "",
     "output": "red is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "yellow",
     "input": "",
     "output": "yellow is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "blue",
     "input": "",
     "output": "blue is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "purple",
     "input": "",
     "output": "purple is not a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "orange",
     "input": "",
     "output": "orange is not a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "teal",
     "input": "",
     "output": "teal is not a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "brown",
     "input": "",
     "output": "brown is not a primary color",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise4.java",
     "code/conditionals/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-334334839",
  "source": {
   "name": "Conditionals Exercise 5",
   "showName": true,
   "instructions": "Once your code works, submit it using the button below.\n\n",
   "command": "java -cp code/conditionals/ Exercise5",
   "preExecuteCommand": "javac code/conditionals/Exercise5.java",
   "guidance": "You can either use a switch case or if else for this:\n\n```\nswitch (x) {\n    case \"a\": case \"e\": case \"i\": case \"o\": case \"u\": System.out.println(x + \" is a vowel\"); break;\n    default: System.out.println(x + \" is not a vowel\"); break;\n}\n```\n\n```\nif( x.equals(\"a\") || x.equals(\"e\") || x.equals(\"i\") || x.equals(\"o\") || x.equals(\"u\") )\n    {System.out.println(x + \" is a vowel\");}\nelse\n    {System.out.println(x + \" is not a vowel\");}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "a",
     "input": "",
     "output": "a is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "e",
     "input": "",
     "output": "e is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "i",
     "input": "",
     "output": "i is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "o",
     "input": "",
     "output": "o is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "u",
     "input": "",
     "output": "u is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "b",
     "input": "",
     "output": "b is not a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "x",
     "input": "",
     "output": "x is not a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "k",
     "input": "",
     "output": "k is not a vowel",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/conditionals/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3742835214",
  "source": {
   "name": "For Loop - Summing",
   "showName": true,
   "instructions": "Rearrange the commands below to make a for loop that find the sum of the numbers between 0 and 100, and then prints the sum.\n\nHint: You will not need all the blocks.",
   "initial": "int sum = 0;\nfor(int i = 1; i <= 100; i++)\n{\nsum += i;\n}\nSystem.out.println(sum);\nfor(int i = 0; i < 100; i++) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}\n",
   "grader": "1",
   "guidance": "The correct answer requires you to both create a variable and print that variable **outside** of the loop.\n```java\nint sum = 0;\nfor(int i = 1; i <= 100; i++)\n{\n    sum += i;\n}\nSystem.out.println(sum);\n```\nAdditionally, since we are adding `i` to `sum`, `i` needs to start at 1 and actually reach 100. This means our loop header should be `for(int i = 1; i <= 100; i++)`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/loops/TurtleLoopImages.java"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/TurtleLoopImages.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3472530842",
  "source": {
   "name": "For Loop Headers",
   "showName": true,
   "instructions": "Which of the following for loop headers will loop exactly 100 times? \nIgnore the value of the iterating variable - focus on number of times the loop body will be executed.\n\nNote: There could be more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ede0aacf-cc9d-ccba-e514-27acf5cf621c",
     "correct": true,
     "answer": "for(int i = 0 ; i < 100; i++)"
    },
    {
     "_id": "a28b5a3e-79e4-83d6-fb27-c471fe30edb2",
     "correct": false,
     "answer": "for(int i = 0 ; i <= 100; i++)"
    },
    {
     "_id": "fcb9631f-067b-dbc0-e6ef-5b5fe8709297",
     "correct": true,
     "answer": "for(int i = 1 ; i <= 100; i++)"
    },
    {
     "_id": "d87cfb2e-2de6-089d-3968-6157f10045cd",
     "correct": false,
     "answer": "for(int i = 1 ; i < 100; i++)"
    }
   ],
   "guidance": "There are two correct answers. One goes from 1 to 100:\n`for(int i = 1 ; i <= 100; i++)`\nwhile the other goes from 0 to 99:\n`for(int i = 0 ; i < 100; i++)`\n\nBut both will loop exactly 100 times.\n\n`for(int i = 0 ; i <= 100; i++)` loops from 0 to 100 which is 101 times.\n\n`for(int i = 1 ; i < 100; i++)` loops from 1 to 99 which is only 99 times.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-90216139",
  "source": {
   "name": "While Loop",
   "showName": true,
   "instructions": "Re-arrange the following lines of code so that the while loop will print \"Java\" 10 times.",
   "initial": "int i = 0;\nwhile( i < 10 ) {\nSystem.out.println(\"Java\");\ni++;\n}",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "1",
   "guidance": "The solution is:\n```java\nint i = 0;\nwhile( i < 10 ) {\n    System.out.println(\"Java\");\n    i++;\n}\n```\nNotice that the variable is declared **before** the while loop and is incremented **inside** the loop.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4115991507",
  "source": {
   "name": "While loop with break",
   "showName": true,
   "instructions": "Fill in the blanks such that the while loop will stop once `total` is greater than 100.",
   "text": "int <<<total>>> = 0;\nwhile ( <<<true>>> ) {\n    //increment total by some random number\n    if(<<<total>>> > 100)\n    { <<<break;>>> }\n}",
   "guidance": "The correct solution looks like: \n```\nint total = 0;\nwhile ( true ) {\n    //increment total by some random number\n    if(total > 100)\n    { break; }\n}\n```\n\nYou can make the same loop work without the if statement and break...\n```\nint total = 0;\nwhile (total < 100) {\n    //increment total by some random number\n}\n```\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "total",
     "true",
     "total",
     "break;"
    ],
    "text": [
     "int ",
     0,
     " = 0;\nwhile ( ",
     0,
     " ) {\n    //increment total by some random number\n    if(",
     0,
     " > 100)\n    { ",
     0,
     " }\n}"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-945377963",
  "source": {
   "name": "Nested Loops",
   "showName": true,
   "instructions": "\"A cumulative song is a song with a simple verse structure modified by progressive addition so that each verse is longer than the verse before.\" - Wikipedia\n\nHelp create a cheat sheet for the cumulative song the 12 days of Christmas where you start with 1, add 2, etc.\n\nThe output should look like:\n```\n1\n1 2 \n1 2 3 \n1 2 3 4 \n....\n1 2 3 4 5 6 7 8 9 10 11 12 \n```\n",
   "initial": "for(int line = 1; line <= 12; line++) {\nfor(int num = 1; num <= line; num++) {\nSystem.out.print(num + \" \");\n}\nSystem.out.println(\"\");\n}",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "The solution looks like:\n```\nfor(int line = 1; line <= 12; line++) {\n    for(int num = 1; num <= line; num++) {\n        System.out.print(num + \" \");\n    }\n    System.out.println(\"\");\n}\n```\nNotice that you have the loops starting at 1 (you could also simply add 1 when printing). Also notice that due to this shift, we are using `<=` instead of `<`.\n\nIn the inner loop, you see that the boolean expression uses the outer loop counter `num <= line` - this is common when the amount of times the inner loop is executed changes in a way that relates to the outer loop.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/loops/NestedLoops.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/NestedLoops.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-700172618",
  "source": {
   "name": "Identifying Patterns with Nested Loops",
   "showName": true,
   "instructions": "Fill in the blanks such that the nested loop would print out:\n\n```\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n```",
   "text": "```\nfor(int i = 0; i < <<<4>>>; i++) {\n    System.out.println(\"<<<&&>>>\");\n    for(int j = 0; j < <<<3>>>; j++) {\n        System.out.println(\"<<<*>>>\");\n    }\n}\n```",
   "guidance": "The tricky part is to identify the pattern. The first pattern is that `&& * * *` is repeated 4 times. The pattern within that is that you have a `&&` followed by 3 `*`. Once you are able to break this up - it is clear that the outer loop should repeat 4 times and the inner loop should repeat 3.\n\nThe next part is where to place the print statements. In this case, since the one-off `&&` is printed *before* the repeating `*` - the print statement in the outer loop needs to be placed *before* the inner loop.\n\n```\nfor(int i = 0; i < 4; i++) {\n    System.out.println(\"&&\");\n    for(int j = 0; j < 3; j++) {\n        System.out.println(\"*\");\n    }\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "4",
     "&&",
     "3",
     "*"
    ],
    "text": [
     "```\nfor(int i = 0; i < ",
     0,
     "; i++) {\n    System.out.println(\"",
     0,
     "\");\n    for(int j = 0; j < ",
     0,
     "; j++) {\n        System.out.println(\"",
     0,
     "\");\n    }\n}\n```"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-673183289",
  "source": {
   "name": "Variables - Strings",
   "showName": true,
   "instructions": "Select the correct line of code to declare and assign the `var` variable.",
   "initial": "String var = \"this is a string\";\nString var = 'this is a string'; #distractor\nstring var = \"this is a string\"; #distractor\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "`String var = \"this is a string\";`\nUnlike the other data types so far, `String` is uppercase. The string must be surrounded by double quotation marks `\"`.\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/fundamentals/PlaygroundVariables5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/PlaygroundVariables5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-13854979",
  "source": {
   "name": "Exercise 5",
   "showName": true,
   "instructions": "Use **two** print statements to write the following String:\n`Okay, it is time to learn about operators.`",
   "command": "bash .guides/secure/fundamentals/exercise5.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "It does not matter where you split up the string...but the first line needs to use `print` instead of `println`. You can also use `print` for both.\n\n```\nSystem.out.print(\"Okay, it is time to \");\nSystem.out.print(\"learn about operators.\");\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/fundamentals/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 }
]